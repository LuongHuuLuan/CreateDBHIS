using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;

namespace CreateDBOracle.DataContextModel
{
    public partial class Model12 : DbContext
    {
        public Model12()
            : base("name=Model12")
        {
        }

        public virtual DbSet<ACS_ACTIVITY_LOG> ACS_ACTIVITY_LOG { get; set; }
        public virtual DbSet<ACS_ACTIVITY_TYPE> ACS_ACTIVITY_TYPE { get; set; }
        public virtual DbSet<ACS_APP_OTP_TYPE> ACS_APP_OTP_TYPE { get; set; }
        public virtual DbSet<ACS_APPLICATION> ACS_APPLICATION { get; set; }
        public virtual DbSet<ACS_APPLICATION_ROLE> ACS_APPLICATION_ROLE { get; set; }
        public virtual DbSet<ACS_AUTHEN_REQUEST> ACS_AUTHEN_REQUEST { get; set; }
        public virtual DbSet<ACS_AUTHOR_SYSTEM> ACS_AUTHOR_SYSTEM { get; set; }
        public virtual DbSet<ACS_CONTROL> ACS_CONTROL { get; set; }
        public virtual DbSet<ACS_CONTROL_ROLE> ACS_CONTROL_ROLE { get; set; }
        public virtual DbSet<ACS_CREDENTIAL_DATA> ACS_CREDENTIAL_DATA { get; set; }
        public virtual DbSet<ACS_MODULE> ACS_MODULE { get; set; }
        public virtual DbSet<ACS_MODULE_GROUP> ACS_MODULE_GROUP { get; set; }
        public virtual DbSet<ACS_MODULE_ROLE> ACS_MODULE_ROLE { get; set; }
        public virtual DbSet<ACS_OTP> ACS_OTP { get; set; }
        public virtual DbSet<ACS_OTP_TYPE> ACS_OTP_TYPE { get; set; }
        public virtual DbSet<ACS_ROLE> ACS_ROLE { get; set; }
        public virtual DbSet<ACS_ROLE_AUTHOR> ACS_ROLE_AUTHOR { get; set; }
        public virtual DbSet<ACS_ROLE_BASE> ACS_ROLE_BASE { get; set; }
        public virtual DbSet<ACS_ROLE_USER> ACS_ROLE_USER { get; set; }
        public virtual DbSet<ACS_TOKEN> ACS_TOKEN { get; set; }
        public virtual DbSet<ACS_USER> ACS_USER { get; set; }
        public virtual DbSet<D_HIS_CARD_PATIENT> D_HIS_CARD_PATIENT { get; set; }
        public virtual DbSet<D_HIS_EXP_MEST_DETAIL> D_HIS_EXP_MEST_DETAIL { get; set; }
        public virtual DbSet<D_HIS_EXP_MEST_DETAIL_1> D_HIS_EXP_MEST_DETAIL_1 { get; set; }
        public virtual DbSet<D_HIS_MATERIAL_TYPE_1> D_HIS_MATERIAL_TYPE_1 { get; set; }
        public virtual DbSet<D_HIS_MEDI_STOCK_1> D_HIS_MEDI_STOCK_1 { get; set; }
        public virtual DbSet<D_HIS_MEDI_STOCK_2> D_HIS_MEDI_STOCK_2 { get; set; }
        public virtual DbSet<D_HIS_MEDICINE_TYPE_1> D_HIS_MEDICINE_TYPE_1 { get; set; }
        public virtual DbSet<D_HIS_PATIENT> D_HIS_PATIENT { get; set; }
        public virtual DbSet<D_HIS_PATIENT_CARD> D_HIS_PATIENT_CARD { get; set; }
        public virtual DbSet<D_HIS_PATIENT_PROGRAM> D_HIS_PATIENT_PROGRAM { get; set; }
        public virtual DbSet<D_HIS_PATIENT_TREATMENT> D_HIS_PATIENT_TREATMENT { get; set; }
        public virtual DbSet<D_HIS_PATIENT_TYPE_ALTER_1> D_HIS_PATIENT_TYPE_ALTER_1 { get; set; }
        public virtual DbSet<D_HIS_SERE_SERV_1> D_HIS_SERE_SERV_1 { get; set; }
        public virtual DbSet<D_HIS_SERVICE_REQ_1> D_HIS_SERVICE_REQ_1 { get; set; }
        public virtual DbSet<D_HIS_SERVICE_REQ_2> D_HIS_SERVICE_REQ_2 { get; set; }
        public virtual DbSet<D_HIS_TREATMENT_BED_ROOM_1> D_HIS_TREATMENT_BED_ROOM_1 { get; set; }
        public virtual DbSet<HIS_ACCIDENT_BODY_PART> HIS_ACCIDENT_BODY_PART { get; set; }
        public virtual DbSet<HIS_ACCIDENT_CARE> HIS_ACCIDENT_CARE { get; set; }
        public virtual DbSet<HIS_ACCIDENT_HELMET> HIS_ACCIDENT_HELMET { get; set; }
        public virtual DbSet<HIS_ACCIDENT_HURT> HIS_ACCIDENT_HURT { get; set; }
        public virtual DbSet<HIS_ACCIDENT_HURT_TYPE> HIS_ACCIDENT_HURT_TYPE { get; set; }
        public virtual DbSet<HIS_ACCIDENT_LOCATION> HIS_ACCIDENT_LOCATION { get; set; }
        public virtual DbSet<HIS_ACCIDENT_POISON> HIS_ACCIDENT_POISON { get; set; }
        public virtual DbSet<HIS_ACCIDENT_RESULT> HIS_ACCIDENT_RESULT { get; set; }
        public virtual DbSet<HIS_ACCIDENT_VEHICLE> HIS_ACCIDENT_VEHICLE { get; set; }
        public virtual DbSet<HIS_ACCOUNT_BOOK> HIS_ACCOUNT_BOOK { get; set; }
        public virtual DbSet<HIS_ACIN_INTERACTIVE> HIS_ACIN_INTERACTIVE { get; set; }
        public virtual DbSet<HIS_ACTIVE_INGREDIENT> HIS_ACTIVE_INGREDIENT { get; set; }
        public virtual DbSet<HIS_ADR> HIS_ADR { get; set; }
        public virtual DbSet<HIS_ADR_MEDICINE_TYPE> HIS_ADR_MEDICINE_TYPE { get; set; }
        public virtual DbSet<HIS_AGE_TYPE> HIS_AGE_TYPE { get; set; }
        public virtual DbSet<HIS_ALERT> HIS_ALERT { get; set; }
        public virtual DbSet<HIS_ALLERGENIC> HIS_ALLERGENIC { get; set; }
        public virtual DbSet<HIS_ALLERGY_CARD> HIS_ALLERGY_CARD { get; set; }
        public virtual DbSet<HIS_ANTIBIOTIC_MICROBI> HIS_ANTIBIOTIC_MICROBI { get; set; }
        public virtual DbSet<HIS_ANTIBIOTIC_NEW_REG> HIS_ANTIBIOTIC_NEW_REG { get; set; }
        public virtual DbSet<HIS_ANTIBIOTIC_OLD_REG> HIS_ANTIBIOTIC_OLD_REG { get; set; }
        public virtual DbSet<HIS_ANTIBIOTIC_REQUEST> HIS_ANTIBIOTIC_REQUEST { get; set; }
        public virtual DbSet<HIS_ANTICIPATE> HIS_ANTICIPATE { get; set; }
        public virtual DbSet<HIS_ANTICIPATE_BLTY> HIS_ANTICIPATE_BLTY { get; set; }
        public virtual DbSet<HIS_ANTICIPATE_MATY> HIS_ANTICIPATE_MATY { get; set; }
        public virtual DbSet<HIS_ANTICIPATE_METY> HIS_ANTICIPATE_METY { get; set; }
        public virtual DbSet<HIS_ANTIGEN> HIS_ANTIGEN { get; set; }
        public virtual DbSet<HIS_ANTIGEN_METY> HIS_ANTIGEN_METY { get; set; }
        public virtual DbSet<HIS_APPOINTMENT> HIS_APPOINTMENT { get; set; }
        public virtual DbSet<HIS_APPOINTMENT_PERIOD> HIS_APPOINTMENT_PERIOD { get; set; }
        public virtual DbSet<HIS_APPOINTMENT_SERV> HIS_APPOINTMENT_SERV { get; set; }
        public virtual DbSet<HIS_AREA> HIS_AREA { get; set; }
        public virtual DbSet<HIS_ASSESSMENT_MEMBER> HIS_ASSESSMENT_MEMBER { get; set; }
        public virtual DbSet<HIS_ASSESSMENT_OBJECT> HIS_ASSESSMENT_OBJECT { get; set; }
        public virtual DbSet<HIS_ASSIGN_REASON> HIS_ASSIGN_REASON { get; set; }
        public virtual DbSet<HIS_ATC> HIS_ATC { get; set; }
        public virtual DbSet<HIS_AWARENESS> HIS_AWARENESS { get; set; }
        public virtual DbSet<HIS_BABY> HIS_BABY { get; set; }
        public virtual DbSet<HIS_BANK> HIS_BANK { get; set; }
        public virtual DbSet<HIS_BCS_MATY_REQ_DT> HIS_BCS_MATY_REQ_DT { get; set; }
        public virtual DbSet<HIS_BCS_MATY_REQ_REQ> HIS_BCS_MATY_REQ_REQ { get; set; }
        public virtual DbSet<HIS_BCS_METY_REQ_DT> HIS_BCS_METY_REQ_DT { get; set; }
        public virtual DbSet<HIS_BCS_METY_REQ_REQ> HIS_BCS_METY_REQ_REQ { get; set; }
        public virtual DbSet<HIS_BED> HIS_BED { get; set; }
        public virtual DbSet<HIS_BED_BSTY> HIS_BED_BSTY { get; set; }
        public virtual DbSet<HIS_BED_LOG> HIS_BED_LOG { get; set; }
        public virtual DbSet<HIS_BED_ROOM> HIS_BED_ROOM { get; set; }
        public virtual DbSet<HIS_BED_TYPE> HIS_BED_TYPE { get; set; }
        public virtual DbSet<HIS_BHYT_BLACKLIST> HIS_BHYT_BLACKLIST { get; set; }
        public virtual DbSet<HIS_BHYT_PARAM> HIS_BHYT_PARAM { get; set; }
        public virtual DbSet<HIS_BHYT_WHITELIST> HIS_BHYT_WHITELIST { get; set; }
        public virtual DbSet<HIS_BID> HIS_BID { get; set; }
        public virtual DbSet<HIS_BID_BLOOD_TYPE> HIS_BID_BLOOD_TYPE { get; set; }
        public virtual DbSet<HIS_BID_MATERIAL_TYPE> HIS_BID_MATERIAL_TYPE { get; set; }
        public virtual DbSet<HIS_BID_MEDICINE_TYPE> HIS_BID_MEDICINE_TYPE { get; set; }
        public virtual DbSet<HIS_BID_TYPE> HIS_BID_TYPE { get; set; }
        public virtual DbSet<HIS_BILL_FUND> HIS_BILL_FUND { get; set; }
        public virtual DbSet<HIS_BILL_GOODS> HIS_BILL_GOODS { get; set; }
        public virtual DbSet<HIS_BIRTH_CERT_BOOK> HIS_BIRTH_CERT_BOOK { get; set; }
        public virtual DbSet<HIS_BLOOD> HIS_BLOOD { get; set; }
        public virtual DbSet<HIS_BLOOD_ABO> HIS_BLOOD_ABO { get; set; }
        public virtual DbSet<HIS_BLOOD_GIVER> HIS_BLOOD_GIVER { get; set; }
        public virtual DbSet<HIS_BLOOD_GROUP> HIS_BLOOD_GROUP { get; set; }
        public virtual DbSet<HIS_BLOOD_RH> HIS_BLOOD_RH { get; set; }
        public virtual DbSet<HIS_BLOOD_TYPE> HIS_BLOOD_TYPE { get; set; }
        public virtual DbSet<HIS_BLOOD_VOLUME> HIS_BLOOD_VOLUME { get; set; }
        public virtual DbSet<HIS_BLTY_SERVICE> HIS_BLTY_SERVICE { get; set; }
        public virtual DbSet<HIS_BLTY_VOLUME> HIS_BLTY_VOLUME { get; set; }
        public virtual DbSet<HIS_BODY_PART> HIS_BODY_PART { get; set; }
        public virtual DbSet<HIS_BORN_POSITION> HIS_BORN_POSITION { get; set; }
        public virtual DbSet<HIS_BORN_RESULT> HIS_BORN_RESULT { get; set; }
        public virtual DbSet<HIS_BORN_TYPE> HIS_BORN_TYPE { get; set; }
        public virtual DbSet<HIS_BRANCH> HIS_BRANCH { get; set; }
        public virtual DbSet<HIS_BRANCH_TIME> HIS_BRANCH_TIME { get; set; }
        public virtual DbSet<HIS_CACHE_MONITOR> HIS_CACHE_MONITOR { get; set; }
        public virtual DbSet<HIS_CANCEL_REASON> HIS_CANCEL_REASON { get; set; }
        public virtual DbSet<HIS_CARD> HIS_CARD { get; set; }
        public virtual DbSet<HIS_CARE> HIS_CARE { get; set; }
        public virtual DbSet<HIS_CARE_DETAIL> HIS_CARE_DETAIL { get; set; }
        public virtual DbSet<HIS_CARE_SUM> HIS_CARE_SUM { get; set; }
        public virtual DbSet<HIS_CARE_TEMP> HIS_CARE_TEMP { get; set; }
        public virtual DbSet<HIS_CARE_TEMP_DETAIL> HIS_CARE_TEMP_DETAIL { get; set; }
        public virtual DbSet<HIS_CARE_TYPE> HIS_CARE_TYPE { get; set; }
        public virtual DbSet<HIS_CAREER> HIS_CAREER { get; set; }
        public virtual DbSet<HIS_CARER_CARD> HIS_CARER_CARD { get; set; }
        public virtual DbSet<HIS_CARER_CARD_BORROW> HIS_CARER_CARD_BORROW { get; set; }
        public virtual DbSet<HIS_CARO_ACCOUNT_BOOK> HIS_CARO_ACCOUNT_BOOK { get; set; }
        public virtual DbSet<HIS_CARO_DEPARTMENT> HIS_CARO_DEPARTMENT { get; set; }
        public virtual DbSet<HIS_CASHIER_ADD_CONFIG> HIS_CASHIER_ADD_CONFIG { get; set; }
        public virtual DbSet<HIS_CASHIER_ROOM> HIS_CASHIER_ROOM { get; set; }
        public virtual DbSet<HIS_CASHOUT> HIS_CASHOUT { get; set; }
        public virtual DbSet<HIS_CO_TREATMENT> HIS_CO_TREATMENT { get; set; }
        public virtual DbSet<HIS_CONFIG> HIS_CONFIG { get; set; }
        public virtual DbSet<HIS_CONFIG_GROUP> HIS_CONFIG_GROUP { get; set; }
        public virtual DbSet<HIS_CONTACT> HIS_CONTACT { get; set; }
        public virtual DbSet<HIS_CONTACT_POINT> HIS_CONTACT_POINT { get; set; }
        public virtual DbSet<HIS_CONTRAINDICATION> HIS_CONTRAINDICATION { get; set; }
        public virtual DbSet<HIS_DATA_STORE> HIS_DATA_STORE { get; set; }
        public virtual DbSet<HIS_DB_LOG> HIS_DB_LOG { get; set; }
        public virtual DbSet<HIS_DEATH_CAUSE> HIS_DEATH_CAUSE { get; set; }
        public virtual DbSet<HIS_DEATH_CERT_BOOK> HIS_DEATH_CERT_BOOK { get; set; }
        public virtual DbSet<HIS_DEATH_WITHIN> HIS_DEATH_WITHIN { get; set; }
        public virtual DbSet<HIS_DEBATE> HIS_DEBATE { get; set; }
        public virtual DbSet<HIS_DEBATE_EKIP_USER> HIS_DEBATE_EKIP_USER { get; set; }
        public virtual DbSet<HIS_DEBATE_INVITE_USER> HIS_DEBATE_INVITE_USER { get; set; }
        public virtual DbSet<HIS_DEBATE_REASON> HIS_DEBATE_REASON { get; set; }
        public virtual DbSet<HIS_DEBATE_TEMP> HIS_DEBATE_TEMP { get; set; }
        public virtual DbSet<HIS_DEBATE_TYPE> HIS_DEBATE_TYPE { get; set; }
        public virtual DbSet<HIS_DEBATE_USER> HIS_DEBATE_USER { get; set; }
        public virtual DbSet<HIS_DEBT_GOODS> HIS_DEBT_GOODS { get; set; }
        public virtual DbSet<HIS_DEPARTMENT> HIS_DEPARTMENT { get; set; }
        public virtual DbSet<HIS_DEPARTMENT_TRAN> HIS_DEPARTMENT_TRAN { get; set; }
        public virtual DbSet<HIS_DEPOSIT_REASON> HIS_DEPOSIT_REASON { get; set; }
        public virtual DbSet<HIS_DEPOSIT_REQ> HIS_DEPOSIT_REQ { get; set; }
        public virtual DbSet<HIS_DESK> HIS_DESK { get; set; }
        public virtual DbSet<HIS_DHST> HIS_DHST { get; set; }
        public virtual DbSet<HIS_DIIM_TYPE> HIS_DIIM_TYPE { get; set; }
        public virtual DbSet<HIS_DISEASE_RELATION> HIS_DISEASE_RELATION { get; set; }
        public virtual DbSet<HIS_DISEASE_TYPE> HIS_DISEASE_TYPE { get; set; }
        public virtual DbSet<HIS_DISPENSE> HIS_DISPENSE { get; set; }
        public virtual DbSet<HIS_DISPENSE_TYPE> HIS_DISPENSE_TYPE { get; set; }
        public virtual DbSet<HIS_DOC_HOLD_TYPE> HIS_DOC_HOLD_TYPE { get; set; }
        public virtual DbSet<HIS_DOCUMENT_BOOK> HIS_DOCUMENT_BOOK { get; set; }
        public virtual DbSet<HIS_DOSAGE_FORM> HIS_DOSAGE_FORM { get; set; }
        public virtual DbSet<HIS_DRUG_INTERVENTION> HIS_DRUG_INTERVENTION { get; set; }
        public virtual DbSet<HIS_EINVOICE_TYPE> HIS_EINVOICE_TYPE { get; set; }
        public virtual DbSet<HIS_EKIP> HIS_EKIP { get; set; }
        public virtual DbSet<HIS_EKIP_PLAN> HIS_EKIP_PLAN { get; set; }
        public virtual DbSet<HIS_EKIP_PLAN_USER> HIS_EKIP_PLAN_USER { get; set; }
        public virtual DbSet<HIS_EKIP_TEMP> HIS_EKIP_TEMP { get; set; }
        public virtual DbSet<HIS_EKIP_TEMP_USER> HIS_EKIP_TEMP_USER { get; set; }
        public virtual DbSet<HIS_EKIP_USER> HIS_EKIP_USER { get; set; }
        public virtual DbSet<HIS_EMERGENCY_WTIME> HIS_EMERGENCY_WTIME { get; set; }
        public virtual DbSet<HIS_EMOTIONLESS_METHOD> HIS_EMOTIONLESS_METHOD { get; set; }
        public virtual DbSet<HIS_EMOTIONLESS_RESULT> HIS_EMOTIONLESS_RESULT { get; set; }
        public virtual DbSet<HIS_EMPLOYEE> HIS_EMPLOYEE { get; set; }
        public virtual DbSet<HIS_EMPLOYEE_SCHEDULE> HIS_EMPLOYEE_SCHEDULE { get; set; }
        public virtual DbSet<HIS_EMR_COVER_CONFIG> HIS_EMR_COVER_CONFIG { get; set; }
        public virtual DbSet<HIS_EMR_COVER_TYPE> HIS_EMR_COVER_TYPE { get; set; }
        public virtual DbSet<HIS_EMR_DOCUMENT_STT> HIS_EMR_DOCUMENT_STT { get; set; }
        public virtual DbSet<HIS_EMR_FORM> HIS_EMR_FORM { get; set; }
        public virtual DbSet<HIS_EMTE_MATERIAL_TYPE> HIS_EMTE_MATERIAL_TYPE { get; set; }
        public virtual DbSet<HIS_EMTE_MEDICINE_TYPE> HIS_EMTE_MEDICINE_TYPE { get; set; }
        public virtual DbSet<HIS_EQUIPMENT_SET> HIS_EQUIPMENT_SET { get; set; }
        public virtual DbSet<HIS_EQUIPMENT_SET_MATY> HIS_EQUIPMENT_SET_MATY { get; set; }
        public virtual DbSet<HIS_EVENTS_CAUSES_DEATH> HIS_EVENTS_CAUSES_DEATH { get; set; }
        public virtual DbSet<HIS_EXAM_SCHEDULE> HIS_EXAM_SCHEDULE { get; set; }
        public virtual DbSet<HIS_EXAM_SERE_DIRE> HIS_EXAM_SERE_DIRE { get; set; }
        public virtual DbSet<HIS_EXAM_SERVICE_TEMP> HIS_EXAM_SERVICE_TEMP { get; set; }
        public virtual DbSet<HIS_EXE_SERVICE_MODULE> HIS_EXE_SERVICE_MODULE { get; set; }
        public virtual DbSet<HIS_EXECUTE_GROUP> HIS_EXECUTE_GROUP { get; set; }
        public virtual DbSet<HIS_EXECUTE_ROLE> HIS_EXECUTE_ROLE { get; set; }
        public virtual DbSet<HIS_EXECUTE_ROLE_USER> HIS_EXECUTE_ROLE_USER { get; set; }
        public virtual DbSet<HIS_EXECUTE_ROOM> HIS_EXECUTE_ROOM { get; set; }
        public virtual DbSet<HIS_EXME_REASON_CFG> HIS_EXME_REASON_CFG { get; set; }
        public virtual DbSet<HIS_EXP_BLTY_SERVICE> HIS_EXP_BLTY_SERVICE { get; set; }
        public virtual DbSet<HIS_EXP_MEST> HIS_EXP_MEST { get; set; }
        public virtual DbSet<HIS_EXP_MEST_BLOOD> HIS_EXP_MEST_BLOOD { get; set; }
        public virtual DbSet<HIS_EXP_MEST_BLTY_REQ> HIS_EXP_MEST_BLTY_REQ { get; set; }
        public virtual DbSet<HIS_EXP_MEST_DELETED> HIS_EXP_MEST_DELETED { get; set; }
        public virtual DbSet<HIS_EXP_MEST_MATERIAL> HIS_EXP_MEST_MATERIAL { get; set; }
        public virtual DbSet<HIS_EXP_MEST_MATY_REQ> HIS_EXP_MEST_MATY_REQ { get; set; }
        public virtual DbSet<HIS_EXP_MEST_MEDICINE> HIS_EXP_MEST_MEDICINE { get; set; }
        public virtual DbSet<HIS_EXP_MEST_METY_REQ> HIS_EXP_MEST_METY_REQ { get; set; }
        public virtual DbSet<HIS_EXP_MEST_REASON> HIS_EXP_MEST_REASON { get; set; }
        public virtual DbSet<HIS_EXP_MEST_STT> HIS_EXP_MEST_STT { get; set; }
        public virtual DbSet<HIS_EXP_MEST_TEMPLATE> HIS_EXP_MEST_TEMPLATE { get; set; }
        public virtual DbSet<HIS_EXP_MEST_TYPE> HIS_EXP_MEST_TYPE { get; set; }
        public virtual DbSet<HIS_EXP_MEST_USER> HIS_EXP_MEST_USER { get; set; }
        public virtual DbSet<HIS_EXPIRED_DATE_CFG> HIS_EXPIRED_DATE_CFG { get; set; }
        public virtual DbSet<HIS_EXRO_ROOM> HIS_EXRO_ROOM { get; set; }
        public virtual DbSet<HIS_EYE_SURGRY_DESC> HIS_EYE_SURGRY_DESC { get; set; }
        public virtual DbSet<HIS_FILE_TYPE> HIS_FILE_TYPE { get; set; }
        public virtual DbSet<HIS_FILM_SIZE> HIS_FILM_SIZE { get; set; }
        public virtual DbSet<HIS_FINANCE_PERIOD> HIS_FINANCE_PERIOD { get; set; }
        public virtual DbSet<HIS_FORM_TYPE_CFG> HIS_FORM_TYPE_CFG { get; set; }
        public virtual DbSet<HIS_FORM_TYPE_CFG_DATA> HIS_FORM_TYPE_CFG_DATA { get; set; }
        public virtual DbSet<HIS_FUEX_TYPE> HIS_FUEX_TYPE { get; set; }
        public virtual DbSet<HIS_FUND> HIS_FUND { get; set; }
        public virtual DbSet<HIS_GENDER> HIS_GENDER { get; set; }
        public virtual DbSet<HIS_HEALTH_EXAM_RANK> HIS_HEALTH_EXAM_RANK { get; set; }
        public virtual DbSet<HIS_HEIN_APPROVAL> HIS_HEIN_APPROVAL { get; set; }
        public virtual DbSet<HIS_HEIN_SERVICE_TYPE> HIS_HEIN_SERVICE_TYPE { get; set; }
        public virtual DbSet<HIS_HIV_TREATMENT> HIS_HIV_TREATMENT { get; set; }
        public virtual DbSet<HIS_HOLD_RETURN> HIS_HOLD_RETURN { get; set; }
        public virtual DbSet<HIS_HORE_DHTY> HIS_HORE_DHTY { get; set; }
        public virtual DbSet<HIS_HORE_HANDOVER> HIS_HORE_HANDOVER { get; set; }
        public virtual DbSet<HIS_HORE_HANDOVER_STT> HIS_HORE_HANDOVER_STT { get; set; }
        public virtual DbSet<HIS_HORE_HOHA> HIS_HORE_HOHA { get; set; }
        public virtual DbSet<HIS_HOSPITALIZE_REASON> HIS_HOSPITALIZE_REASON { get; set; }
        public virtual DbSet<HIS_HTU> HIS_HTU { get; set; }
        public virtual DbSet<HIS_ICD> HIS_ICD { get; set; }
        public virtual DbSet<HIS_ICD_CM> HIS_ICD_CM { get; set; }
        public virtual DbSet<HIS_ICD_GROUP> HIS_ICD_GROUP { get; set; }
        public virtual DbSet<HIS_ICD_SERVICE> HIS_ICD_SERVICE { get; set; }
        public virtual DbSet<HIS_IMP_MEST> HIS_IMP_MEST { get; set; }
        public virtual DbSet<HIS_IMP_MEST_BLOOD> HIS_IMP_MEST_BLOOD { get; set; }
        public virtual DbSet<HIS_IMP_MEST_MATE_REQ> HIS_IMP_MEST_MATE_REQ { get; set; }
        public virtual DbSet<HIS_IMP_MEST_MATERIAL> HIS_IMP_MEST_MATERIAL { get; set; }
        public virtual DbSet<HIS_IMP_MEST_MEDI_REQ> HIS_IMP_MEST_MEDI_REQ { get; set; }
        public virtual DbSet<HIS_IMP_MEST_MEDICINE> HIS_IMP_MEST_MEDICINE { get; set; }
        public virtual DbSet<HIS_IMP_MEST_PAY> HIS_IMP_MEST_PAY { get; set; }
        public virtual DbSet<HIS_IMP_MEST_PROPOSE> HIS_IMP_MEST_PROPOSE { get; set; }
        public virtual DbSet<HIS_IMP_MEST_STT> HIS_IMP_MEST_STT { get; set; }
        public virtual DbSet<HIS_IMP_MEST_TYPE> HIS_IMP_MEST_TYPE { get; set; }
        public virtual DbSet<HIS_IMP_MEST_TYPE_USER> HIS_IMP_MEST_TYPE_USER { get; set; }
        public virtual DbSet<HIS_IMP_MEST_USER> HIS_IMP_MEST_USER { get; set; }
        public virtual DbSet<HIS_IMP_SOURCE> HIS_IMP_SOURCE { get; set; }
        public virtual DbSet<HIS_IMP_USER_TEMP> HIS_IMP_USER_TEMP { get; set; }
        public virtual DbSet<HIS_IMP_USER_TEMP_DT> HIS_IMP_USER_TEMP_DT { get; set; }
        public virtual DbSet<HIS_INFUSION> HIS_INFUSION { get; set; }
        public virtual DbSet<HIS_INFUSION_SUM> HIS_INFUSION_SUM { get; set; }
        public virtual DbSet<HIS_INTERACTIVE_GRADE> HIS_INTERACTIVE_GRADE { get; set; }
        public virtual DbSet<HIS_INVOICE> HIS_INVOICE { get; set; }
        public virtual DbSet<HIS_INVOICE_BOOK> HIS_INVOICE_BOOK { get; set; }
        public virtual DbSet<HIS_INVOICE_DETAIL> HIS_INVOICE_DETAIL { get; set; }
        public virtual DbSet<HIS_INVOICE_PRINT> HIS_INVOICE_PRINT { get; set; }
        public virtual DbSet<HIS_KSK> HIS_KSK { get; set; }
        public virtual DbSet<HIS_KSK_ACCESS> HIS_KSK_ACCESS { get; set; }
        public virtual DbSet<HIS_KSK_CONTRACT> HIS_KSK_CONTRACT { get; set; }
        public virtual DbSet<HIS_KSK_DRIVER> HIS_KSK_DRIVER { get; set; }
        public virtual DbSet<HIS_KSK_DRIVER_CAR> HIS_KSK_DRIVER_CAR { get; set; }
        public virtual DbSet<HIS_KSK_GENERAL> HIS_KSK_GENERAL { get; set; }
        public virtual DbSet<HIS_KSK_OCCUPATIONAL> HIS_KSK_OCCUPATIONAL { get; set; }
        public virtual DbSet<HIS_KSK_OTHER> HIS_KSK_OTHER { get; set; }
        public virtual DbSet<HIS_KSK_OVER_EIGHTEEN> HIS_KSK_OVER_EIGHTEEN { get; set; }
        public virtual DbSet<HIS_KSK_PERIOD_DRIVER> HIS_KSK_PERIOD_DRIVER { get; set; }
        public virtual DbSet<HIS_KSK_SERVICE> HIS_KSK_SERVICE { get; set; }
        public virtual DbSet<HIS_KSK_UNDER_EIGHTEEN> HIS_KSK_UNDER_EIGHTEEN { get; set; }
        public virtual DbSet<HIS_KSK_UNEI_VATY> HIS_KSK_UNEI_VATY { get; set; }
        public virtual DbSet<HIS_LICENSE_CLASS> HIS_LICENSE_CLASS { get; set; }
        public virtual DbSet<HIS_LOCATION_STORE> HIS_LOCATION_STORE { get; set; }
        public virtual DbSet<HIS_MACHINE> HIS_MACHINE { get; set; }
        public virtual DbSet<HIS_MACHINE_SERV_MATY> HIS_MACHINE_SERV_MATY { get; set; }
        public virtual DbSet<HIS_MANUFACTURER> HIS_MANUFACTURER { get; set; }
        public virtual DbSet<HIS_MATERIAL> HIS_MATERIAL { get; set; }
        public virtual DbSet<HIS_MATERIAL_BEAN> HIS_MATERIAL_BEAN { get; set; }
        public virtual DbSet<HIS_MATERIAL_MATERIAL> HIS_MATERIAL_MATERIAL { get; set; }
        public virtual DbSet<HIS_MATERIAL_PATY> HIS_MATERIAL_PATY { get; set; }
        public virtual DbSet<HIS_MATERIAL_TYPE> HIS_MATERIAL_TYPE { get; set; }
        public virtual DbSet<HIS_MATERIAL_TYPE_MAP> HIS_MATERIAL_TYPE_MAP { get; set; }
        public virtual DbSet<HIS_MATY_MATY> HIS_MATY_MATY { get; set; }
        public virtual DbSet<HIS_MEDI_CONTRACT_MATY> HIS_MEDI_CONTRACT_MATY { get; set; }
        public virtual DbSet<HIS_MEDI_CONTRACT_METY> HIS_MEDI_CONTRACT_METY { get; set; }
        public virtual DbSet<HIS_MEDI_ORG> HIS_MEDI_ORG { get; set; }
        public virtual DbSet<HIS_MEDI_REACT> HIS_MEDI_REACT { get; set; }
        public virtual DbSet<HIS_MEDI_REACT_SUM> HIS_MEDI_REACT_SUM { get; set; }
        public virtual DbSet<HIS_MEDI_REACT_TYPE> HIS_MEDI_REACT_TYPE { get; set; }
        public virtual DbSet<HIS_MEDI_RECORD> HIS_MEDI_RECORD { get; set; }
        public virtual DbSet<HIS_MEDI_RECORD_BORROW> HIS_MEDI_RECORD_BORROW { get; set; }
        public virtual DbSet<HIS_MEDI_RECORD_TYPE> HIS_MEDI_RECORD_TYPE { get; set; }
        public virtual DbSet<HIS_MEDI_STOCK> HIS_MEDI_STOCK { get; set; }
        public virtual DbSet<HIS_MEDI_STOCK_BLTY> HIS_MEDI_STOCK_BLTY { get; set; }
        public virtual DbSet<HIS_MEDI_STOCK_EXTY> HIS_MEDI_STOCK_EXTY { get; set; }
        public virtual DbSet<HIS_MEDI_STOCK_IMTY> HIS_MEDI_STOCK_IMTY { get; set; }
        public virtual DbSet<HIS_MEDI_STOCK_MATY> HIS_MEDI_STOCK_MATY { get; set; }
        public virtual DbSet<HIS_MEDI_STOCK_METY> HIS_MEDI_STOCK_METY { get; set; }
        public virtual DbSet<HIS_MEDI_STOCK_PERIOD> HIS_MEDI_STOCK_PERIOD { get; set; }
        public virtual DbSet<HIS_MEDICAL_ASSESSMENT> HIS_MEDICAL_ASSESSMENT { get; set; }
        public virtual DbSet<HIS_MEDICAL_CONTRACT> HIS_MEDICAL_CONTRACT { get; set; }
        public virtual DbSet<HIS_MEDICINE> HIS_MEDICINE { get; set; }
        public virtual DbSet<HIS_MEDICINE_BEAN> HIS_MEDICINE_BEAN { get; set; }
        public virtual DbSet<HIS_MEDICINE_GROUP> HIS_MEDICINE_GROUP { get; set; }
        public virtual DbSet<HIS_MEDICINE_INTERACTIVE> HIS_MEDICINE_INTERACTIVE { get; set; }
        public virtual DbSet<HIS_MEDICINE_LINE> HIS_MEDICINE_LINE { get; set; }
        public virtual DbSet<HIS_MEDICINE_MATERIAL> HIS_MEDICINE_MATERIAL { get; set; }
        public virtual DbSet<HIS_MEDICINE_MEDICINE> HIS_MEDICINE_MEDICINE { get; set; }
        public virtual DbSet<HIS_MEDICINE_PATY> HIS_MEDICINE_PATY { get; set; }
        public virtual DbSet<HIS_MEDICINE_SERVICE> HIS_MEDICINE_SERVICE { get; set; }
        public virtual DbSet<HIS_MEDICINE_TYPE> HIS_MEDICINE_TYPE { get; set; }
        public virtual DbSet<HIS_MEDICINE_TYPE_ACIN> HIS_MEDICINE_TYPE_ACIN { get; set; }
        public virtual DbSet<HIS_MEDICINE_TYPE_ROOM> HIS_MEDICINE_TYPE_ROOM { get; set; }
        public virtual DbSet<HIS_MEDICINE_TYPE_TUT> HIS_MEDICINE_TYPE_TUT { get; set; }
        public virtual DbSet<HIS_MEDICINE_USE_FORM> HIS_MEDICINE_USE_FORM { get; set; }
        public virtual DbSet<HIS_MEMA_GROUP> HIS_MEMA_GROUP { get; set; }
        public virtual DbSet<HIS_MESSAGE> HIS_MESSAGE { get; set; }
        public virtual DbSet<HIS_MEST_INVE_USER> HIS_MEST_INVE_USER { get; set; }
        public virtual DbSet<HIS_MEST_INVENTORY> HIS_MEST_INVENTORY { get; set; }
        public virtual DbSet<HIS_MEST_MATY_DEPA> HIS_MEST_MATY_DEPA { get; set; }
        public virtual DbSet<HIS_MEST_METY_DEPA> HIS_MEST_METY_DEPA { get; set; }
        public virtual DbSet<HIS_MEST_METY_UNIT> HIS_MEST_METY_UNIT { get; set; }
        public virtual DbSet<HIS_MEST_PATIENT_TYPE> HIS_MEST_PATIENT_TYPE { get; set; }
        public virtual DbSet<HIS_MEST_PATY_SUB> HIS_MEST_PATY_SUB { get; set; }
        public virtual DbSet<HIS_MEST_PATY_TRTY> HIS_MEST_PATY_TRTY { get; set; }
        public virtual DbSet<HIS_MEST_PERIOD_BLOOD> HIS_MEST_PERIOD_BLOOD { get; set; }
        public virtual DbSet<HIS_MEST_PERIOD_BLTY> HIS_MEST_PERIOD_BLTY { get; set; }
        public virtual DbSet<HIS_MEST_PERIOD_MATE> HIS_MEST_PERIOD_MATE { get; set; }
        public virtual DbSet<HIS_MEST_PERIOD_MATY> HIS_MEST_PERIOD_MATY { get; set; }
        public virtual DbSet<HIS_MEST_PERIOD_MEDI> HIS_MEST_PERIOD_MEDI { get; set; }
        public virtual DbSet<HIS_MEST_PERIOD_METY> HIS_MEST_PERIOD_METY { get; set; }
        public virtual DbSet<HIS_MEST_ROOM> HIS_MEST_ROOM { get; set; }
        public virtual DbSet<HIS_METY_MATY> HIS_METY_MATY { get; set; }
        public virtual DbSet<HIS_METY_METY> HIS_METY_METY { get; set; }
        public virtual DbSet<HIS_METY_PRODUCT> HIS_METY_PRODUCT { get; set; }
        public virtual DbSet<HIS_MILITARY_RANK> HIS_MILITARY_RANK { get; set; }
        public virtual DbSet<HIS_MIXED_MEDICINE> HIS_MIXED_MEDICINE { get; set; }
        public virtual DbSet<HIS_MR_CHECK_ITEM> HIS_MR_CHECK_ITEM { get; set; }
        public virtual DbSet<HIS_MR_CHECK_ITEM_TYPE> HIS_MR_CHECK_ITEM_TYPE { get; set; }
        public virtual DbSet<HIS_MR_CHECK_SUMMARY> HIS_MR_CHECK_SUMMARY { get; set; }
        public virtual DbSet<HIS_MR_CHECKLIST> HIS_MR_CHECKLIST { get; set; }
        public virtual DbSet<HIS_NEXT_TREA_INTR> HIS_NEXT_TREA_INTR { get; set; }
        public virtual DbSet<HIS_NONE_MEDI_SERVICE> HIS_NONE_MEDI_SERVICE { get; set; }
        public virtual DbSet<HIS_NUM_ORDER_BLOCK> HIS_NUM_ORDER_BLOCK { get; set; }
        public virtual DbSet<HIS_NUM_ORDER_ISSUE> HIS_NUM_ORDER_ISSUE { get; set; }
        public virtual DbSet<HIS_OBEY_CONTRAINDI> HIS_OBEY_CONTRAINDI { get; set; }
        public virtual DbSet<HIS_ORDINAL> HIS_ORDINAL { get; set; }
        public virtual DbSet<HIS_ORDINAL_REUSE> HIS_ORDINAL_REUSE { get; set; }
        public virtual DbSet<HIS_OTHER_PAY_SOURCE> HIS_OTHER_PAY_SOURCE { get; set; }
        public virtual DbSet<HIS_OWE_TYPE> HIS_OWE_TYPE { get; set; }
        public virtual DbSet<HIS_PAAN_LIQUID> HIS_PAAN_LIQUID { get; set; }
        public virtual DbSet<HIS_PAAN_POSITION> HIS_PAAN_POSITION { get; set; }
        public virtual DbSet<HIS_PACKAGE> HIS_PACKAGE { get; set; }
        public virtual DbSet<HIS_PACKAGE_DETAIL> HIS_PACKAGE_DETAIL { get; set; }
        public virtual DbSet<HIS_PACKING_TYPE> HIS_PACKING_TYPE { get; set; }
        public virtual DbSet<HIS_PATIENT> HIS_PATIENT { get; set; }
        public virtual DbSet<HIS_PATIENT_CASE> HIS_PATIENT_CASE { get; set; }
        public virtual DbSet<HIS_PATIENT_CLASSIFY> HIS_PATIENT_CLASSIFY { get; set; }
        public virtual DbSet<HIS_PATIENT_OBSERVATION> HIS_PATIENT_OBSERVATION { get; set; }
        public virtual DbSet<HIS_PATIENT_PROGRAM> HIS_PATIENT_PROGRAM { get; set; }
        public virtual DbSet<HIS_PATIENT_TYPE> HIS_PATIENT_TYPE { get; set; }
        public virtual DbSet<HIS_PATIENT_TYPE_ALLOW> HIS_PATIENT_TYPE_ALLOW { get; set; }
        public virtual DbSet<HIS_PATIENT_TYPE_ALTER> HIS_PATIENT_TYPE_ALTER { get; set; }
        public virtual DbSet<HIS_PATIENT_TYPE_ROOM> HIS_PATIENT_TYPE_ROOM { get; set; }
        public virtual DbSet<HIS_PATIENT_TYPE_SUB> HIS_PATIENT_TYPE_SUB { get; set; }
        public virtual DbSet<HIS_PAY_FORM> HIS_PAY_FORM { get; set; }
        public virtual DbSet<HIS_PERIOD_DRIVER_DITY> HIS_PERIOD_DRIVER_DITY { get; set; }
        public virtual DbSet<HIS_PERMISSION> HIS_PERMISSION { get; set; }
        public virtual DbSet<HIS_PETROLEUM> HIS_PETROLEUM { get; set; }
        public virtual DbSet<HIS_POSITION> HIS_POSITION { get; set; }
        public virtual DbSet<HIS_PREPARE> HIS_PREPARE { get; set; }
        public virtual DbSet<HIS_PREPARE_MATY> HIS_PREPARE_MATY { get; set; }
        public virtual DbSet<HIS_PREPARE_METY> HIS_PREPARE_METY { get; set; }
        public virtual DbSet<HIS_PRIORITY_TYPE> HIS_PRIORITY_TYPE { get; set; }
        public virtual DbSet<HIS_PROCESSING_METHOD> HIS_PROCESSING_METHOD { get; set; }
        public virtual DbSet<HIS_PROGRAM> HIS_PROGRAM { get; set; }
        public virtual DbSet<HIS_PTTT_APPROVAL_STT> HIS_PTTT_APPROVAL_STT { get; set; }
        public virtual DbSet<HIS_PTTT_CALENDAR> HIS_PTTT_CALENDAR { get; set; }
        public virtual DbSet<HIS_PTTT_CATASTROPHE> HIS_PTTT_CATASTROPHE { get; set; }
        public virtual DbSet<HIS_PTTT_CONDITION> HIS_PTTT_CONDITION { get; set; }
        public virtual DbSet<HIS_PTTT_GROUP> HIS_PTTT_GROUP { get; set; }
        public virtual DbSet<HIS_PTTT_GROUP_BEST> HIS_PTTT_GROUP_BEST { get; set; }
        public virtual DbSet<HIS_PTTT_HIGH_TECH> HIS_PTTT_HIGH_TECH { get; set; }
        public virtual DbSet<HIS_PTTT_METHOD> HIS_PTTT_METHOD { get; set; }
        public virtual DbSet<HIS_PTTT_PRIORITY> HIS_PTTT_PRIORITY { get; set; }
        public virtual DbSet<HIS_PTTT_TABLE> HIS_PTTT_TABLE { get; set; }
        public virtual DbSet<HIS_QC_NORMATION> HIS_QC_NORMATION { get; set; }
        public virtual DbSet<HIS_QC_TYPE> HIS_QC_TYPE { get; set; }
        public virtual DbSet<HIS_RATION_GROUP> HIS_RATION_GROUP { get; set; }
        public virtual DbSet<HIS_RATION_SCHEDULE> HIS_RATION_SCHEDULE { get; set; }
        public virtual DbSet<HIS_RATION_SUM> HIS_RATION_SUM { get; set; }
        public virtual DbSet<HIS_RATION_SUM_STT> HIS_RATION_SUM_STT { get; set; }
        public virtual DbSet<HIS_RATION_TIME> HIS_RATION_TIME { get; set; }
        public virtual DbSet<HIS_RECEPTION_ROOM> HIS_RECEPTION_ROOM { get; set; }
        public virtual DbSet<HIS_REFECTORY> HIS_REFECTORY { get; set; }
        public virtual DbSet<HIS_REGIMEN_HIV> HIS_REGIMEN_HIV { get; set; }
        public virtual DbSet<HIS_REGISTER_GATE> HIS_REGISTER_GATE { get; set; }
        public virtual DbSet<HIS_REGISTER_REQ> HIS_REGISTER_REQ { get; set; }
        public virtual DbSet<HIS_REHA_SUM> HIS_REHA_SUM { get; set; }
        public virtual DbSet<HIS_REHA_TRAIN> HIS_REHA_TRAIN { get; set; }
        public virtual DbSet<HIS_REHA_TRAIN_TYPE> HIS_REHA_TRAIN_TYPE { get; set; }
        public virtual DbSet<HIS_REHA_TRAIN_UNIT> HIS_REHA_TRAIN_UNIT { get; set; }
        public virtual DbSet<HIS_REJECT_ALERT> HIS_REJECT_ALERT { get; set; }
        public virtual DbSet<HIS_REMUNERATION> HIS_REMUNERATION { get; set; }
        public virtual DbSet<HIS_REPAY_REASON> HIS_REPAY_REASON { get; set; }
        public virtual DbSet<HIS_REPORT_TYPE_CAT> HIS_REPORT_TYPE_CAT { get; set; }
        public virtual DbSet<HIS_REST_RETR_TYPE> HIS_REST_RETR_TYPE { get; set; }
        public virtual DbSet<HIS_ROOM> HIS_ROOM { get; set; }
        public virtual DbSet<HIS_ROOM_GROUP> HIS_ROOM_GROUP { get; set; }
        public virtual DbSet<HIS_ROOM_SARO> HIS_ROOM_SARO { get; set; }
        public virtual DbSet<HIS_ROOM_TIME> HIS_ROOM_TIME { get; set; }
        public virtual DbSet<HIS_ROOM_TYPE> HIS_ROOM_TYPE { get; set; }
        public virtual DbSet<HIS_ROOM_TYPE_MODULE> HIS_ROOM_TYPE_MODULE { get; set; }
        public virtual DbSet<HIS_SALE> HIS_SALE { get; set; }
        public virtual DbSet<HIS_SALE_PROFIT_CFG> HIS_SALE_PROFIT_CFG { get; set; }
        public virtual DbSet<HIS_SAMPLE_ROOM> HIS_SAMPLE_ROOM { get; set; }
        public virtual DbSet<HIS_SARO_EXRO> HIS_SARO_EXRO { get; set; }
        public virtual DbSet<HIS_SERE_CHANGE_DEBT> HIS_SERE_CHANGE_DEBT { get; set; }
        public virtual DbSet<HIS_SERE_IS_WAIT_CHILD> HIS_SERE_IS_WAIT_CHILD { get; set; }
        public virtual DbSet<HIS_SERE_SERV> HIS_SERE_SERV { get; set; }
        public virtual DbSet<HIS_SERE_SERV_BILL> HIS_SERE_SERV_BILL { get; set; }
        public virtual DbSet<HIS_SERE_SERV_DEBT> HIS_SERE_SERV_DEBT { get; set; }
        public virtual DbSet<HIS_SERE_SERV_DEPOSIT> HIS_SERE_SERV_DEPOSIT { get; set; }
        public virtual DbSet<HIS_SERE_SERV_EXT> HIS_SERE_SERV_EXT { get; set; }
        public virtual DbSet<HIS_SERE_SERV_FILE> HIS_SERE_SERV_FILE { get; set; }
        public virtual DbSet<HIS_SERE_SERV_MATY> HIS_SERE_SERV_MATY { get; set; }
        public virtual DbSet<HIS_SERE_SERV_PTTT> HIS_SERE_SERV_PTTT { get; set; }
        public virtual DbSet<HIS_SERE_SERV_PTTT_TEMP> HIS_SERE_SERV_PTTT_TEMP { get; set; }
        public virtual DbSet<HIS_SERE_SERV_RATION> HIS_SERE_SERV_RATION { get; set; }
        public virtual DbSet<HIS_SERE_SERV_REHA> HIS_SERE_SERV_REHA { get; set; }
        public virtual DbSet<HIS_SERE_SERV_SUIN> HIS_SERE_SERV_SUIN { get; set; }
        public virtual DbSet<HIS_SERE_SERV_TEIN> HIS_SERE_SERV_TEIN { get; set; }
        public virtual DbSet<HIS_SERE_SERV_TEMP> HIS_SERE_SERV_TEMP { get; set; }
        public virtual DbSet<HIS_SERV_SEGR> HIS_SERV_SEGR { get; set; }
        public virtual DbSet<HIS_SERVICE> HIS_SERVICE { get; set; }
        public virtual DbSet<HIS_SERVICE_CHANGE_REQ> HIS_SERVICE_CHANGE_REQ { get; set; }
        public virtual DbSet<HIS_SERVICE_CONDITION> HIS_SERVICE_CONDITION { get; set; }
        public virtual DbSet<HIS_SERVICE_FOLLOW> HIS_SERVICE_FOLLOW { get; set; }
        public virtual DbSet<HIS_SERVICE_GROUP> HIS_SERVICE_GROUP { get; set; }
        public virtual DbSet<HIS_SERVICE_HEIN> HIS_SERVICE_HEIN { get; set; }
        public virtual DbSet<HIS_SERVICE_MACHINE> HIS_SERVICE_MACHINE { get; set; }
        public virtual DbSet<HIS_SERVICE_MATY> HIS_SERVICE_MATY { get; set; }
        public virtual DbSet<HIS_SERVICE_METY> HIS_SERVICE_METY { get; set; }
        public virtual DbSet<HIS_SERVICE_NUM_ORDER> HIS_SERVICE_NUM_ORDER { get; set; }
        public virtual DbSet<HIS_SERVICE_PACKAGE> HIS_SERVICE_PACKAGE { get; set; }
        public virtual DbSet<HIS_SERVICE_PATY> HIS_SERVICE_PATY { get; set; }
        public virtual DbSet<HIS_SERVICE_RATI> HIS_SERVICE_RATI { get; set; }
        public virtual DbSet<HIS_SERVICE_REQ> HIS_SERVICE_REQ { get; set; }
        public virtual DbSet<HIS_SERVICE_REQ_MATY> HIS_SERVICE_REQ_MATY { get; set; }
        public virtual DbSet<HIS_SERVICE_REQ_METY> HIS_SERVICE_REQ_METY { get; set; }
        public virtual DbSet<HIS_SERVICE_REQ_STT> HIS_SERVICE_REQ_STT { get; set; }
        public virtual DbSet<HIS_SERVICE_REQ_TYPE> HIS_SERVICE_REQ_TYPE { get; set; }
        public virtual DbSet<HIS_SERVICE_RERE_TIME> HIS_SERVICE_RERE_TIME { get; set; }
        public virtual DbSet<HIS_SERVICE_RETY_CAT> HIS_SERVICE_RETY_CAT { get; set; }
        public virtual DbSet<HIS_SERVICE_ROOM> HIS_SERVICE_ROOM { get; set; }
        public virtual DbSet<HIS_SERVICE_SAME> HIS_SERVICE_SAME { get; set; }
        public virtual DbSet<HIS_SERVICE_TYPE> HIS_SERVICE_TYPE { get; set; }
        public virtual DbSet<HIS_SERVICE_UNIT> HIS_SERVICE_UNIT { get; set; }
        public virtual DbSet<HIS_SESE_DEPO_REPAY> HIS_SESE_DEPO_REPAY { get; set; }
        public virtual DbSet<HIS_SESE_PTTT_METHOD> HIS_SESE_PTTT_METHOD { get; set; }
        public virtual DbSet<HIS_SESE_TRANS_REQ> HIS_SESE_TRANS_REQ { get; set; }
        public virtual DbSet<HIS_SEVERE_ILLNESS_INFO> HIS_SEVERE_ILLNESS_INFO { get; set; }
        public virtual DbSet<HIS_SKIN_SURGERY_DESC> HIS_SKIN_SURGERY_DESC { get; set; }
        public virtual DbSet<HIS_SOURCE_MEDICINE> HIS_SOURCE_MEDICINE { get; set; }
        public virtual DbSet<HIS_SPECIALITY> HIS_SPECIALITY { get; set; }
        public virtual DbSet<HIS_SPEED_UNIT> HIS_SPEED_UNIT { get; set; }
        public virtual DbSet<HIS_STATION> HIS_STATION { get; set; }
        public virtual DbSet<HIS_STENT_CONCLUDE> HIS_STENT_CONCLUDE { get; set; }
        public virtual DbSet<HIS_STORAGE_CONDITION> HIS_STORAGE_CONDITION { get; set; }
        public virtual DbSet<HIS_SUBCLINICAL_RS_ADD> HIS_SUBCLINICAL_RS_ADD { get; set; }
        public virtual DbSet<HIS_SUIM_INDEX> HIS_SUIM_INDEX { get; set; }
        public virtual DbSet<HIS_SUIM_INDEX_UNIT> HIS_SUIM_INDEX_UNIT { get; set; }
        public virtual DbSet<HIS_SUIM_SETY_SUIN> HIS_SUIM_SETY_SUIN { get; set; }
        public virtual DbSet<HIS_SUPPLIER> HIS_SUPPLIER { get; set; }
        public virtual DbSet<HIS_SURG_REMU_DETAIL> HIS_SURG_REMU_DETAIL { get; set; }
        public virtual DbSet<HIS_SURG_REMUNERATION> HIS_SURG_REMUNERATION { get; set; }
        public virtual DbSet<HIS_TEST_INDEX> HIS_TEST_INDEX { get; set; }
        public virtual DbSet<HIS_TEST_INDEX_GROUP> HIS_TEST_INDEX_GROUP { get; set; }
        public virtual DbSet<HIS_TEST_INDEX_RANGE> HIS_TEST_INDEX_RANGE { get; set; }
        public virtual DbSet<HIS_TEST_INDEX_UNIT> HIS_TEST_INDEX_UNIT { get; set; }
        public virtual DbSet<HIS_TEST_SAMPLE_TYPE> HIS_TEST_SAMPLE_TYPE { get; set; }
        public virtual DbSet<HIS_TEST_TYPE> HIS_TEST_TYPE { get; set; }
        public virtual DbSet<HIS_TEXT_LIB> HIS_TEXT_LIB { get; set; }
        public virtual DbSet<HIS_TRACKING> HIS_TRACKING { get; set; }
        public virtual DbSet<HIS_TRACKING_TEMP> HIS_TRACKING_TEMP { get; set; }
        public virtual DbSet<HIS_TRAN_PATI_FORM> HIS_TRAN_PATI_FORM { get; set; }
        public virtual DbSet<HIS_TRAN_PATI_REASON> HIS_TRAN_PATI_REASON { get; set; }
        public virtual DbSet<HIS_TRAN_PATI_TECH> HIS_TRAN_PATI_TECH { get; set; }
        public virtual DbSet<HIS_TRAN_PATI_TEMP> HIS_TRAN_PATI_TEMP { get; set; }
        public virtual DbSet<HIS_TRANS_REQ> HIS_TRANS_REQ { get; set; }
        public virtual DbSet<HIS_TRANSACTION> HIS_TRANSACTION { get; set; }
        public virtual DbSet<HIS_TRANSACTION_EXP> HIS_TRANSACTION_EXP { get; set; }
        public virtual DbSet<HIS_TRANSACTION_TYPE> HIS_TRANSACTION_TYPE { get; set; }
        public virtual DbSet<HIS_TRANSFUSION> HIS_TRANSFUSION { get; set; }
        public virtual DbSet<HIS_TRANSFUSION_SUM> HIS_TRANSFUSION_SUM { get; set; }
        public virtual DbSet<HIS_TREATMENT> HIS_TREATMENT { get; set; }
        public virtual DbSet<HIS_TREATMENT_BED_ROOM> HIS_TREATMENT_BED_ROOM { get; set; }
        public virtual DbSet<HIS_TREATMENT_BORROW> HIS_TREATMENT_BORROW { get; set; }
        public virtual DbSet<HIS_TREATMENT_END_TYPE> HIS_TREATMENT_END_TYPE { get; set; }
        public virtual DbSet<HIS_TREATMENT_END_TYPE_EXT> HIS_TREATMENT_END_TYPE_EXT { get; set; }
        public virtual DbSet<HIS_TREATMENT_FILE> HIS_TREATMENT_FILE { get; set; }
        public virtual DbSet<HIS_TREATMENT_LOG_TYPE> HIS_TREATMENT_LOG_TYPE { get; set; }
        public virtual DbSet<HIS_TREATMENT_LOGGING> HIS_TREATMENT_LOGGING { get; set; }
        public virtual DbSet<HIS_TREATMENT_RESULT> HIS_TREATMENT_RESULT { get; set; }
        public virtual DbSet<HIS_TREATMENT_ROOM> HIS_TREATMENT_ROOM { get; set; }
        public virtual DbSet<HIS_TREATMENT_STT> HIS_TREATMENT_STT { get; set; }
        public virtual DbSet<HIS_TREATMENT_TYPE> HIS_TREATMENT_TYPE { get; set; }
        public virtual DbSet<HIS_TREATMENT_UNLIMIT> HIS_TREATMENT_UNLIMIT { get; set; }
        public virtual DbSet<HIS_UNLIMIT_REASON> HIS_UNLIMIT_REASON { get; set; }
        public virtual DbSet<HIS_UNLIMIT_TYPE> HIS_UNLIMIT_TYPE { get; set; }
        public virtual DbSet<HIS_USER_ACCOUNT_BOOK> HIS_USER_ACCOUNT_BOOK { get; set; }
        public virtual DbSet<HIS_USER_GROUP_TEMP> HIS_USER_GROUP_TEMP { get; set; }
        public virtual DbSet<HIS_USER_GROUP_TEMP_DT> HIS_USER_GROUP_TEMP_DT { get; set; }
        public virtual DbSet<HIS_USER_INVOICE_BOOK> HIS_USER_INVOICE_BOOK { get; set; }
        public virtual DbSet<HIS_USER_ROOM> HIS_USER_ROOM { get; set; }
        public virtual DbSet<HIS_VACC_APPOINTMENT> HIS_VACC_APPOINTMENT { get; set; }
        public virtual DbSet<HIS_VACC_EXAM_RESULT> HIS_VACC_EXAM_RESULT { get; set; }
        public virtual DbSet<HIS_VACC_HEALTH_STT> HIS_VACC_HEALTH_STT { get; set; }
        public virtual DbSet<HIS_VACC_REACT_PLACE> HIS_VACC_REACT_PLACE { get; set; }
        public virtual DbSet<HIS_VACC_REACT_TYPE> HIS_VACC_REACT_TYPE { get; set; }
        public virtual DbSet<HIS_VACCINATION> HIS_VACCINATION { get; set; }
        public virtual DbSet<HIS_VACCINATION_EXAM> HIS_VACCINATION_EXAM { get; set; }
        public virtual DbSet<HIS_VACCINATION_REACT> HIS_VACCINATION_REACT { get; set; }
        public virtual DbSet<HIS_VACCINATION_RESULT> HIS_VACCINATION_RESULT { get; set; }
        public virtual DbSet<HIS_VACCINATION_STT> HIS_VACCINATION_STT { get; set; }
        public virtual DbSet<HIS_VACCINATION_VRPL> HIS_VACCINATION_VRPL { get; set; }
        public virtual DbSet<HIS_VACCINATION_VRTY> HIS_VACCINATION_VRTY { get; set; }
        public virtual DbSet<HIS_VACCINE_TYPE> HIS_VACCINE_TYPE { get; set; }
        public virtual DbSet<HIS_VAEX_VAER> HIS_VAEX_VAER { get; set; }
        public virtual DbSet<HIS_VARE_VART> HIS_VARE_VART { get; set; }
        public virtual DbSet<HIS_VITAMIN_A> HIS_VITAMIN_A { get; set; }
        public virtual DbSet<HIS_WARNING_FEE_CFG> HIS_WARNING_FEE_CFG { get; set; }
        public virtual DbSet<HIS_WELFARE_TYPE> HIS_WELFARE_TYPE { get; set; }
        public virtual DbSet<HIS_WORK_PLACE> HIS_WORK_PLACE { get; set; }
        public virtual DbSet<HIS_WORKING_SHIFT> HIS_WORKING_SHIFT { get; set; }
        public virtual DbSet<HTC_EXPENSE> HTC_EXPENSE { get; set; }
        public virtual DbSet<HTC_EXPENSE_TYPE> HTC_EXPENSE_TYPE { get; set; }
        public virtual DbSet<HTC_PERIOD> HTC_PERIOD { get; set; }
        public virtual DbSet<HTC_PERIOD_DEPARTMENT> HTC_PERIOD_DEPARTMENT { get; set; }
        public virtual DbSet<HTC_REPARTITION_RATIO> HTC_REPARTITION_RATIO { get; set; }
        public virtual DbSet<HTC_REPARTITION_TYPE> HTC_REPARTITION_TYPE { get; set; }
        public virtual DbSet<HTC_REVENUE> HTC_REVENUE { get; set; }
        public virtual DbSet<L_HIS_EXP_MEST_MATERIAL> L_HIS_EXP_MEST_MATERIAL { get; set; }
        public virtual DbSet<L_HIS_EXP_MEST_MATERIAL_2> L_HIS_EXP_MEST_MATERIAL_2 { get; set; }
        public virtual DbSet<L_HIS_EXP_MEST_MATY_REQ> L_HIS_EXP_MEST_MATY_REQ { get; set; }
        public virtual DbSet<L_HIS_EXP_MEST_MEDICINE> L_HIS_EXP_MEST_MEDICINE { get; set; }
        public virtual DbSet<L_HIS_EXP_MEST_MEDICINE_1> L_HIS_EXP_MEST_MEDICINE_1 { get; set; }
        public virtual DbSet<L_HIS_EXP_MEST_MEDICINE_2> L_HIS_EXP_MEST_MEDICINE_2 { get; set; }
        public virtual DbSet<L_HIS_EXP_MEST_METY_REQ> L_HIS_EXP_MEST_METY_REQ { get; set; }
        public virtual DbSet<L_HIS_MATERIAL_BEAN> L_HIS_MATERIAL_BEAN { get; set; }
        public virtual DbSet<L_HIS_MEDICINE_BEAN> L_HIS_MEDICINE_BEAN { get; set; }
        public virtual DbSet<L_HIS_ROOM_COUNTER> L_HIS_ROOM_COUNTER { get; set; }
        public virtual DbSet<L_HIS_ROOM_COUNTER_1> L_HIS_ROOM_COUNTER_1 { get; set; }
        public virtual DbSet<L_HIS_SERVICE_REQ> L_HIS_SERVICE_REQ { get; set; }
        public virtual DbSet<L_HIS_SERVICE_REQ_1> L_HIS_SERVICE_REQ_1 { get; set; }
        public virtual DbSet<L_HIS_TREATMENT> L_HIS_TREATMENT { get; set; }
        public virtual DbSet<L_HIS_TREATMENT_1> L_HIS_TREATMENT_1 { get; set; }
        public virtual DbSet<L_HIS_TREATMENT_2> L_HIS_TREATMENT_2 { get; set; }
        public virtual DbSet<L_HIS_TREATMENT_3> L_HIS_TREATMENT_3 { get; set; }
        public virtual DbSet<L_HIS_TREATMENT_BED_ROOM> L_HIS_TREATMENT_BED_ROOM { get; set; }
        public virtual DbSet<LIS_ANTIBIOTIC> LIS_ANTIBIOTIC { get; set; }
        public virtual DbSet<LIS_BAC_ANTIBIOTIC> LIS_BAC_ANTIBIOTIC { get; set; }
        public virtual DbSet<LIS_BACTERIUM> LIS_BACTERIUM { get; set; }
        public virtual DbSet<LIS_BACTERIUM_FAMILY> LIS_BACTERIUM_FAMILY { get; set; }
        public virtual DbSet<LIS_BARCODE> LIS_BARCODE { get; set; }
        public virtual DbSet<LIS_CONFIG> LIS_CONFIG { get; set; }
        public virtual DbSet<LIS_MACHINE> LIS_MACHINE { get; set; }
        public virtual DbSet<LIS_MACHINE_INDEX> LIS_MACHINE_INDEX { get; set; }
        public virtual DbSet<LIS_ORDINAL> LIS_ORDINAL { get; set; }
        public virtual DbSet<LIS_RESULT> LIS_RESULT { get; set; }
        public virtual DbSet<LIS_SAMPLE> LIS_SAMPLE { get; set; }
        public virtual DbSet<LIS_SAMPLE_CONDITION> LIS_SAMPLE_CONDITION { get; set; }
        public virtual DbSet<LIS_SAMPLE_SERVICE> LIS_SAMPLE_SERVICE { get; set; }
        public virtual DbSet<LIS_SAMPLE_SERVICE_STT> LIS_SAMPLE_SERVICE_STT { get; set; }
        public virtual DbSet<LIS_SAMPLE_STT> LIS_SAMPLE_STT { get; set; }
        public virtual DbSet<LIS_SAMPLE_TYPE> LIS_SAMPLE_TYPE { get; set; }
        public virtual DbSet<LIS_TEST_INDEX_MAP> LIS_TEST_INDEX_MAP { get; set; }
        public virtual DbSet<SAR_FORM> SAR_FORM { get; set; }
        public virtual DbSet<SAR_FORM_DATA> SAR_FORM_DATA { get; set; }
        public virtual DbSet<SAR_FORM_FIELD> SAR_FORM_FIELD { get; set; }
        public virtual DbSet<SAR_FORM_TYPE> SAR_FORM_TYPE { get; set; }
        public virtual DbSet<SAR_PRINT> SAR_PRINT { get; set; }
        public virtual DbSet<SAR_PRINT_LOG> SAR_PRINT_LOG { get; set; }
        public virtual DbSet<SAR_PRINT_TYPE> SAR_PRINT_TYPE { get; set; }
        public virtual DbSet<SAR_PRINT_TYPE_CFG> SAR_PRINT_TYPE_CFG { get; set; }
        public virtual DbSet<SAR_REPORT> SAR_REPORT { get; set; }
        public virtual DbSet<SAR_REPORT_CALENDAR> SAR_REPORT_CALENDAR { get; set; }
        public virtual DbSet<SAR_REPORT_STT> SAR_REPORT_STT { get; set; }
        public virtual DbSet<SAR_REPORT_TEMPLATE> SAR_REPORT_TEMPLATE { get; set; }
        public virtual DbSet<SAR_REPORT_TYPE> SAR_REPORT_TYPE { get; set; }
        public virtual DbSet<SAR_REPORT_TYPE_GROUP> SAR_REPORT_TYPE_GROUP { get; set; }
        public virtual DbSet<SAR_RETY_FOFI> SAR_RETY_FOFI { get; set; }
        public virtual DbSet<SAR_USER_REPORT_TYPE> SAR_USER_REPORT_TYPE { get; set; }
        public virtual DbSet<SDA_COMMUNE> SDA_COMMUNE { get; set; }
        public virtual DbSet<SDA_COMMUNE_MAP> SDA_COMMUNE_MAP { get; set; }
        public virtual DbSet<SDA_CONFIG> SDA_CONFIG { get; set; }
        public virtual DbSet<SDA_CONFIG_APP> SDA_CONFIG_APP { get; set; }
        public virtual DbSet<SDA_CONFIG_APP_USER> SDA_CONFIG_APP_USER { get; set; }
        public virtual DbSet<SDA_CUSTOMIZE_BUTTON> SDA_CUSTOMIZE_BUTTON { get; set; }
        public virtual DbSet<SDA_CUSTOMIZE_UI> SDA_CUSTOMIZE_UI { get; set; }
        public virtual DbSet<SDA_DELETE_DATA> SDA_DELETE_DATA { get; set; }
        public virtual DbSet<SDA_DISTRICT> SDA_DISTRICT { get; set; }
        public virtual DbSet<SDA_DISTRICT_MAP> SDA_DISTRICT_MAP { get; set; }
        public virtual DbSet<SDA_ETHNIC> SDA_ETHNIC { get; set; }
        public virtual DbSet<SDA_EVENT_LOG> SDA_EVENT_LOG { get; set; }
        public virtual DbSet<SDA_GROUP> SDA_GROUP { get; set; }
        public virtual DbSet<SDA_GROUP_TYPE> SDA_GROUP_TYPE { get; set; }
        public virtual DbSet<SDA_HIDE_CONTROL> SDA_HIDE_CONTROL { get; set; }
        public virtual DbSet<SDA_LANGUAGE> SDA_LANGUAGE { get; set; }
        public virtual DbSet<SDA_LICENSE> SDA_LICENSE { get; set; }
        public virtual DbSet<SDA_METADATA> SDA_METADATA { get; set; }
        public virtual DbSet<SDA_MODULE_FIELD> SDA_MODULE_FIELD { get; set; }
        public virtual DbSet<SDA_NATIONAL> SDA_NATIONAL { get; set; }
        public virtual DbSet<SDA_NOTIFY> SDA_NOTIFY { get; set; }
        public virtual DbSet<SDA_PROVINCE> SDA_PROVINCE { get; set; }
        public virtual DbSet<SDA_PROVINCE_MAP> SDA_PROVINCE_MAP { get; set; }
        public virtual DbSet<SDA_RELIGION> SDA_RELIGION { get; set; }
        public virtual DbSet<SDA_SQL> SDA_SQL { get; set; }
        public virtual DbSet<SDA_SQL_PARAM> SDA_SQL_PARAM { get; set; }
        public virtual DbSet<SDA_TRANSLATE> SDA_TRANSLATE { get; set; }
        public virtual DbSet<SDA_TROUBLE> SDA_TROUBLE { get; set; }
        public virtual DbSet<TYT_DEATH> TYT_DEATH { get; set; }
        public virtual DbSet<TYT_FETUS_ABORTION> TYT_FETUS_ABORTION { get; set; }
        public virtual DbSet<TYT_FETUS_BORN> TYT_FETUS_BORN { get; set; }
        public virtual DbSet<TYT_FETUS_EXAM> TYT_FETUS_EXAM { get; set; }
        public virtual DbSet<TYT_GDSK> TYT_GDSK { get; set; }
        public virtual DbSet<TYT_HIV> TYT_HIV { get; set; }
        public virtual DbSet<TYT_KHH> TYT_KHH { get; set; }
        public virtual DbSet<TYT_MALARIA> TYT_MALARIA { get; set; }
        public virtual DbSet<TYT_NERVES> TYT_NERVES { get; set; }
        public virtual DbSet<TYT_TUBERCULOSIS> TYT_TUBERCULOSIS { get; set; }
        public virtual DbSet<TYT_UNINFECT> TYT_UNINFECT { get; set; }
        public virtual DbSet<TYT_UNINFECT_ICD> TYT_UNINFECT_ICD { get; set; }
        public virtual DbSet<TYT_UNINFECT_ICD_GROUP> TYT_UNINFECT_ICD_GROUP { get; set; }
        public virtual DbSet<V_ACS_APPLICATION_ROLE> V_ACS_APPLICATION_ROLE { get; set; }
        public virtual DbSet<V_ACS_CONTROL> V_ACS_CONTROL { get; set; }
        public virtual DbSet<V_ACS_CONTROL_ROLE> V_ACS_CONTROL_ROLE { get; set; }
        public virtual DbSet<V_ACS_MODULE> V_ACS_MODULE { get; set; }
        public virtual DbSet<V_ACS_MODULE_ROLE> V_ACS_MODULE_ROLE { get; set; }
        public virtual DbSet<V_ACS_ROLE_BASE> V_ACS_ROLE_BASE { get; set; }
        public virtual DbSet<V_ACS_ROLE_USER> V_ACS_ROLE_USER { get; set; }
        public virtual DbSet<V_HIS_ACCIDENT_HURT> V_HIS_ACCIDENT_HURT { get; set; }
        public virtual DbSet<V_HIS_ACCOUNT_BOOK> V_HIS_ACCOUNT_BOOK { get; set; }
        public virtual DbSet<V_HIS_ACIN_INTERACTIVE> V_HIS_ACIN_INTERACTIVE { get; set; }
        public virtual DbSet<V_HIS_ADR> V_HIS_ADR { get; set; }
        public virtual DbSet<V_HIS_ADR_MEDICINE_TYPE> V_HIS_ADR_MEDICINE_TYPE { get; set; }
        public virtual DbSet<V_HIS_ALLERGENIC> V_HIS_ALLERGENIC { get; set; }
        public virtual DbSet<V_HIS_ALLERGY_CARD> V_HIS_ALLERGY_CARD { get; set; }
        public virtual DbSet<V_HIS_ANTIBIOTIC_NEW_REG> V_HIS_ANTIBIOTIC_NEW_REG { get; set; }
        public virtual DbSet<V_HIS_ANTIBIOTIC_REQUEST> V_HIS_ANTIBIOTIC_REQUEST { get; set; }
        public virtual DbSet<V_HIS_ANTICIPATE> V_HIS_ANTICIPATE { get; set; }
        public virtual DbSet<V_HIS_ANTICIPATE_BLTY> V_HIS_ANTICIPATE_BLTY { get; set; }
        public virtual DbSet<V_HIS_ANTICIPATE_MATY> V_HIS_ANTICIPATE_MATY { get; set; }
        public virtual DbSet<V_HIS_ANTICIPATE_METY> V_HIS_ANTICIPATE_METY { get; set; }
        public virtual DbSet<V_HIS_ANTIGEN_METY> V_HIS_ANTIGEN_METY { get; set; }
        public virtual DbSet<V_HIS_APPOINTMENT_PERIOD> V_HIS_APPOINTMENT_PERIOD { get; set; }
        public virtual DbSet<V_HIS_APPOINTMENT_SERV> V_HIS_APPOINTMENT_SERV { get; set; }
        public virtual DbSet<V_HIS_BABY> V_HIS_BABY { get; set; }
        public virtual DbSet<V_HIS_BED> V_HIS_BED { get; set; }
        public virtual DbSet<V_HIS_BED_BSTY> V_HIS_BED_BSTY { get; set; }
        public virtual DbSet<V_HIS_BED_LOG> V_HIS_BED_LOG { get; set; }
        public virtual DbSet<V_HIS_BED_LOG_1> V_HIS_BED_LOG_1 { get; set; }
        public virtual DbSet<V_HIS_BED_LOG_2> V_HIS_BED_LOG_2 { get; set; }
        public virtual DbSet<V_HIS_BED_LOG_3> V_HIS_BED_LOG_3 { get; set; }
        public virtual DbSet<V_HIS_BED_LOG_4> V_HIS_BED_LOG_4 { get; set; }
        public virtual DbSet<V_HIS_BED_ROOM> V_HIS_BED_ROOM { get; set; }
        public virtual DbSet<V_HIS_BED_ROOM_1> V_HIS_BED_ROOM_1 { get; set; }
        public virtual DbSet<V_HIS_BHYT_WHITELIST> V_HIS_BHYT_WHITELIST { get; set; }
        public virtual DbSet<V_HIS_BID> V_HIS_BID { get; set; }
        public virtual DbSet<V_HIS_BID_1> V_HIS_BID_1 { get; set; }
        public virtual DbSet<V_HIS_BID_BLOOD_TYPE> V_HIS_BID_BLOOD_TYPE { get; set; }
        public virtual DbSet<V_HIS_BID_MATERIAL_TYPE> V_HIS_BID_MATERIAL_TYPE { get; set; }
        public virtual DbSet<V_HIS_BID_MEDICINE_TYPE> V_HIS_BID_MEDICINE_TYPE { get; set; }
        public virtual DbSet<V_HIS_BILL_FUND> V_HIS_BILL_FUND { get; set; }
        public virtual DbSet<V_HIS_BIRTH_CERT_BOOK> V_HIS_BIRTH_CERT_BOOK { get; set; }
        public virtual DbSet<V_HIS_BLOOD> V_HIS_BLOOD { get; set; }
        public virtual DbSet<V_HIS_BLOOD_TYPE> V_HIS_BLOOD_TYPE { get; set; }
        public virtual DbSet<V_HIS_BLOOD_TYPE_1> V_HIS_BLOOD_TYPE_1 { get; set; }
        public virtual DbSet<V_HIS_BLTY_SERVICE> V_HIS_BLTY_SERVICE { get; set; }
        public virtual DbSet<V_HIS_BRANCH_TIME> V_HIS_BRANCH_TIME { get; set; }
        public virtual DbSet<V_HIS_CARD> V_HIS_CARD { get; set; }
        public virtual DbSet<V_HIS_CARE_DETAIL> V_HIS_CARE_DETAIL { get; set; }
        public virtual DbSet<V_HIS_CARER_CARD> V_HIS_CARER_CARD { get; set; }
        public virtual DbSet<V_HIS_CARER_CARD_BORROW> V_HIS_CARER_CARD_BORROW { get; set; }
        public virtual DbSet<V_HIS_CARO_ACCOUNT_BOOK> V_HIS_CARO_ACCOUNT_BOOK { get; set; }
        public virtual DbSet<V_HIS_CASHIER_ADD_CONFIG> V_HIS_CASHIER_ADD_CONFIG { get; set; }
        public virtual DbSet<V_HIS_CASHIER_ROOM> V_HIS_CASHIER_ROOM { get; set; }
        public virtual DbSet<V_HIS_CO_TREATMENT> V_HIS_CO_TREATMENT { get; set; }
        public virtual DbSet<V_HIS_CONFIG> V_HIS_CONFIG { get; set; }
        public virtual DbSet<V_HIS_CONTACT_POINT> V_HIS_CONTACT_POINT { get; set; }
        public virtual DbSet<V_HIS_DATA_STORE> V_HIS_DATA_STORE { get; set; }
        public virtual DbSet<V_HIS_DATA_STORE_1> V_HIS_DATA_STORE_1 { get; set; }
        public virtual DbSet<V_HIS_DEATH_CERT_BOOK> V_HIS_DEATH_CERT_BOOK { get; set; }
        public virtual DbSet<V_HIS_DEBATE> V_HIS_DEBATE { get; set; }
        public virtual DbSet<V_HIS_DEBATE_EKIP_USER> V_HIS_DEBATE_EKIP_USER { get; set; }
        public virtual DbSet<V_HIS_DEBATE_USER> V_HIS_DEBATE_USER { get; set; }
        public virtual DbSet<V_HIS_DEPARTMENT> V_HIS_DEPARTMENT { get; set; }
        public virtual DbSet<V_HIS_DEPARTMENT_1> V_HIS_DEPARTMENT_1 { get; set; }
        public virtual DbSet<V_HIS_DEPARTMENT_TRAN> V_HIS_DEPARTMENT_TRAN { get; set; }
        public virtual DbSet<V_HIS_DEPOSIT_REQ> V_HIS_DEPOSIT_REQ { get; set; }
        public virtual DbSet<V_HIS_DESK> V_HIS_DESK { get; set; }
        public virtual DbSet<V_HIS_DHST> V_HIS_DHST { get; set; }
        public virtual DbSet<V_HIS_DISPENSE> V_HIS_DISPENSE { get; set; }
        public virtual DbSet<V_HIS_DOCUMENT_BOOK> V_HIS_DOCUMENT_BOOK { get; set; }
        public virtual DbSet<V_HIS_EKIP_PLAN_USER> V_HIS_EKIP_PLAN_USER { get; set; }
        public virtual DbSet<V_HIS_EKIP_TEMP_USER> V_HIS_EKIP_TEMP_USER { get; set; }
        public virtual DbSet<V_HIS_EKIP_USER> V_HIS_EKIP_USER { get; set; }
        public virtual DbSet<V_HIS_EMPLOYEE> V_HIS_EMPLOYEE { get; set; }
        public virtual DbSet<V_HIS_EMR_COVER_CONFIG> V_HIS_EMR_COVER_CONFIG { get; set; }
        public virtual DbSet<V_HIS_EMTE_MATERIAL_TYPE> V_HIS_EMTE_MATERIAL_TYPE { get; set; }
        public virtual DbSet<V_HIS_EMTE_MEDICINE_TYPE> V_HIS_EMTE_MEDICINE_TYPE { get; set; }
        public virtual DbSet<V_HIS_EQUIPMENT_SET_MATY> V_HIS_EQUIPMENT_SET_MATY { get; set; }
        public virtual DbSet<V_HIS_EXAM_SCHEDULE> V_HIS_EXAM_SCHEDULE { get; set; }
        public virtual DbSet<V_HIS_EXAM_SERE_DIRE> V_HIS_EXAM_SERE_DIRE { get; set; }
        public virtual DbSet<V_HIS_EXECUTE_ROOM> V_HIS_EXECUTE_ROOM { get; set; }
        public virtual DbSet<V_HIS_EXECUTE_ROOM_1> V_HIS_EXECUTE_ROOM_1 { get; set; }
        public virtual DbSet<V_HIS_EXME_REASON_CFG> V_HIS_EXME_REASON_CFG { get; set; }
        public virtual DbSet<V_HIS_EXP_BLTY_SERVICE> V_HIS_EXP_BLTY_SERVICE { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST> V_HIS_EXP_MEST { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_1> V_HIS_EXP_MEST_1 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_2> V_HIS_EXP_MEST_2 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_3> V_HIS_EXP_MEST_3 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_4> V_HIS_EXP_MEST_4 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_5> V_HIS_EXP_MEST_5 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_BLOOD> V_HIS_EXP_MEST_BLOOD { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_BLTY_REQ> V_HIS_EXP_MEST_BLTY_REQ { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_BLTY_REQ_1> V_HIS_EXP_MEST_BLTY_REQ_1 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_BLTY_REQ_2> V_HIS_EXP_MEST_BLTY_REQ_2 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_CHMS> V_HIS_EXP_MEST_CHMS { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_CHMS_1> V_HIS_EXP_MEST_CHMS_1 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_CHMS_2> V_HIS_EXP_MEST_CHMS_2 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MANU> V_HIS_EXP_MEST_MANU { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MATERIAL> V_HIS_EXP_MEST_MATERIAL { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MATERIAL_1> V_HIS_EXP_MEST_MATERIAL_1 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MATERIAL_2> V_HIS_EXP_MEST_MATERIAL_2 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MATERIAL_3> V_HIS_EXP_MEST_MATERIAL_3 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MATERIAL_4> V_HIS_EXP_MEST_MATERIAL_4 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MATY_REQ> V_HIS_EXP_MEST_MATY_REQ { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MEDICINE> V_HIS_EXP_MEST_MEDICINE { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MEDICINE_1> V_HIS_EXP_MEST_MEDICINE_1 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MEDICINE_2> V_HIS_EXP_MEST_MEDICINE_2 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MEDICINE_3> V_HIS_EXP_MEST_MEDICINE_3 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MEDICINE_4> V_HIS_EXP_MEST_MEDICINE_4 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MEDICINE_5> V_HIS_EXP_MEST_MEDICINE_5 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_MEDICINE_6> V_HIS_EXP_MEST_MEDICINE_6 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_METY_REQ> V_HIS_EXP_MEST_METY_REQ { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_METY_REQ_1> V_HIS_EXP_MEST_METY_REQ_1 { get; set; }
        public virtual DbSet<V_HIS_EXP_MEST_USER> V_HIS_EXP_MEST_USER { get; set; }
        public virtual DbSet<V_HIS_EXRO_ROOM> V_HIS_EXRO_ROOM { get; set; }
        public virtual DbSet<V_HIS_FINANCE_PERIOD> V_HIS_FINANCE_PERIOD { get; set; }
        public virtual DbSet<V_HIS_FORM_TYPE_CFG_DATA> V_HIS_FORM_TYPE_CFG_DATA { get; set; }
        public virtual DbSet<V_HIS_HEIN_APPROVAL> V_HIS_HEIN_APPROVAL { get; set; }
        public virtual DbSet<V_HIS_HIV_TREATMENT> V_HIS_HIV_TREATMENT { get; set; }
        public virtual DbSet<V_HIS_HOLD_RETURN> V_HIS_HOLD_RETURN { get; set; }
        public virtual DbSet<V_HIS_HORE_DHTY> V_HIS_HORE_DHTY { get; set; }
        public virtual DbSet<V_HIS_HORE_HANDOVER> V_HIS_HORE_HANDOVER { get; set; }
        public virtual DbSet<V_HIS_HORE_HOHA> V_HIS_HORE_HOHA { get; set; }
        public virtual DbSet<V_HIS_ICD> V_HIS_ICD { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST> V_HIS_IMP_MEST { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_1> V_HIS_IMP_MEST_1 { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_2> V_HIS_IMP_MEST_2 { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_BLOOD> V_HIS_IMP_MEST_BLOOD { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MANU> V_HIS_IMP_MEST_MANU { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MATERIAL> V_HIS_IMP_MEST_MATERIAL { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MATERIAL_2> V_HIS_IMP_MEST_MATERIAL_2 { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MATERIAL_3> V_HIS_IMP_MEST_MATERIAL_3 { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MATERIAL_4> V_HIS_IMP_MEST_MATERIAL_4 { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MEDICINE> V_HIS_IMP_MEST_MEDICINE { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MEDICINE_2> V_HIS_IMP_MEST_MEDICINE_2 { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MEDICINE_3> V_HIS_IMP_MEST_MEDICINE_3 { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_MEDICINE_4> V_HIS_IMP_MEST_MEDICINE_4 { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_PAY> V_HIS_IMP_MEST_PAY { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_PROPOSE> V_HIS_IMP_MEST_PROPOSE { get; set; }
        public virtual DbSet<V_HIS_IMP_MEST_USER> V_HIS_IMP_MEST_USER { get; set; }
        public virtual DbSet<V_HIS_IMP_USER_TEMP_DT> V_HIS_IMP_USER_TEMP_DT { get; set; }
        public virtual DbSet<V_HIS_INFUSION> V_HIS_INFUSION { get; set; }
        public virtual DbSet<V_HIS_INFUSION_SUM> V_HIS_INFUSION_SUM { get; set; }
        public virtual DbSet<V_HIS_INVOICE> V_HIS_INVOICE { get; set; }
        public virtual DbSet<V_HIS_INVOICE_BOOK> V_HIS_INVOICE_BOOK { get; set; }
        public virtual DbSet<V_HIS_KSK_ACCESS> V_HIS_KSK_ACCESS { get; set; }
        public virtual DbSet<V_HIS_KSK_CONTRACT> V_HIS_KSK_CONTRACT { get; set; }
        public virtual DbSet<V_HIS_KSK_DRIVER> V_HIS_KSK_DRIVER { get; set; }
        public virtual DbSet<V_HIS_KSK_SERVICE> V_HIS_KSK_SERVICE { get; set; }
        public virtual DbSet<V_HIS_MACHINE> V_HIS_MACHINE { get; set; }
        public virtual DbSet<V_HIS_MATERIAL> V_HIS_MATERIAL { get; set; }
        public virtual DbSet<V_HIS_MATERIAL_1> V_HIS_MATERIAL_1 { get; set; }
        public virtual DbSet<V_HIS_MATERIAL_2> V_HIS_MATERIAL_2 { get; set; }
        public virtual DbSet<V_HIS_MATERIAL_BEAN> V_HIS_MATERIAL_BEAN { get; set; }
        public virtual DbSet<V_HIS_MATERIAL_BEAN_1> V_HIS_MATERIAL_BEAN_1 { get; set; }
        public virtual DbSet<V_HIS_MATERIAL_BEAN_2> V_HIS_MATERIAL_BEAN_2 { get; set; }
        public virtual DbSet<V_HIS_MATERIAL_PATY> V_HIS_MATERIAL_PATY { get; set; }
        public virtual DbSet<V_HIS_MATERIAL_TYPE> V_HIS_MATERIAL_TYPE { get; set; }
        public virtual DbSet<V_HIS_MATERIAL_TYPE_1> V_HIS_MATERIAL_TYPE_1 { get; set; }
        public virtual DbSet<V_HIS_MEDI_CONTRACT_MATY> V_HIS_MEDI_CONTRACT_MATY { get; set; }
        public virtual DbSet<V_HIS_MEDI_CONTRACT_MATY_1> V_HIS_MEDI_CONTRACT_MATY_1 { get; set; }
        public virtual DbSet<V_HIS_MEDI_CONTRACT_METY> V_HIS_MEDI_CONTRACT_METY { get; set; }
        public virtual DbSet<V_HIS_MEDI_CONTRACT_METY_1> V_HIS_MEDI_CONTRACT_METY_1 { get; set; }
        public virtual DbSet<V_HIS_MEDI_REACT> V_HIS_MEDI_REACT { get; set; }
        public virtual DbSet<V_HIS_MEDI_REACT_SUM> V_HIS_MEDI_REACT_SUM { get; set; }
        public virtual DbSet<V_HIS_MEDI_RECORD> V_HIS_MEDI_RECORD { get; set; }
        public virtual DbSet<V_HIS_MEDI_RECORD_1> V_HIS_MEDI_RECORD_1 { get; set; }
        public virtual DbSet<V_HIS_MEDI_RECORD_2> V_HIS_MEDI_RECORD_2 { get; set; }
        public virtual DbSet<V_HIS_MEDI_RECORD_BORROW> V_HIS_MEDI_RECORD_BORROW { get; set; }
        public virtual DbSet<V_HIS_MEDI_RECORD_BORROW_1> V_HIS_MEDI_RECORD_BORROW_1 { get; set; }
        public virtual DbSet<V_HIS_MEDI_STOCK> V_HIS_MEDI_STOCK { get; set; }
        public virtual DbSet<V_HIS_MEDI_STOCK_EXTY> V_HIS_MEDI_STOCK_EXTY { get; set; }
        public virtual DbSet<V_HIS_MEDI_STOCK_IMTY> V_HIS_MEDI_STOCK_IMTY { get; set; }
        public virtual DbSet<V_HIS_MEDI_STOCK_MATY> V_HIS_MEDI_STOCK_MATY { get; set; }
        public virtual DbSet<V_HIS_MEDI_STOCK_MATY_1> V_HIS_MEDI_STOCK_MATY_1 { get; set; }
        public virtual DbSet<V_HIS_MEDI_STOCK_METY> V_HIS_MEDI_STOCK_METY { get; set; }
        public virtual DbSet<V_HIS_MEDI_STOCK_METY_1> V_HIS_MEDI_STOCK_METY_1 { get; set; }
        public virtual DbSet<V_HIS_MEDI_STOCK_PERIOD> V_HIS_MEDI_STOCK_PERIOD { get; set; }
        public virtual DbSet<V_HIS_MEDICAL_ASSESSMENT> V_HIS_MEDICAL_ASSESSMENT { get; set; }
        public virtual DbSet<V_HIS_MEDICAL_CONTRACT> V_HIS_MEDICAL_CONTRACT { get; set; }
        public virtual DbSet<V_HIS_MEDICINE> V_HIS_MEDICINE { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_1> V_HIS_MEDICINE_1 { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_2> V_HIS_MEDICINE_2 { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_BEAN> V_HIS_MEDICINE_BEAN { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_BEAN_1> V_HIS_MEDICINE_BEAN_1 { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_BEAN_2> V_HIS_MEDICINE_BEAN_2 { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_MATERIAL> V_HIS_MEDICINE_MATERIAL { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_MEDICINE> V_HIS_MEDICINE_MEDICINE { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_PATY> V_HIS_MEDICINE_PATY { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_TYPE> V_HIS_MEDICINE_TYPE { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_TYPE_1> V_HIS_MEDICINE_TYPE_1 { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_TYPE_ACIN> V_HIS_MEDICINE_TYPE_ACIN { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_TYPE_ROOM> V_HIS_MEDICINE_TYPE_ROOM { get; set; }
        public virtual DbSet<V_HIS_MEDICINE_TYPE_TUT> V_HIS_MEDICINE_TYPE_TUT { get; set; }
        public virtual DbSet<V_HIS_MEST_INVE_USER> V_HIS_MEST_INVE_USER { get; set; }
        public virtual DbSet<V_HIS_MEST_MATY_DEPA> V_HIS_MEST_MATY_DEPA { get; set; }
        public virtual DbSet<V_HIS_MEST_METY_DEPA> V_HIS_MEST_METY_DEPA { get; set; }
        public virtual DbSet<V_HIS_MEST_METY_UNIT> V_HIS_MEST_METY_UNIT { get; set; }
        public virtual DbSet<V_HIS_MEST_PATIENT_TYPE> V_HIS_MEST_PATIENT_TYPE { get; set; }
        public virtual DbSet<V_HIS_MEST_PATY_SUB> V_HIS_MEST_PATY_SUB { get; set; }
        public virtual DbSet<V_HIS_MEST_PATY_TRTY> V_HIS_MEST_PATY_TRTY { get; set; }
        public virtual DbSet<V_HIS_MEST_PERIOD_BLOOD> V_HIS_MEST_PERIOD_BLOOD { get; set; }
        public virtual DbSet<V_HIS_MEST_PERIOD_BLTY> V_HIS_MEST_PERIOD_BLTY { get; set; }
        public virtual DbSet<V_HIS_MEST_PERIOD_MATE> V_HIS_MEST_PERIOD_MATE { get; set; }
        public virtual DbSet<V_HIS_MEST_PERIOD_MATY> V_HIS_MEST_PERIOD_MATY { get; set; }
        public virtual DbSet<V_HIS_MEST_PERIOD_MEDI> V_HIS_MEST_PERIOD_MEDI { get; set; }
        public virtual DbSet<V_HIS_MEST_PERIOD_METY> V_HIS_MEST_PERIOD_METY { get; set; }
        public virtual DbSet<V_HIS_MEST_ROOM> V_HIS_MEST_ROOM { get; set; }
        public virtual DbSet<V_HIS_METY_MATY> V_HIS_METY_MATY { get; set; }
        public virtual DbSet<V_HIS_METY_METY> V_HIS_METY_METY { get; set; }
        public virtual DbSet<V_HIS_METY_PRODUCT> V_HIS_METY_PRODUCT { get; set; }
        public virtual DbSet<V_HIS_NONE_MEDI_SERVICE> V_HIS_NONE_MEDI_SERVICE { get; set; }
        public virtual DbSet<V_HIS_PACKAGE_DETAIL> V_HIS_PACKAGE_DETAIL { get; set; }
        public virtual DbSet<V_HIS_PATIENT> V_HIS_PATIENT { get; set; }
        public virtual DbSet<V_HIS_PATIENT_1> V_HIS_PATIENT_1 { get; set; }
        public virtual DbSet<V_HIS_PATIENT_PROGRAM> V_HIS_PATIENT_PROGRAM { get; set; }
        public virtual DbSet<V_HIS_PATIENT_TYPE_ALLOW> V_HIS_PATIENT_TYPE_ALLOW { get; set; }
        public virtual DbSet<V_HIS_PATIENT_TYPE_ALTER> V_HIS_PATIENT_TYPE_ALTER { get; set; }
        public virtual DbSet<V_HIS_PATIENT_TYPE_ROOM> V_HIS_PATIENT_TYPE_ROOM { get; set; }
        public virtual DbSet<V_HIS_PATIENT_TYPE_SUB> V_HIS_PATIENT_TYPE_SUB { get; set; }
        public virtual DbSet<V_HIS_PREPARE> V_HIS_PREPARE { get; set; }
        public virtual DbSet<V_HIS_PREPARE_MATY> V_HIS_PREPARE_MATY { get; set; }
        public virtual DbSet<V_HIS_PREPARE_METY> V_HIS_PREPARE_METY { get; set; }
        public virtual DbSet<V_HIS_PROGRAM> V_HIS_PROGRAM { get; set; }
        public virtual DbSet<V_HIS_PTTT_CALENDAR> V_HIS_PTTT_CALENDAR { get; set; }
        public virtual DbSet<V_HIS_PTTT_GROUP_BEST> V_HIS_PTTT_GROUP_BEST { get; set; }
        public virtual DbSet<V_HIS_PTTT_TABLE> V_HIS_PTTT_TABLE { get; set; }
        public virtual DbSet<V_HIS_QC_NORMATION> V_HIS_QC_NORMATION { get; set; }
        public virtual DbSet<V_HIS_RATION_SCHEDULE> V_HIS_RATION_SCHEDULE { get; set; }
        public virtual DbSet<V_HIS_RATION_SUM> V_HIS_RATION_SUM { get; set; }
        public virtual DbSet<V_HIS_RECEPTION_ROOM> V_HIS_RECEPTION_ROOM { get; set; }
        public virtual DbSet<V_HIS_REFECTORY> V_HIS_REFECTORY { get; set; }
        public virtual DbSet<V_HIS_REGISTER_GATE> V_HIS_REGISTER_GATE { get; set; }
        public virtual DbSet<V_HIS_REGISTER_REQ> V_HIS_REGISTER_REQ { get; set; }
        public virtual DbSet<V_HIS_REHA_TRAIN> V_HIS_REHA_TRAIN { get; set; }
        public virtual DbSet<V_HIS_REHA_TRAIN_TYPE> V_HIS_REHA_TRAIN_TYPE { get; set; }
        public virtual DbSet<V_HIS_REMUNERATION> V_HIS_REMUNERATION { get; set; }
        public virtual DbSet<V_HIS_REST_RETR_TYPE> V_HIS_REST_RETR_TYPE { get; set; }
        public virtual DbSet<V_HIS_ROOM> V_HIS_ROOM { get; set; }
        public virtual DbSet<V_HIS_ROOM_COUNTER> V_HIS_ROOM_COUNTER { get; set; }
        public virtual DbSet<V_HIS_ROOM_COUNTER_1> V_HIS_ROOM_COUNTER_1 { get; set; }
        public virtual DbSet<V_HIS_ROOM_SARO> V_HIS_ROOM_SARO { get; set; }
        public virtual DbSet<V_HIS_ROOM_TIME> V_HIS_ROOM_TIME { get; set; }
        public virtual DbSet<V_HIS_ROOM_TYPE_MODULE> V_HIS_ROOM_TYPE_MODULE { get; set; }
        public virtual DbSet<V_HIS_SAMPLE_ROOM> V_HIS_SAMPLE_ROOM { get; set; }
        public virtual DbSet<V_HIS_SARO_EXRO> V_HIS_SARO_EXRO { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV> V_HIS_SERE_SERV { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_1> V_HIS_SERE_SERV_1 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_10> V_HIS_SERE_SERV_10 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_11> V_HIS_SERE_SERV_11 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_12> V_HIS_SERE_SERV_12 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_13> V_HIS_SERE_SERV_13 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_14> V_HIS_SERE_SERV_14 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_15> V_HIS_SERE_SERV_15 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_16> V_HIS_SERE_SERV_16 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_17> V_HIS_SERE_SERV_17 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_2> V_HIS_SERE_SERV_2 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_3> V_HIS_SERE_SERV_3 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_4> V_HIS_SERE_SERV_4 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_5> V_HIS_SERE_SERV_5 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_6> V_HIS_SERE_SERV_6 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_7> V_HIS_SERE_SERV_7 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_8> V_HIS_SERE_SERV_8 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_9> V_HIS_SERE_SERV_9 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_BILL> V_HIS_SERE_SERV_BILL { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_DEBT> V_HIS_SERE_SERV_DEBT { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_DEPOSIT> V_HIS_SERE_SERV_DEPOSIT { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_MATY> V_HIS_SERE_SERV_MATY { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_PTTT> V_HIS_SERE_SERV_PTTT { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_PTTT_1> V_HIS_SERE_SERV_PTTT_1 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_RATION> V_HIS_SERE_SERV_RATION { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_REHA> V_HIS_SERE_SERV_REHA { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_SUIN> V_HIS_SERE_SERV_SUIN { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_TEIN> V_HIS_SERE_SERV_TEIN { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_TEIN_1> V_HIS_SERE_SERV_TEIN_1 { get; set; }
        public virtual DbSet<V_HIS_SERE_SERV_TEMP> V_HIS_SERE_SERV_TEMP { get; set; }
        public virtual DbSet<V_HIS_SERV_SEGR> V_HIS_SERV_SEGR { get; set; }
        public virtual DbSet<V_HIS_SERVICE> V_HIS_SERVICE { get; set; }
        public virtual DbSet<V_HIS_SERVICE_1> V_HIS_SERVICE_1 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_CHANGE_REQ> V_HIS_SERVICE_CHANGE_REQ { get; set; }
        public virtual DbSet<V_HIS_SERVICE_CONDITION> V_HIS_SERVICE_CONDITION { get; set; }
        public virtual DbSet<V_HIS_SERVICE_FOLLOW> V_HIS_SERVICE_FOLLOW { get; set; }
        public virtual DbSet<V_HIS_SERVICE_HEIN> V_HIS_SERVICE_HEIN { get; set; }
        public virtual DbSet<V_HIS_SERVICE_MATY> V_HIS_SERVICE_MATY { get; set; }
        public virtual DbSet<V_HIS_SERVICE_METY> V_HIS_SERVICE_METY { get; set; }
        public virtual DbSet<V_HIS_SERVICE_NUM_ORDER> V_HIS_SERVICE_NUM_ORDER { get; set; }
        public virtual DbSet<V_HIS_SERVICE_PACKAGE> V_HIS_SERVICE_PACKAGE { get; set; }
        public virtual DbSet<V_HIS_SERVICE_PATY> V_HIS_SERVICE_PATY { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ> V_HIS_SERVICE_REQ { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_1> V_HIS_SERVICE_REQ_1 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_10> V_HIS_SERVICE_REQ_10 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_11> V_HIS_SERVICE_REQ_11 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_12> V_HIS_SERVICE_REQ_12 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_13> V_HIS_SERVICE_REQ_13 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_2> V_HIS_SERVICE_REQ_2 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_3> V_HIS_SERVICE_REQ_3 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_5> V_HIS_SERVICE_REQ_5 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_6> V_HIS_SERVICE_REQ_6 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_7> V_HIS_SERVICE_REQ_7 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_8> V_HIS_SERVICE_REQ_8 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_9> V_HIS_SERVICE_REQ_9 { get; set; }
        public virtual DbSet<V_HIS_SERVICE_REQ_METY> V_HIS_SERVICE_REQ_METY { get; set; }
        public virtual DbSet<V_HIS_SERVICE_RERE_TIME> V_HIS_SERVICE_RERE_TIME { get; set; }
        public virtual DbSet<V_HIS_SERVICE_RETY_CAT> V_HIS_SERVICE_RETY_CAT { get; set; }
        public virtual DbSet<V_HIS_SERVICE_ROOM> V_HIS_SERVICE_ROOM { get; set; }
        public virtual DbSet<V_HIS_SERVICE_SAME> V_HIS_SERVICE_SAME { get; set; }
        public virtual DbSet<V_HIS_SERVICE_TYPE> V_HIS_SERVICE_TYPE { get; set; }
        public virtual DbSet<V_HIS_SESE_DEPO_REPAY> V_HIS_SESE_DEPO_REPAY { get; set; }
        public virtual DbSet<V_HIS_SESE_TRANS_REQ> V_HIS_SESE_TRANS_REQ { get; set; }
        public virtual DbSet<V_HIS_STATION> V_HIS_STATION { get; set; }
        public virtual DbSet<V_HIS_SUBCLINICAL_RS_ADD> V_HIS_SUBCLINICAL_RS_ADD { get; set; }
        public virtual DbSet<V_HIS_SUIM_INDEX> V_HIS_SUIM_INDEX { get; set; }
        public virtual DbSet<V_HIS_SUIM_SETY_SUIN> V_HIS_SUIM_SETY_SUIN { get; set; }
        public virtual DbSet<V_HIS_SURG_REMU_DETAIL> V_HIS_SURG_REMU_DETAIL { get; set; }
        public virtual DbSet<V_HIS_SURG_REMU_DETAIL_1> V_HIS_SURG_REMU_DETAIL_1 { get; set; }
        public virtual DbSet<V_HIS_SURG_REMUNERATION> V_HIS_SURG_REMUNERATION { get; set; }
        public virtual DbSet<V_HIS_TEST_INDEX> V_HIS_TEST_INDEX { get; set; }
        public virtual DbSet<V_HIS_TEST_INDEX_RANGE> V_HIS_TEST_INDEX_RANGE { get; set; }
        public virtual DbSet<V_HIS_TRACKING> V_HIS_TRACKING { get; set; }
        public virtual DbSet<V_HIS_TRANSACTION> V_HIS_TRANSACTION { get; set; }
        public virtual DbSet<V_HIS_TRANSACTION_1> V_HIS_TRANSACTION_1 { get; set; }
        public virtual DbSet<V_HIS_TRANSACTION_5> V_HIS_TRANSACTION_5 { get; set; }
        public virtual DbSet<V_HIS_TRANSFUSION_SUM> V_HIS_TRANSFUSION_SUM { get; set; }
        public virtual DbSet<V_HIS_TREATMENT> V_HIS_TREATMENT { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_1> V_HIS_TREATMENT_1 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_10> V_HIS_TREATMENT_10 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_11> V_HIS_TREATMENT_11 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_12> V_HIS_TREATMENT_12 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_2> V_HIS_TREATMENT_2 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_3> V_HIS_TREATMENT_3 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_4> V_HIS_TREATMENT_4 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_5> V_HIS_TREATMENT_5 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_6> V_HIS_TREATMENT_6 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_7> V_HIS_TREATMENT_7 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_8> V_HIS_TREATMENT_8 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_9> V_HIS_TREATMENT_9 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_BED_ROOM> V_HIS_TREATMENT_BED_ROOM { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_BED_ROOM_1> V_HIS_TREATMENT_BED_ROOM_1 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_BORROW> V_HIS_TREATMENT_BORROW { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_FEE> V_HIS_TREATMENT_FEE { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_FEE_1> V_HIS_TREATMENT_FEE_1 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_FEE_2> V_HIS_TREATMENT_FEE_2 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_FEE_3> V_HIS_TREATMENT_FEE_3 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_FEE_4> V_HIS_TREATMENT_FEE_4 { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_LOGGING> V_HIS_TREATMENT_LOGGING { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_ROOM> V_HIS_TREATMENT_ROOM { get; set; }
        public virtual DbSet<V_HIS_TREATMENT_UNLIMIT> V_HIS_TREATMENT_UNLIMIT { get; set; }
        public virtual DbSet<V_HIS_USER_ACCOUNT_BOOK> V_HIS_USER_ACCOUNT_BOOK { get; set; }
        public virtual DbSet<V_HIS_USER_GROUP_TEMP_DT> V_HIS_USER_GROUP_TEMP_DT { get; set; }
        public virtual DbSet<V_HIS_USER_INVOICE_BOOK> V_HIS_USER_INVOICE_BOOK { get; set; }
        public virtual DbSet<V_HIS_USER_ROOM> V_HIS_USER_ROOM { get; set; }
        public virtual DbSet<V_HIS_VACC_APPOINTMENT> V_HIS_VACC_APPOINTMENT { get; set; }
        public virtual DbSet<V_HIS_VACCINATION> V_HIS_VACCINATION { get; set; }
        public virtual DbSet<V_HIS_VACCINATION_EXAM> V_HIS_VACCINATION_EXAM { get; set; }
        public virtual DbSet<V_HIS_VAEX_VAER> V_HIS_VAEX_VAER { get; set; }
        public virtual DbSet<V_HIS_VITAMIN_A> V_HIS_VITAMIN_A { get; set; }
        public virtual DbSet<V_HTC_EXPENSE> V_HTC_EXPENSE { get; set; }
        public virtual DbSet<V_HTC_PERIOD_DEPARTMENT> V_HTC_PERIOD_DEPARTMENT { get; set; }
        public virtual DbSet<V_HTC_REPARTITION_RATIO> V_HTC_REPARTITION_RATIO { get; set; }
        public virtual DbSet<V_LIS_BAC_ANTIBIOTIC> V_LIS_BAC_ANTIBIOTIC { get; set; }
        public virtual DbSet<V_LIS_RESULT> V_LIS_RESULT { get; set; }
        public virtual DbSet<V_LIS_SAMPLE> V_LIS_SAMPLE { get; set; }
        public virtual DbSet<V_LIS_SAMPLE_SERVICE> V_LIS_SAMPLE_SERVICE { get; set; }
        public virtual DbSet<V_LIS_TEST_INDEX_MAP> V_LIS_TEST_INDEX_MAP { get; set; }
        public virtual DbSet<V_SAR_FORM> V_SAR_FORM { get; set; }
        public virtual DbSet<V_SAR_PRINT_TYPE_CFG> V_SAR_PRINT_TYPE_CFG { get; set; }
        public virtual DbSet<V_SAR_REPORT> V_SAR_REPORT { get; set; }
        public virtual DbSet<V_SAR_REPORT_TEMPLATE> V_SAR_REPORT_TEMPLATE { get; set; }
        public virtual DbSet<V_SAR_RETY_FOFI> V_SAR_RETY_FOFI { get; set; }
        public virtual DbSet<V_SAR_USER_REPORT_TYPE> V_SAR_USER_REPORT_TYPE { get; set; }
        public virtual DbSet<V_SDA_COMMUNE> V_SDA_COMMUNE { get; set; }
        public virtual DbSet<V_SDA_CONFIG_APP_USER> V_SDA_CONFIG_APP_USER { get; set; }
        public virtual DbSet<V_SDA_DISTRICT> V_SDA_DISTRICT { get; set; }
        public virtual DbSet<V_SDA_GROUP> V_SDA_GROUP { get; set; }
        public virtual DbSet<V_SDA_NATIONAL> V_SDA_NATIONAL { get; set; }
        public virtual DbSet<V_SDA_PROVINCE> V_SDA_PROVINCE { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.APPLICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.IP_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.VIR_ACTIVITY_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<ACS_ACTIVITY_LOG>()
                .Property(e => e.VIR_ACTIVITY_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .Property(e => e.ACTIVITY_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .Property(e => e.ACTIVITY_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .Property(e => e.ACTIVITY_TYPE_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ACTIVITY_TYPE>()
                .HasMany(e => e.ACS_ACTIVITY_LOG)
                .WithRequired(e => e.ACS_ACTIVITY_TYPE)
                .HasForeignKey(e => e.ACTIVITY_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_APP_OTP_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APP_OTP_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APP_OTP_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APP_OTP_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APP_OTP_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APP_OTP_TYPE>()
                .Property(e => e.SMS_TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.APPLICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.APPLICATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.ALLOW_VERSION)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.SMS_URL)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.SMS_ACTIVE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .Property(e => e.SMS_CHANGE_PASS_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .HasMany(e => e.ACS_APPLICATION_ROLE)
                .WithRequired(e => e.ACS_APPLICATION)
                .HasForeignKey(e => e.APPLICATION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .HasMany(e => e.ACS_CONTROL)
                .WithRequired(e => e.ACS_APPLICATION)
                .HasForeignKey(e => e.APPLICATION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_APPLICATION>()
                .HasMany(e => e.ACS_MODULE)
                .WithRequired(e => e.ACS_APPLICATION)
                .HasForeignKey(e => e.APPLICATION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_APPLICATION_ROLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION_ROLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION_ROLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION_ROLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_APPLICATION_ROLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.AUTHENTICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.ADDITIONAL_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHEN_REQUEST>()
                .Property(e => e.TDL_AUTHOR_SYSTEM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.AUTHOR_SYSTEM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.AUTHOR_SYSTEM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.SERCURE_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.AUTHOR_SYSTEM_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<ACS_AUTHOR_SYSTEM>()
                .Property(e => e.WEB_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL>()
                .Property(e => e.CONTROL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL>()
                .Property(e => e.CONTROL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL>()
                .HasMany(e => e.ACS_CONTROL_ROLE)
                .WithRequired(e => e.ACS_CONTROL)
                .HasForeignKey(e => e.CONTROL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_CONTROL_ROLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL_ROLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL_ROLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL_ROLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CONTROL_ROLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.RESOURCE_SYSTEM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.TOKEN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.DATA_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_CREDENTIAL_DATA>()
                .Property(e => e.DATA)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.MODULE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.ICON_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.MODULE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.VIR_MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .Property(e => e.VIDEO_URLS)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE>()
                .HasMany(e => e.ACS_MODULE_ROLE)
                .WithRequired(e => e.ACS_MODULE)
                .HasForeignKey(e => e.MODULE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .Property(e => e.MODULE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .Property(e => e.MODULE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .Property(e => e.ICON_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_GROUP>()
                .HasMany(e => e.ACS_MODULE)
                .WithOptional(e => e.ACS_MODULE_GROUP)
                .HasForeignKey(e => e.MODULE_GROUP_ID);

            modelBuilder.Entity<ACS_MODULE_ROLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_ROLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_ROLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_ROLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_MODULE_ROLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.OTP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.LOGINAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP>()
                .Property(e => e.VIR_EXPIRE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<ACS_OTP_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP_TYPE>()
                .Property(e => e.OPT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP_TYPE>()
                .Property(e => e.OPT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_OTP_TYPE>()
                .HasMany(e => e.ACS_OTP)
                .WithRequired(e => e.ACS_OTP_TYPE)
                .HasForeignKey(e => e.OTP_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_ROLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE>()
                .Property(e => e.ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE>()
                .Property(e => e.ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE>()
                .HasMany(e => e.ACS_APPLICATION_ROLE)
                .WithRequired(e => e.ACS_ROLE)
                .HasForeignKey(e => e.ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_ROLE>()
                .HasMany(e => e.ACS_CONTROL_ROLE)
                .WithRequired(e => e.ACS_ROLE)
                .HasForeignKey(e => e.ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_ROLE>()
                .HasMany(e => e.ACS_MODULE_ROLE)
                .WithRequired(e => e.ACS_ROLE)
                .HasForeignKey(e => e.ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_ROLE>()
                .HasMany(e => e.ACS_ROLE_BASE)
                .WithRequired(e => e.ACS_ROLE)
                .HasForeignKey(e => e.ROLE_BASE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_ROLE>()
                .HasMany(e => e.ACS_ROLE_BASE1)
                .WithRequired(e => e.ACS_ROLE1)
                .HasForeignKey(e => e.ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_ROLE>()
                .HasMany(e => e.ACS_ROLE_USER)
                .WithRequired(e => e.ACS_ROLE)
                .HasForeignKey(e => e.ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACS_ROLE_AUTHOR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_AUTHOR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_AUTHOR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_AUTHOR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_AUTHOR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_BASE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_BASE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_BASE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_BASE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_BASE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_ROLE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.TOKEN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.RENEW_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.APP_VERSION)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.LOGIN_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.LOGIN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.USER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.APPLICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.AUTHENTICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_TOKEN>()
                .Property(e => e.AUTHOR_SYSTEM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACS_USER>()
                .HasMany(e => e.ACS_ROLE_USER)
                .WithRequired(e => e.ACS_USER)
                .HasForeignKey(e => e.USER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.CARD_MAC)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.BANK_CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.BHYT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.HNCODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_CARD_PATIENT>()
                .Property(e => e.LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.EXPIRED_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.IS_MEDICINE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.DETAIL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.DETAIL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.ITEM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_EXP_MEST_DETAIL_1>()
                .Property(e => e.IS_MEDICINE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.MEDICINE_USE_FORM_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.IS_STAR_MARK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.ALERT_MAX_IN_TREATMENT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.IS_STENT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.ALERT_MAX_IN_PRESCRIPTION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.IS_VACCINE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.RANK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.IS_REUSABLE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.CONTRAINDICATION)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.MATERIAL_TYPE_MAP_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.SERVICE_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.IS_CHEMICAL_SUBSTANCE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.PARENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.OTHER_PAY_SOURCE_ICDS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_1>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MEDICINE_USE_FORM_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.IS_STAR_MARK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.ALERT_MAX_IN_TREATMENT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.IS_STENT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.ALERT_MAX_IN_PRESCRIPTION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.IS_VACCINE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.RANK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.IS_REUSABLE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.CONTRAINDICATION)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MATERIAL_TYPE_MAP_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.DO_NOT_REQUIRED_USE_FORM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.TDL_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.SERVICE_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.IS_CHEMICAL_SUBSTANCE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.PARENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.OTHER_PAY_SOURCE_ICDS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDI_STOCK_2>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ALERT_MAX_IN_TREATMENT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_TYPE_PROPRIETARY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.VIR_HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PATIENT_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HRM_EMPLOYEE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.BORN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.BORN_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HOUSEHOLD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HOUSEHOLD_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.OWN_BRANCH_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.UUID)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.SYS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.UUID_BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.REGISTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.FATHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.FATHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.MOTHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.MOTHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TDL_LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_CARD_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TDL_JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TDL_PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CMND_BEFORE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.CMND_AFTER_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.VIR_DOB_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.BHYT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.HNCODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.VIR_HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PATIENT_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HRM_EMPLOYEE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.BORN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.BORN_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HOUSEHOLD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HOUSEHOLD_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.OWN_BRANCH_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.UUID)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.SYS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.UUID_BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.REGISTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.FATHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.FATHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.MOTHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.MOTHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TDL_LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TDL_HEIN_CARD_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TDL_JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TDL_PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CMND_BEFORE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CMND_AFTER_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.VIR_DOB_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.BHYT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.HNCODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_CARD>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.VIR_HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PATIENT_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HRM_EMPLOYEE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.BORN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.BORN_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HOUSEHOLD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HOUSEHOLD_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.OWN_BRANCH_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.UUID)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.SYS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.UUID_BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.REGISTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.FATHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.FATHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.MOTHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.MOTHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.TDL_LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.TDL_HEIN_CARD_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.TDL_JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.TDL_PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CMND_BEFORE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CMND_AFTER_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.VIR_DOB_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PATIENT_PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.BHYT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.HNCODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.VIR_HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PATIENT_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HRM_EMPLOYEE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.BORN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.BORN_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HOUSEHOLD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HOUSEHOLD_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.OWN_BRANCH_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.UUID)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.SYS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.UUID_BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.REGISTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.FATHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.FATHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.MOTHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.MOTHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TDL_LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TDL_HEIN_CARD_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TDL_JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TDL_PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CMND_BEFORE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.CMND_AFTER_URL)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.VIR_DOB_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.BHYT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.HNCODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TREATMENT>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TYPE_ALTER_1>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_PATIENT_TYPE_ALTER_1>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<D_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<D_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.PATIENT_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_ACCIDENT_BODY_PART>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_BODY_PART>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_BODY_PART>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_BODY_PART>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_BODY_PART>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_BODY_PART>()
                .Property(e => e.ACCIDENT_BODY_PART_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_BODY_PART>()
                .Property(e => e.ACCIDENT_BODY_PART_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_BODY_PART>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_ACCIDENT_BODY_PART)
                .HasForeignKey(e => e.ACCIDENT_BODY_PART_ID);

            modelBuilder.Entity<HIS_ACCIDENT_CARE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_CARE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_CARE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_CARE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_CARE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_CARE>()
                .Property(e => e.ACCIDENT_CARE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_CARE>()
                .Property(e => e.ACCIDENT_CARE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_CARE>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_ACCIDENT_CARE)
                .HasForeignKey(e => e.ACCIDENT_CARE_ID);

            modelBuilder.Entity<HIS_ACCIDENT_HELMET>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HELMET>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HELMET>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HELMET>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HELMET>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HELMET>()
                .Property(e => e.ACCIDENT_HELMET_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HELMET>()
                .Property(e => e.ACCIDENT_HELMET_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HELMET>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_ACCIDENT_HELMET)
                .HasForeignKey(e => e.ACCIDENT_HELMET_ID);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.STATUS_IN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.STATUS_OUT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.TREATMENT_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.ISSUE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.SEEDING_ISSUED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.VIR_ISSUE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .Property(e => e.ACCIDENT_HURT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .Property(e => e.ACCIDENT_HURT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_HURT_TYPE>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithRequired(e => e.HIS_ACCIDENT_HURT_TYPE)
                .HasForeignKey(e => e.ACCIDENT_HURT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ACCIDENT_LOCATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_LOCATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_LOCATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_LOCATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_LOCATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_LOCATION>()
                .Property(e => e.ACCIDENT_LOCATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_LOCATION>()
                .Property(e => e.ACCIDENT_LOCATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_LOCATION>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_ACCIDENT_LOCATION)
                .HasForeignKey(e => e.ACCIDENT_LOCATION_ID);

            modelBuilder.Entity<HIS_ACCIDENT_POISON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_POISON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_POISON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_POISON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_POISON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_POISON>()
                .Property(e => e.ACCIDENT_POISON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_POISON>()
                .Property(e => e.ACCIDENT_POISON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_POISON>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_ACCIDENT_POISON)
                .HasForeignKey(e => e.ACCIDENT_POISON_ID);

            modelBuilder.Entity<HIS_ACCIDENT_RESULT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_RESULT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_RESULT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_RESULT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_RESULT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_RESULT>()
                .Property(e => e.ACCIDENT_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_RESULT>()
                .Property(e => e.ACCIDENT_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_RESULT>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_ACCIDENT_RESULT)
                .HasForeignKey(e => e.ACCIDENT_RESULT_ID);

            modelBuilder.Entity<HIS_ACCIDENT_VEHICLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_VEHICLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_VEHICLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_VEHICLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_VEHICLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_VEHICLE>()
                .Property(e => e.ACCIDENT_VEHICLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_VEHICLE>()
                .Property(e => e.ACCIDENT_VEHICLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCIDENT_VEHICLE>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_ACCIDENT_VEHICLE)
                .HasForeignKey(e => e.ACCIDENT_VEHICLE_ID);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.ACCOUNT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.ACCOUNT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .HasMany(e => e.HIS_ACCOUNT_BOOK1)
                .WithOptional(e => e.HIS_ACCOUNT_BOOK2)
                .HasForeignKey(e => e.LINK_ID);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .HasMany(e => e.HIS_CARO_ACCOUNT_BOOK)
                .WithRequired(e => e.HIS_ACCOUNT_BOOK)
                .HasForeignKey(e => e.ACCOUNT_BOOK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .HasMany(e => e.HIS_ROOM)
                .WithOptional(e => e.HIS_ACCOUNT_BOOK)
                .HasForeignKey(e => e.DEPOSIT_ACCOUNT_BOOK_ID);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .HasMany(e => e.HIS_ROOM1)
                .WithOptional(e => e.HIS_ACCOUNT_BOOK1)
                .HasForeignKey(e => e.BILL_ACCOUNT_BOOK_ID);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithRequired(e => e.HIS_ACCOUNT_BOOK)
                .HasForeignKey(e => e.ACCOUNT_BOOK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ACCOUNT_BOOK>()
                .HasMany(e => e.HIS_USER_ACCOUNT_BOOK)
                .WithRequired(e => e.HIS_ACCOUNT_BOOK)
                .HasForeignKey(e => e.ACCOUNT_BOOK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.CONSEQUENCE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACIN_INTERACTIVE>()
                .Property(e => e.MECHANISM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .Property(e => e.ACTIVE_INGREDIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .Property(e => e.ACTIVE_INGREDIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .HasMany(e => e.HIS_ACIN_INTERACTIVE)
                .WithRequired(e => e.HIS_ACTIVE_INGREDIENT)
                .HasForeignKey(e => e.ACTIVE_INGREDIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .HasMany(e => e.HIS_ACIN_INTERACTIVE1)
                .WithRequired(e => e.HIS_ACTIVE_INGREDIENT1)
                .HasForeignKey(e => e.CONFLICT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .HasMany(e => e.HIS_ANTIBIOTIC_NEW_REG)
                .WithRequired(e => e.HIS_ACTIVE_INGREDIENT)
                .HasForeignKey(e => e.ACTIVE_INGREDIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .HasMany(e => e.HIS_ICD_SERVICE)
                .WithOptional(e => e.HIS_ACTIVE_INGREDIENT)
                .HasForeignKey(e => e.ACTIVE_INGREDIENT_ID);

            modelBuilder.Entity<HIS_ACTIVE_INGREDIENT>()
                .HasMany(e => e.HIS_MEDICINE_TYPE_ACIN)
                .WithRequired(e => e.HIS_ACTIVE_INGREDIENT)
                .HasForeignKey(e => e.ACTIVE_INGREDIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.ADR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.REPORT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.REPORT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.RELATED_TEST)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.REACTION_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.APPEAR_AFTER_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.RELATIONSHIP_ORTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.EXPERTISE_STANDER_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.BYT_COMMENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_ADR>()
                .HasMany(e => e.HIS_ADR_MEDICINE_TYPE)
                .WithRequired(e => e.HIS_ADR)
                .HasForeignKey(e => e.ADR_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.ONCE_TUTORIAL)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.NUMBER_USE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .Property(e => e.AGE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .Property(e => e.AGE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .HasMany(e => e.HIS_ICD)
                .WithOptional(e => e.HIS_AGE_TYPE)
                .HasForeignKey(e => e.AGE_TYPE_ID);

            modelBuilder.Entity<HIS_AGE_TYPE>()
                .HasMany(e => e.HIS_TEST_INDEX_RANGE)
                .WithOptional(e => e.HIS_AGE_TYPE)
                .HasForeignKey(e => e.AGE_TYPE_ID);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.RECEIVE_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALERT>()
                .HasMany(e => e.HIS_REJECT_ALERT)
                .WithRequired(e => e.HIS_ALERT)
                .HasForeignKey(e => e.ALERT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ALLERGENIC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGENIC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGENIC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGENIC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGENIC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGENIC>()
                .Property(e => e.ALLERGENIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGENIC>()
                .Property(e => e.CLINICAL_EXPRESSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .Property(e => e.DIAGNOSE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .Property(e => e.DIAGNOSE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .Property(e => e.DIAGNOSE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ALLERGY_CARD>()
                .HasMany(e => e.HIS_ALLERGENIC)
                .WithRequired(e => e.HIS_ALLERGY_CARD)
                .HasForeignKey(e => e.ALLERGY_CARD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_MICROBI>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_MICROBI>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_MICROBI>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_MICROBI>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_MICROBI>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_MICROBI>()
                .Property(e => e.SPECIMENS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_MICROBI>()
                .Property(e => e.RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.DOSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.PERIOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.USE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.USE_DAY)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_OLD_REG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_OLD_REG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_OLD_REG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_OLD_REG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_OLD_REG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_OLD_REG>()
                .Property(e => e.ANTIBIOTIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ANTIBIOTIC_REQUEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ALLERGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.INFECTION_ENTRY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CLINICAL_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.WHITE_BLOOD_CELL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CRP)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.PCT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CRCL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.NO_MICROBIOLOGY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ADR_ANTIBIOTIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.OTHER_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.OTHER_OPINION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .HasMany(e => e.HIS_ANTIBIOTIC_MICROBI)
                .WithRequired(e => e.HIS_ANTIBIOTIC_REQUEST)
                .HasForeignKey(e => e.ANTIBIOTIC_REQUEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .HasMany(e => e.HIS_ANTIBIOTIC_NEW_REG)
                .WithRequired(e => e.HIS_ANTIBIOTIC_REQUEST)
                .HasForeignKey(e => e.ANTIBIOTIC_REQUEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .HasMany(e => e.HIS_ANTIBIOTIC_OLD_REG)
                .WithRequired(e => e.HIS_ANTIBIOTIC_REQUEST)
                .HasForeignKey(e => e.ANTIBIOTIC_REQUEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ANTIBIOTIC_REQUEST>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_ANTIBIOTIC_REQUEST)
                .HasForeignKey(e => e.ANTIBIOTIC_REQUEST_ID);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.ANTICIPATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .Property(e => e.USE_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .HasMany(e => e.HIS_ANTICIPATE_BLTY)
                .WithRequired(e => e.HIS_ANTICIPATE)
                .HasForeignKey(e => e.ANTICIPATE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .HasMany(e => e.HIS_ANTICIPATE_MATY)
                .WithRequired(e => e.HIS_ANTICIPATE)
                .HasForeignKey(e => e.ANTICIPATE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ANTICIPATE>()
                .HasMany(e => e.HIS_ANTICIPATE_METY)
                .WithRequired(e => e.HIS_ANTICIPATE)
                .HasForeignKey(e => e.ANTICIPATE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ANTICIPATE_BLTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_BLTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_BLTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_BLTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_BLTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_BLTY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_ANTICIPATE_BLTY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_ANTICIPATE_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_ANTICIPATE_MATY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_ANTICIPATE_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTICIPATE_METY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_ANTICIPATE_METY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_ANTIGEN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN>()
                .Property(e => e.ANTIGEN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN>()
                .Property(e => e.ANTIGEN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ANTIGEN_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_PERIOD>()
                .HasMany(e => e.HIS_APPOINTMENT)
                .WithOptional(e => e.HIS_APPOINTMENT_PERIOD)
                .HasForeignKey(e => e.APPOINTMENT_PERIOD_ID);

            modelBuilder.Entity<HIS_APPOINTMENT_PERIOD>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_APPOINTMENT_PERIOD)
                .HasForeignKey(e => e.APPOINTMENT_PERIOD_ID);

            modelBuilder.Entity<HIS_APPOINTMENT_SERV>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_SERV>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_SERV>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_SERV>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_SERV>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_APPOINTMENT_SERV>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_AREA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AREA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AREA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AREA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AREA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AREA>()
                .Property(e => e.AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AREA>()
                .Property(e => e.AREA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AREA>()
                .HasMany(e => e.HIS_DESK)
                .WithOptional(e => e.HIS_AREA)
                .HasForeignKey(e => e.AREA_ID);

            modelBuilder.Entity<HIS_AREA>()
                .HasMany(e => e.HIS_ROOM)
                .WithOptional(e => e.HIS_AREA)
                .HasForeignKey(e => e.AREA_ID);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_MEMBER>()
                .Property(e => e.DISAGREE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_OBJECT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_OBJECT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_OBJECT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_OBJECT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_OBJECT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_OBJECT>()
                .Property(e => e.ASSESSMENT_OBJECT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_OBJECT>()
                .Property(e => e.ASSESSMENT_OBJECT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSESSMENT_OBJECT>()
                .HasMany(e => e.HIS_MEDICAL_ASSESSMENT)
                .WithRequired(e => e.HIS_ASSESSMENT_OBJECT)
                .HasForeignKey(e => e.ASSESSMENT_OBJECT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ASSIGN_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSIGN_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSIGN_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSIGN_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSIGN_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSIGN_REASON>()
                .Property(e => e.ASSIGN_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSIGN_REASON>()
                .Property(e => e.ASSIGN_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ASSIGN_REASON>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_ASSIGN_REASON)
                .HasForeignKey(e => e.ASSIGN_REASON_ID);

            modelBuilder.Entity<HIS_ATC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ATC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ATC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ATC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ATC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ATC>()
                .Property(e => e.ATC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ATC>()
                .Property(e => e.ATC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AWARENESS>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AWARENESS>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AWARENESS>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AWARENESS>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AWARENESS>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AWARENESS>()
                .Property(e => e.AWARENESS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AWARENESS>()
                .Property(e => e.AWARENESS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_AWARENESS>()
                .HasMany(e => e.HIS_CARE)
                .WithOptional(e => e.HIS_AWARENESS)
                .HasForeignKey(e => e.AWARENESS_ID);

            modelBuilder.Entity<HIS_AWARENESS>()
                .HasMany(e => e.HIS_CARE_TEMP)
                .WithOptional(e => e.HIS_AWARENESS)
                .HasForeignKey(e => e.AWARENESS_ID);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BABY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.HEAD)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.MIDWIFE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.ISSUER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.ISSUER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTHPLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.METHOD_STYLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.HEIN_CARD_NUMBER_TMP)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTH_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTH_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTH_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTH_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTH_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTH_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTH_HOSPITAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BABY>()
                .Property(e => e.BIRTH_HOSPITAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BANK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BANK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BANK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BANK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BANK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BANK>()
                .Property(e => e.BANK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BANK>()
                .Property(e => e.BANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BANK>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_BANK)
                .HasForeignKey(e => e.BANK_ID);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_DT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_DT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_DT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_DT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_DT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_DT>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_DT>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BCS_MATY_REQ_REQ>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_DT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_DT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_DT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_DT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_DT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_DT>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BCS_METY_REQ_DT>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BCS_METY_REQ_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BCS_METY_REQ_REQ>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .Property(e => e.Y)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED>()
                .HasMany(e => e.HIS_BED_BSTY)
                .WithRequired(e => e.HIS_BED)
                .HasForeignKey(e => e.BED_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BED>()
                .HasMany(e => e.HIS_BED_LOG)
                .WithRequired(e => e.HIS_BED)
                .HasForeignKey(e => e.BED_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BED>()
                .HasMany(e => e.HIS_TREATMENT_BED_ROOM)
                .WithOptional(e => e.HIS_BED)
                .HasForeignKey(e => e.BED_ID);

            modelBuilder.Entity<HIS_BED_BSTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_BSTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_BSTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_BSTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_BSTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_LOG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_LOG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_LOG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_LOG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_LOG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_LOG>()
                .HasMany(e => e.HIS_SERE_SERV_EXT)
                .WithOptional(e => e.HIS_BED_LOG)
                .HasForeignKey(e => e.BED_LOG_ID);

            modelBuilder.Entity<HIS_BED_LOG>()
                .HasMany(e => e.HIS_SERVICE_REQ1)
                .WithOptional(e => e.HIS_BED_LOG1)
                .HasForeignKey(e => e.BED_LOG_ID);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .Property(e => e.TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .HasMany(e => e.HIS_BED)
                .WithRequired(e => e.HIS_BED_ROOM)
                .HasForeignKey(e => e.BED_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .HasMany(e => e.HIS_TREATMENT_BED_ROOM)
                .WithRequired(e => e.HIS_BED_ROOM)
                .HasForeignKey(e => e.BED_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BED_ROOM>()
                .HasMany(e => e.HIS_TREATMENT_ROOM)
                .WithRequired(e => e.HIS_BED_ROOM)
                .HasForeignKey(e => e.BED_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BED_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_TYPE>()
                .Property(e => e.BED_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_TYPE>()
                .Property(e => e.BED_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BED_TYPE>()
                .HasMany(e => e.HIS_BED)
                .WithRequired(e => e.HIS_BED_TYPE)
                .HasForeignKey(e => e.BED_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BHYT_BLACKLIST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_BLACKLIST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_BLACKLIST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_BLACKLIST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_BLACKLIST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_BLACKLIST>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.BASE_SALARY)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.MIN_TOTAL_BY_SALARY)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.MAX_TOTAL_PACKAGE_BY_SALARY)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BHYT_PARAM>()
                .Property(e => e.SECOND_STENT_PAID_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BHYT_WHITELIST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_WHITELIST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_WHITELIST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_WHITELIST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_WHITELIST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BHYT_WHITELIST>()
                .Property(e => e.BHYT_WHITELIST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.ALLOW_UPDATE_LOGINNAMES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .Property(e => e.BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_ANTICIPATE_BLTY)
                .WithOptional(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_ANTICIPATE_MATY)
                .WithOptional(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_ANTICIPATE_METY)
                .WithOptional(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_BID_BLOOD_TYPE)
                .WithRequired(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_BID_MATERIAL_TYPE)
                .WithRequired(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_BID_MEDICINE_TYPE)
                .WithRequired(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_BLOOD)
                .WithOptional(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_MATERIAL)
                .WithOptional(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_MEDICAL_CONTRACT)
                .WithOptional(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID);

            modelBuilder.Entity<HIS_BID>()
                .HasMany(e => e.HIS_MEDICINE)
                .WithOptional(e => e.HIS_BID)
                .HasForeignKey(e => e.BID_ID);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_BLOOD_TYPE>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.TDL_CONTRACT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.JOIN_BID_MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.IMP_MORE_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.ADJUST_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_BID_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_MATY)
                .WithOptional(e => e.HIS_BID_MATERIAL_TYPE)
                .HasForeignKey(e => e.BID_MATERIAL_TYPE_ID);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.TDL_CONTRACT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.IMP_MORE_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.ADJUST_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_BID_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_METY)
                .WithOptional(e => e.HIS_BID_MEDICINE_TYPE)
                .HasForeignKey(e => e.BID_MEDICINE_TYPE_ID);

            modelBuilder.Entity<HIS_BID_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_TYPE>()
                .Property(e => e.BID_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_TYPE>()
                .Property(e => e.BID_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BID_TYPE>()
                .HasMany(e => e.HIS_BID)
                .WithOptional(e => e.HIS_BID_TYPE)
                .HasForeignKey(e => e.BID_TYPE_ID);

            modelBuilder.Entity<HIS_BILL_FUND>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_FUND>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_FUND>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_FUND>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_FUND>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_FUND>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.GOODS_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.GOODS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BILL_GOODS>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.BIRTH_CERT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.BIRTH_CERT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BIRTH_CERT_BOOK>()
                .HasMany(e => e.HIS_BABY)
                .WithOptional(e => e.HIS_BIRTH_CERT_BOOK)
                .HasForeignKey(e => e.BIRTH_CERT_BOOK_ID);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.GIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.GIVE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_BLOOD>()
                .HasMany(e => e.HIS_EXP_MEST_BLOOD)
                .WithRequired(e => e.HIS_BLOOD)
                .HasForeignKey(e => e.BLOOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .HasMany(e => e.HIS_IMP_MEST_BLOOD)
                .WithRequired(e => e.HIS_BLOOD)
                .HasForeignKey(e => e.BLOOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD>()
                .HasMany(e => e.HIS_MEST_PERIOD_BLOOD)
                .WithRequired(e => e.HIS_BLOOD)
                .HasForeignKey(e => e.BLOOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .HasMany(e => e.HIS_BLOOD)
                .WithRequired(e => e.HIS_BLOOD_ABO)
                .HasForeignKey(e => e.BLOOD_ABO_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .HasMany(e => e.HIS_BLOOD_GIVER)
                .WithOptional(e => e.HIS_BLOOD_ABO)
                .HasForeignKey(e => e.BLOOD_ABO_ID);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .HasMany(e => e.HIS_EXP_MEST_BLTY_REQ)
                .WithOptional(e => e.HIS_BLOOD_ABO)
                .HasForeignKey(e => e.BLOOD_ABO_ID);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_BLOOD_ABO)
                .HasForeignKey(e => e.BLOOD_ABO_ID);

            modelBuilder.Entity<HIS_BLOOD_ABO>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_BLOOD_ABO)
                .HasForeignKey(e => e.BLOOD_ABO_ID);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.GIVE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.GIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.PROVINCE_CODE_BLOOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.PROVINCE_NAME_BLOOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.DISTRICT_CODE_BLOOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.DISTRICT_NAME_BLOOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.GIVE_CARD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.NOTE_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.TEST_BEFORE_HB)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.EXAM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.EXAM_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .Property(e => e.EXECUTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GIVER>()
                .HasMany(e => e.HIS_BLOOD)
                .WithOptional(e => e.HIS_BLOOD_GIVER)
                .HasForeignKey(e => e.BLOOD_GIVE_ID);

            modelBuilder.Entity<HIS_BLOOD_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GROUP>()
                .Property(e => e.BLOOD_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GROUP>()
                .Property(e => e.BLOOD_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_GROUP>()
                .HasMany(e => e.HIS_BLOOD_TYPE)
                .WithOptional(e => e.HIS_BLOOD_GROUP)
                .HasForeignKey(e => e.BLOOD_GROUP_ID);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .HasMany(e => e.HIS_BLOOD)
                .WithOptional(e => e.HIS_BLOOD_RH)
                .HasForeignKey(e => e.BLOOD_RH_ID);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .HasMany(e => e.HIS_BLOOD_GIVER)
                .WithOptional(e => e.HIS_BLOOD_RH)
                .HasForeignKey(e => e.BLOOD_RH_ID);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .HasMany(e => e.HIS_EXP_MEST_BLTY_REQ)
                .WithOptional(e => e.HIS_BLOOD_RH)
                .HasForeignKey(e => e.BLOOD_RH_ID);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_BLOOD_RH)
                .HasForeignKey(e => e.BLOOD_RH_ID);

            modelBuilder.Entity<HIS_BLOOD_RH>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_BLOOD_RH)
                .HasForeignKey(e => e.BLOOD_RH_ID);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .Property(e => e.ELEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_ANTICIPATE_BLTY)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_BID_BLOOD_TYPE)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_BLOOD)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_BLOOD_TYPE1)
                .WithOptional(e => e.HIS_BLOOD_TYPE2)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_BLTY_SERVICE)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_BLTY_VOLUME)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_EXP_BLTY_SERVICE)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST_BLTY_REQ)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_MEDI_STOCK_BLTY)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_TYPE>()
                .HasMany(e => e.HIS_MEST_PERIOD_BLTY)
                .WithRequired(e => e.HIS_BLOOD_TYPE)
                .HasForeignKey(e => e.BLOOD_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .HasMany(e => e.HIS_BLOOD_GIVER)
                .WithOptional(e => e.HIS_BLOOD_VOLUME)
                .HasForeignKey(e => e.BLOOD_VOLUME_ID);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .HasMany(e => e.HIS_BLOOD_TYPE)
                .WithRequired(e => e.HIS_BLOOD_VOLUME)
                .HasForeignKey(e => e.BLOOD_VOLUME_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLOOD_VOLUME>()
                .HasMany(e => e.HIS_BLTY_VOLUME)
                .WithRequired(e => e.HIS_BLOOD_VOLUME)
                .HasForeignKey(e => e.BLOOD_VOLUME_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BLTY_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_VOLUME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_VOLUME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_VOLUME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_VOLUME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BLTY_VOLUME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BODY_PART>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BODY_PART>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BODY_PART>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BODY_PART>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BODY_PART>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BODY_PART>()
                .Property(e => e.BODY_PART_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BODY_PART>()
                .Property(e => e.BODY_PART_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BODY_PART>()
                .HasMany(e => e.HIS_SERE_SERV_FILE)
                .WithOptional(e => e.HIS_BODY_PART)
                .HasForeignKey(e => e.BODY_PART_ID);

            modelBuilder.Entity<HIS_BORN_POSITION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_POSITION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_POSITION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_POSITION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_POSITION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_POSITION>()
                .Property(e => e.BORN_POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_POSITION>()
                .Property(e => e.BORN_POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_POSITION>()
                .HasMany(e => e.HIS_BABY)
                .WithOptional(e => e.HIS_BORN_POSITION)
                .HasForeignKey(e => e.BORN_POSITION_ID);

            modelBuilder.Entity<HIS_BORN_RESULT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_RESULT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_RESULT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_RESULT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_RESULT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_RESULT>()
                .Property(e => e.BORN_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_RESULT>()
                .Property(e => e.BORN_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_RESULT>()
                .HasMany(e => e.HIS_BABY)
                .WithOptional(e => e.HIS_BORN_RESULT)
                .HasForeignKey(e => e.BORN_RESULT_ID);

            modelBuilder.Entity<HIS_BORN_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_TYPE>()
                .Property(e => e.BORN_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_TYPE>()
                .Property(e => e.BORN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BORN_TYPE>()
                .HasMany(e => e.HIS_BABY)
                .WithOptional(e => e.HIS_BORN_TYPE)
                .HasForeignKey(e => e.BORN_TYPE_ID);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.ACCEPT_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.PARENT_ORGANIZATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.HEIN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.HEIN_LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.LOGO_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.REPRESENTATIVE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.POSITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.AUTH_LETTER_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.BANK_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.THE_BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.SYS_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.REPRESENTATIVE_HEIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .Property(e => e.DO_NOT_ALLOW_HEIN_LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_APPOINTMENT_PERIOD)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_BRANCH_TIME)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_DEATH_CERT_BOOK)
                .WithOptional(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_DEPARTMENT)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_FINANCE_PERIOD)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_SERVICE_HEIN)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_SERVICE_PATY)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_VACCINATION_EXAM)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH>()
                .HasMany(e => e.HIS_VITAMIN_A)
                .WithRequired(e => e.HIS_BRANCH)
                .HasForeignKey(e => e.BRANCH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_BRANCH_TIME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH_TIME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH_TIME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH_TIME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH_TIME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH_TIME>()
                .Property(e => e.FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_BRANCH_TIME>()
                .Property(e => e.TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CACHE_MONITOR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CACHE_MONITOR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CACHE_MONITOR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CACHE_MONITOR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CACHE_MONITOR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CACHE_MONITOR>()
                .Property(e => e.DATA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CANCEL_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CANCEL_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CANCEL_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CANCEL_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CANCEL_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CANCEL_REASON>()
                .Property(e => e.CANCEL_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CANCEL_REASON>()
                .Property(e => e.CANCEL_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CANCEL_REASON>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_CANCEL_REASON)
                .HasForeignKey(e => e.CANCEL_REASON_ID);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.CARD_MAC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .Property(e => e.BANK_CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARD>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_CARD)
                .HasForeignKey(e => e.CARD_ID);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.MUCOCUTANEOUS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.URINE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.DEJECTA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.SANITARY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.EDUCATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.AWARENESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.INSTRUCTION_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.CARE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.OTHER_CARE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .Property(e => e.EVALUTE_CARE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE>()
                .HasMany(e => e.HIS_CARE_DETAIL)
                .WithRequired(e => e.HIS_CARE)
                .HasForeignKey(e => e.CARE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CARE>()
                .HasMany(e => e.HIS_DHST1)
                .WithOptional(e => e.HIS_CARE1)
                .HasForeignKey(e => e.CARE_ID);

            modelBuilder.Entity<HIS_CARE_DETAIL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_DETAIL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_DETAIL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_DETAIL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_DETAIL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_DETAIL>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_SUM>()
                .HasMany(e => e.HIS_CARE)
                .WithOptional(e => e.HIS_CARE_SUM)
                .HasForeignKey(e => e.CARE_SUM_ID);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.MUCOCUTANEOUS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.URINE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.DEJECTA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.SANITARY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.EDUCATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.AWARENESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.INSTRUCTION_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.CARE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.CARE_TEMP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.CARE_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.OTHER_CARE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .Property(e => e.EVALUTE_CARE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP>()
                .HasMany(e => e.HIS_CARE_TEMP_DETAIL)
                .WithRequired(e => e.HIS_CARE_TEMP)
                .HasForeignKey(e => e.CARE_TEMP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CARE_TEMP_DETAIL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP_DETAIL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP_DETAIL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP_DETAIL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP_DETAIL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TEMP_DETAIL>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .Property(e => e.CARE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .Property(e => e.CARE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .HasMany(e => e.HIS_CARE_DETAIL)
                .WithRequired(e => e.HIS_CARE_TYPE)
                .HasForeignKey(e => e.CARE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CARE_TYPE>()
                .HasMany(e => e.HIS_CARE_TEMP_DETAIL)
                .WithRequired(e => e.HIS_CARE_TYPE)
                .HasForeignKey(e => e.CARE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CAREER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CAREER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CAREER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CAREER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CAREER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CAREER>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CAREER>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CAREER>()
                .HasMany(e => e.HIS_APPOINTMENT)
                .WithOptional(e => e.HIS_CAREER)
                .HasForeignKey(e => e.CAREER_ID);

            modelBuilder.Entity<HIS_CAREER>()
                .HasMany(e => e.HIS_BHYT_WHITELIST)
                .WithOptional(e => e.HIS_CAREER)
                .HasForeignKey(e => e.CAREER_ID);

            modelBuilder.Entity<HIS_CAREER>()
                .HasMany(e => e.HIS_BLOOD_GIVER)
                .WithOptional(e => e.HIS_CAREER)
                .HasForeignKey(e => e.CAREER_ID);

            modelBuilder.Entity<HIS_CAREER>()
                .HasMany(e => e.HIS_PATIENT)
                .WithOptional(e => e.HIS_CAREER)
                .HasForeignKey(e => e.CAREER_ID);

            modelBuilder.Entity<HIS_CARER_CARD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD>()
                .Property(e => e.CARER_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD>()
                .HasMany(e => e.HIS_CARER_CARD_BORROW)
                .WithRequired(e => e.HIS_CARER_CARD)
                .HasForeignKey(e => e.CARER_CARD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.GIVING_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.GIVING_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.RECEIVING_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .Property(e => e.RECEIVING_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARER_CARD_BORROW>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_CARER_CARD_BORROW)
                .HasForeignKey(e => e.CARER_CARD_BORROW_ID);

            modelBuilder.Entity<HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_DEPARTMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_DEPARTMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_DEPARTMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_DEPARTMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CARO_DEPARTMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.INSTR_TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.INSTR_TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.EINVOICE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .Property(e => e.EINVOICE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .HasMany(e => e.HIS_CARO_ACCOUNT_BOOK)
                .WithRequired(e => e.HIS_CASHIER_ROOM)
                .HasForeignKey(e => e.CASHIER_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .HasMany(e => e.HIS_CARO_DEPARTMENT)
                .WithRequired(e => e.HIS_CASHIER_ROOM)
                .HasForeignKey(e => e.CASHIER_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .HasMany(e => e.HIS_CASHIER_ADD_CONFIG)
                .WithRequired(e => e.HIS_CASHIER_ROOM)
                .HasForeignKey(e => e.CASHIER_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_CASHIER_ROOM)
                .HasForeignKey(e => e.CASHIER_ROOM_ID);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .HasMany(e => e.HIS_HEIN_APPROVAL)
                .WithRequired(e => e.HIS_CASHIER_ROOM)
                .HasForeignKey(e => e.CASHIER_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .HasMany(e => e.HIS_ROOM1)
                .WithOptional(e => e.HIS_CASHIER_ROOM1)
                .HasForeignKey(e => e.DEFAULT_CASHIER_ROOM_ID);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_CASHIER_ROOM)
                .HasForeignKey(e => e.CANCEL_CASHIER_ROOM_ID);

            modelBuilder.Entity<HIS_CASHIER_ROOM>()
                .HasMany(e => e.HIS_TRANSACTION1)
                .WithRequired(e => e.HIS_CASHIER_ROOM1)
                .HasForeignKey(e => e.CASHIER_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CASHOUT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHOUT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHOUT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHOUT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHOUT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHOUT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHOUT>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CASHOUT>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_CASHOUT>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_CASHOUT)
                .HasForeignKey(e => e.CASHOUT_ID);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .Property(e => e.COTREATMENT_REQUEST)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CO_TREATMENT>()
                .HasMany(e => e.HIS_TREATMENT_BED_ROOM)
                .WithOptional(e => e.HIS_CO_TREATMENT)
                .HasForeignKey(e => e.CO_TREATMENT_ID);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.KEY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.VALUE_BK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.DEFAULT_VALUE_BK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.DESCRIPTION_BK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.MODULE_LINKS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.CONFIG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG>()
                .Property(e => e.CONFIG_GROUP_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG_GROUP>()
                .Property(e => e.CONFIG_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG_GROUP>()
                .Property(e => e.CONFIG_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONFIG_GROUP>()
                .Property(e => e.ROLE_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT>()
                .Property(e => e.CONTACT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.VIR_FULL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.CONTACT_POINT_OTHER_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .HasMany(e => e.HIS_CONTACT)
                .WithRequired(e => e.HIS_CONTACT_POINT)
                .HasForeignKey(e => e.CONTACT_POINT1_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CONTACT_POINT>()
                .HasMany(e => e.HIS_CONTACT1)
                .WithRequired(e => e.HIS_CONTACT_POINT1)
                .HasForeignKey(e => e.CONTACT_POINT2_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_CONTRAINDICATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTRAINDICATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTRAINDICATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTRAINDICATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTRAINDICATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTRAINDICATION>()
                .Property(e => e.CONTRAINDICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_CONTRAINDICATION>()
                .Property(e => e.CONTRAINDICATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.DATA_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.DATA_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.TREATMENT_END_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .Property(e => e.TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .HasMany(e => e.HIS_DATA_STORE1)
                .WithOptional(e => e.HIS_DATA_STORE2)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .HasMany(e => e.HIS_MEDI_RECORD)
                .WithOptional(e => e.HIS_DATA_STORE)
                .HasForeignKey(e => e.DATA_STORE_ID);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .HasMany(e => e.HIS_PROGRAM)
                .WithOptional(e => e.HIS_DATA_STORE)
                .HasForeignKey(e => e.DATA_STORE_ID);

            modelBuilder.Entity<HIS_DATA_STORE>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_DATA_STORE)
                .HasForeignKey(e => e.DATA_STORE_ID);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.ERRM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DB_LOG>()
                .Property(e => e.VIR_CREATE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_DEATH_CAUSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CAUSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CAUSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CAUSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CAUSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CAUSE>()
                .Property(e => e.DEATH_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CAUSE>()
                .Property(e => e.DEATH_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .Property(e => e.DEATH_CERT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .Property(e => e.DEATH_CERT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_CERT_BOOK>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_DEATH_CERT_BOOK)
                .HasForeignKey(e => e.DEATH_CERT_BOOK_ID);

            modelBuilder.Entity<HIS_DEATH_WITHIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_WITHIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_WITHIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_WITHIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_WITHIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_WITHIN>()
                .Property(e => e.DEATH_WITHIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_WITHIN>()
                .Property(e => e.DEATH_WITHIN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEATH_WITHIN>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_DEATH_WITHIN)
                .HasForeignKey(e => e.DEATH_WITHIN_ID);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.TREATMENT_TRACKING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.LOCATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.REQUEST_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.HOSPITALIZATION_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.BEFORE_DIAGNOSTIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.DIAGNOSTIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.CARE_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.DISCUSSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.MEDICINE_TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.SUBCLINICAL_PROCESSES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.INTERNAL_MEDICINE_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.PROGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.PTTT_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.MEDICINE_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.ACTIVE_INGREDIENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .Property(e => e.TMP_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .HasMany(e => e.HIS_DEBATE_EKIP_USER)
                .WithRequired(e => e.HIS_DEBATE)
                .HasForeignKey(e => e.DEBATE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .HasMany(e => e.HIS_DEBATE_INVITE_USER)
                .WithRequired(e => e.HIS_DEBATE)
                .HasForeignKey(e => e.DEBATE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEBATE>()
                .HasMany(e => e.HIS_DEBATE_USER)
                .WithOptional(e => e.HIS_DEBATE)
                .HasForeignKey(e => e.DEBATE_ID);

            modelBuilder.Entity<HIS_DEBATE_EKIP_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_EKIP_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_EKIP_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_EKIP_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_EKIP_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_EKIP_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_EKIP_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_EKIP_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.COMMENT_DOCTOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_INVITE_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_REASON>()
                .Property(e => e.DEBATE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_REASON>()
                .Property(e => e.DEBATE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_REASON>()
                .HasMany(e => e.HIS_DEBATE)
                .WithOptional(e => e.HIS_DEBATE_REASON)
                .HasForeignKey(e => e.DEBATE_REASON_ID);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.DEBATE_TEMP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.DEBATE_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.TREATMENT_TRACKING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.LOCATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.REQUEST_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.HOSPITALIZATION_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.BEFORE_DIAGNOSTIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.DIAGNOSTIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.CARE_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.DISCUSSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.MEDICINE_TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .Property(e => e.MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .HasMany(e => e.HIS_DEBATE_INVITE_USER)
                .WithOptional(e => e.HIS_DEBATE_TEMP)
                .HasForeignKey(e => e.DEBATE_TEMP_ID);

            modelBuilder.Entity<HIS_DEBATE_TEMP>()
                .HasMany(e => e.HIS_DEBATE_USER)
                .WithOptional(e => e.HIS_DEBATE_TEMP)
                .HasForeignKey(e => e.DEBATE_TEMP_ID);

            modelBuilder.Entity<HIS_DEBATE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TYPE>()
                .Property(e => e.DEBATE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TYPE>()
                .Property(e => e.DEBATE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_TYPE>()
                .HasMany(e => e.HIS_DEBATE)
                .WithOptional(e => e.HIS_DEBATE_TYPE)
                .HasForeignKey(e => e.DEBATE_TYPE_ID);

            modelBuilder.Entity<HIS_DEBATE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBATE_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.GOODS_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.GOODS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEBT_GOODS>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.ALLOW_ASSIGN_PACKAGE_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.ALLOW_TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .Property(e => e.ACCEPTED_ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.EXECUTE_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_ALERT)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_ANTIBIOTIC_REQUEST)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_ANTICIPATE)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_AREA)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_CARE)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.EXECUTE_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_CARE_SUM)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_CARO_DEPARTMENT)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_CO_TREATMENT)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_DATA_STORE)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.STORED_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_DEBATE)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_DEBATE_EKIP_USER)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_DEBATE_TEMP)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_DEPARTMENT_TRAN)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_DEPOSIT_REQ)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_DHST)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.EXECUTE_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_EKIP_TEMP)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_EKIP_TEMP_USER)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_EKIP_USER)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_EMPLOYEE)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_EMR_COVER_CONFIG)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQ_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQ_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_IMP_MEST_PROPOSE)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.PROPOSE_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_INFUSION_SUM)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_KSK_CONTRACT)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_MEDI_REACT_SUM)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_MEDI_RECORD_BORROW)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_MEDI_RECORD)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.END_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_MEDICINE_INTERACTIVE)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_MEST_MATY_DEPA)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_MEST_METY_DEPA)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_MR_CHECK_SUMMARY)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_OBEY_CONTRAINDI)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_PTTT_CALENDAR)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_RATION_SUM)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_REGISTER_GATE)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_REJECT_ALERT)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_ROOM)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REVENUE_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_SERVICE_REQ1)
                .WithRequired(e => e.HIS_DEPARTMENT1)
                .HasForeignKey(e => e.EXECUTE_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_SEVERE_ILLNESS_INFO)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TEXT_LIB)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TRACKING)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TRACKING_TEMP)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TRANSFUSION_SUM)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TREATMENT_BORROW)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.FEE_LOCK_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TREATMENT1)
                .WithOptional(e => e.HIS_DEPARTMENT1)
                .HasForeignKey(e => e.IN_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TREATMENT2)
                .WithOptional(e => e.HIS_DEPARTMENT2)
                .HasForeignKey(e => e.HOSPITALIZE_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TREATMENT3)
                .WithOptional(e => e.HIS_DEPARTMENT3)
                .HasForeignKey(e => e.EXIT_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_TREATMENT4)
                .WithOptional(e => e.HIS_DEPARTMENT4)
                .HasForeignKey(e => e.END_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_VACCINATION_EXAM)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_VACCINATION_EXAM1)
                .WithRequired(e => e.HIS_DEPARTMENT1)
                .HasForeignKey(e => e.EXECUTE_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_VACCINATION_EXAM2)
                .WithOptional(e => e.HIS_DEPARTMENT2)
                .HasForeignKey(e => e.SPECIALIST_DEPARTMENT_ID);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_VACCINATION1)
                .WithRequired(e => e.HIS_DEPARTMENT1)
                .HasForeignKey(e => e.EXECUTE_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_VITAMIN_A)
                .WithRequired(e => e.HIS_DEPARTMENT)
                .HasForeignKey(e => e.REQUEST_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT>()
                .HasMany(e => e.HIS_VITAMIN_A1)
                .WithRequired(e => e.HIS_DEPARTMENT1)
                .HasForeignKey(e => e.EXECUTE_DEPARTMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .HasMany(e => e.HIS_CO_TREATMENT)
                .WithRequired(e => e.HIS_DEPARTMENT_TRAN)
                .HasForeignKey(e => e.DEPARTMENT_TRAN_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .HasMany(e => e.HIS_DEPARTMENT_TRAN1)
                .WithOptional(e => e.HIS_DEPARTMENT_TRAN2)
                .HasForeignKey(e => e.PREVIOUS_ID);

            modelBuilder.Entity<HIS_DEPARTMENT_TRAN>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ALTER)
                .WithRequired(e => e.HIS_DEPARTMENT_TRAN)
                .HasForeignKey(e => e.DEPARTMENT_TRAN_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DEPOSIT_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REASON>()
                .Property(e => e.DEPOSIT_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REASON>()
                .Property(e => e.DEPOSIT_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REASON>()
                .Property(e => e.ABBREVIATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.DEPOSIT_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DEPOSIT_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DESK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DESK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DESK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DESK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DESK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DESK>()
                .Property(e => e.DESK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DESK>()
                .Property(e => e.DESK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DESK>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_DESK)
                .HasForeignKey(e => e.EXE_DESK_ID);

            modelBuilder.Entity<HIS_DESK>()
                .HasMany(e => e.HIS_SUBCLINICAL_RS_ADD)
                .WithOptional(e => e.HIS_DESK)
                .HasForeignKey(e => e.RESULT_DESK_ID);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.BREATH_RATE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.CHEST)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.BELLY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.VIR_BMI)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.VIR_BODY_SURFACE_AREA)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.SPO2)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.CAPILLARY_BLOOD_GLUCOSE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DHST>()
                .Property(e => e.URINE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_DHST>()
                .HasMany(e => e.HIS_ANTIBIOTIC_REQUEST)
                .WithRequired(e => e.HIS_DHST)
                .HasForeignKey(e => e.DHST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DHST>()
                .HasMany(e => e.HIS_CARE)
                .WithOptional(e => e.HIS_DHST)
                .HasForeignKey(e => e.DHST_ID);

            modelBuilder.Entity<HIS_DHST>()
                .HasMany(e => e.HIS_KSK_GENERAL)
                .WithOptional(e => e.HIS_DHST)
                .HasForeignKey(e => e.DHST_ID);

            modelBuilder.Entity<HIS_DHST>()
                .HasMany(e => e.HIS_KSK_OCCUPATIONAL)
                .WithOptional(e => e.HIS_DHST)
                .HasForeignKey(e => e.DHST_ID);

            modelBuilder.Entity<HIS_DHST>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_DHST)
                .HasForeignKey(e => e.DHST_ID);

            modelBuilder.Entity<HIS_DIIM_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DIIM_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DIIM_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DIIM_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DIIM_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DIIM_TYPE>()
                .Property(e => e.DIIM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DIIM_TYPE>()
                .Property(e => e.DIIM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DIIM_TYPE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_DIIM_TYPE)
                .HasForeignKey(e => e.DIIM_TYPE_ID);

            modelBuilder.Entity<HIS_DISEASE_RELATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_RELATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_RELATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_RELATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_RELATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_RELATION>()
                .Property(e => e.DISEASE_RELATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_RELATION>()
                .Property(e => e.DISEASE_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_RELATION>()
                .HasMany(e => e.HIS_EXAM_SERE_DIRE)
                .WithRequired(e => e.HIS_DISEASE_RELATION)
                .HasForeignKey(e => e.DISEASE_RELATION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DISEASE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_TYPE>()
                .Property(e => e.DISEASE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_TYPE>()
                .Property(e => e.DISEASE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISEASE_TYPE>()
                .HasMany(e => e.HIS_PERIOD_DRIVER_DITY)
                .WithRequired(e => e.HIS_DISEASE_TYPE)
                .HasForeignKey(e => e.DISEASE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DISPENSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE>()
                .Property(e => e.DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_DISPENSE)
                .HasForeignKey(e => e.DISPENSE_ID);

            modelBuilder.Entity<HIS_DISPENSE>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithOptional(e => e.HIS_DISPENSE)
                .HasForeignKey(e => e.DISPENSE_ID);

            modelBuilder.Entity<HIS_DISPENSE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE_TYPE>()
                .Property(e => e.DISPENSE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE_TYPE>()
                .Property(e => e.DISPENSE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DISPENSE_TYPE>()
                .HasMany(e => e.HIS_DISPENSE)
                .WithRequired(e => e.HIS_DISPENSE_TYPE)
                .HasForeignKey(e => e.DISPENSE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_DOC_HOLD_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOC_HOLD_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOC_HOLD_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOC_HOLD_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOC_HOLD_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOC_HOLD_TYPE>()
                .Property(e => e.DOC_HOLD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOC_HOLD_TYPE>()
                .Property(e => e.DOC_HOLD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOCUMENT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOCUMENT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOCUMENT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOCUMENT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOCUMENT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOCUMENT_BOOK>()
                .Property(e => e.DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOCUMENT_BOOK>()
                .Property(e => e.DOCUMENT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOCUMENT_BOOK>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_DOCUMENT_BOOK)
                .HasForeignKey(e => e.DOCUMENT_BOOK_ID);

            modelBuilder.Entity<HIS_DOSAGE_FORM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOSAGE_FORM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOSAGE_FORM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOSAGE_FORM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOSAGE_FORM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOSAGE_FORM>()
                .Property(e => e.DOSAGE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DOSAGE_FORM>()
                .Property(e => e.DOSAGE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DRUG_INTERVENTION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DRUG_INTERVENTION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DRUG_INTERVENTION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DRUG_INTERVENTION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DRUG_INTERVENTION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DRUG_INTERVENTION>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DRUG_INTERVENTION>()
                .Property(e => e.PHARMACIST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_DRUG_INTERVENTION>()
                .Property(e => e.PHARMACIST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.EINVOICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.EINVOICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EINVOICE_TYPE>()
                .HasMany(e => e.HIS_ACCOUNT_BOOK)
                .WithOptional(e => e.HIS_EINVOICE_TYPE)
                .HasForeignKey(e => e.EINVOICE_TYPE_ID);

            modelBuilder.Entity<HIS_EKIP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP>()
                .HasMany(e => e.HIS_EKIP_USER)
                .WithRequired(e => e.HIS_EKIP)
                .HasForeignKey(e => e.EKIP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EKIP>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithOptional(e => e.HIS_EKIP)
                .HasForeignKey(e => e.EKIP_ID);

            modelBuilder.Entity<HIS_EKIP>()
                .HasMany(e => e.HIS_SESE_PTTT_METHOD)
                .WithOptional(e => e.HIS_EKIP)
                .HasForeignKey(e => e.EKIP_ID);

            modelBuilder.Entity<HIS_EKIP_PLAN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN>()
                .HasMany(e => e.HIS_EKIP_PLAN_USER)
                .WithRequired(e => e.HIS_EKIP_PLAN)
                .HasForeignKey(e => e.EKIP_PLAN_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EKIP_PLAN>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_EKIP_PLAN)
                .HasForeignKey(e => e.EKIP_PLAN_ID);

            modelBuilder.Entity<HIS_EKIP_PLAN_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_PLAN_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP>()
                .Property(e => e.EKIP_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP>()
                .HasMany(e => e.HIS_EKIP_TEMP_USER)
                .WithRequired(e => e.HIS_EKIP_TEMP)
                .HasForeignKey(e => e.EKIP_TEMP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EKIP_TEMP_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_TEMP_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EKIP_USER>()
                .Property(e => e.REMUNERATION_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EMERGENCY_WTIME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMERGENCY_WTIME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMERGENCY_WTIME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMERGENCY_WTIME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMERGENCY_WTIME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMERGENCY_WTIME>()
                .Property(e => e.EMERGENCY_WTIME_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMERGENCY_WTIME>()
                .Property(e => e.EMERGENCY_WTIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .Property(e => e.EMOTIONLESS_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .Property(e => e.EMOTIONLESS_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .Property(e => e.HEIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .HasMany(e => e.HIS_DEBATE)
                .WithOptional(e => e.HIS_EMOTIONLESS_METHOD)
                .HasForeignKey(e => e.EMOTIONLESS_METHOD_ID);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_EMOTIONLESS_METHOD)
                .HasForeignKey(e => e.EMOTIONLESS_METHOD_ID);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT1)
                .WithOptional(e => e.HIS_EMOTIONLESS_METHOD1)
                .HasForeignKey(e => e.EMOTIONLESS_METHOD_SECOND_ID);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_EMOTIONLESS_METHOD)
                .HasForeignKey(e => e.EMOTIONLESS_METHOD_ID);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP1)
                .WithOptional(e => e.HIS_EMOTIONLESS_METHOD1)
                .HasForeignKey(e => e.EMOTIONLESS_METHOD_SECOND_ID);

            modelBuilder.Entity<HIS_EMOTIONLESS_METHOD>()
                .HasMany(e => e.HIS_SURG_REMUNERATION)
                .WithOptional(e => e.HIS_EMOTIONLESS_METHOD)
                .HasForeignKey(e => e.EMOTIONLESS_METHOD_ID);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .Property(e => e.EMOTIONLESS_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .Property(e => e.EMOTIONLESS_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_EMOTIONLESS_RESULT)
                .HasForeignKey(e => e.EMOTIONLESS_RESULT_ID);

            modelBuilder.Entity<HIS_EMOTIONLESS_RESULT>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_EMOTIONLESS_RESULT)
                .HasForeignKey(e => e.EMOTIONLESS_RESULT_ID);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.DIPLOMA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.BANK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.DEFAULT_MEDI_STOCK_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.ERX_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.ERX_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.TDL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.TDL_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.TDL_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.DIPLOMA_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.IDENTIFICATION_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.SPECIALITY_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .Property(e => e.MEDI_ORG_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .HasMany(e => e.HIS_CONTACT_POINT)
                .WithOptional(e => e.HIS_EMPLOYEE)
                .HasForeignKey(e => e.EMPLOYEE_ID);

            modelBuilder.Entity<HIS_EMPLOYEE>()
                .HasMany(e => e.HIS_KSK_ACCESS)
                .WithRequired(e => e.HIS_EMPLOYEE)
                .HasForeignKey(e => e.EMPLOYEE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.VIR_SCHEDULE_TIME_FROM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_EMPLOYEE_SCHEDULE>()
                .Property(e => e.VIR_SCHEDULE_TIME_TO)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_EMR_COVER_CONFIG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_CONFIG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_CONFIG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_CONFIG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_CONFIG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .Property(e => e.EMR_COVER_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .Property(e => e.EMR_COVER_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .HasMany(e => e.HIS_EMR_COVER_CONFIG)
                .WithRequired(e => e.HIS_EMR_COVER_TYPE)
                .HasForeignKey(e => e.EMR_COVER_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .HasMany(e => e.HIS_MEDI_RECORD)
                .WithOptional(e => e.HIS_EMR_COVER_TYPE)
                .HasForeignKey(e => e.EMR_COVER_TYPE_ID);

            modelBuilder.Entity<HIS_EMR_COVER_TYPE>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_EMR_COVER_TYPE)
                .HasForeignKey(e => e.EMR_COVER_TYPE_ID);

            modelBuilder.Entity<HIS_EMR_DOCUMENT_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_DOCUMENT_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_DOCUMENT_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_DOCUMENT_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_DOCUMENT_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_DOCUMENT_STT>()
                .Property(e => e.EMR_DOCUMENT_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_DOCUMENT_STT>()
                .Property(e => e.EMR_DOCUMENT_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_DOCUMENT_STT>()
                .HasMany(e => e.HIS_TRACKING)
                .WithOptional(e => e.HIS_EMR_DOCUMENT_STT)
                .HasForeignKey(e => e.EMR_DOCUMENT_STT_ID);

            modelBuilder.Entity<HIS_EMR_FORM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_FORM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_FORM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_FORM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_FORM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_FORM>()
                .Property(e => e.EMR_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMR_FORM>()
                .Property(e => e.EMR_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .Property(e => e.EQUIPMENT_SET_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .Property(e => e.EQUIPMENT_SET_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .Property(e => e.HEIN_SET_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .HasMany(e => e.HIS_EQUIPMENT_SET_MATY)
                .WithRequired(e => e.HIS_EQUIPMENT_SET)
                .HasForeignKey(e => e.EQUIPMENT_SET_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_EQUIPMENT_SET)
                .HasForeignKey(e => e.EQUIPMENT_SET_ID);

            modelBuilder.Entity<HIS_EQUIPMENT_SET>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithOptional(e => e.HIS_EQUIPMENT_SET)
                .HasForeignKey(e => e.EQUIPMENT_SET_ID);

            modelBuilder.Entity<HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.EXTERNAL_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EVENTS_CAUSES_DEATH>()
                .Property(e => e.CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SCHEDULE>()
                .Property(e => e.TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERE_DIRE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERE_DIRE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERE_DIRE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERE_DIRE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERE_DIRE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERE_DIRE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.EXAM_SERVICE_TEMP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.EXAM_SERVICE_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXAM_SERVICE_TEMP>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .Property(e => e.EXE_SERVICE_MODULE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_EXE_SERVICE_MODULE)
                .HasForeignKey(e => e.EXE_SERVICE_MODULE_ID);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_EXE_SERVICE_MODULE)
                .HasForeignKey(e => e.EXE_SERVICE_MODULE_ID);

            modelBuilder.Entity<HIS_EXE_SERVICE_MODULE>()
                .HasMany(e => e.HIS_SERVICE_TYPE)
                .WithOptional(e => e.HIS_EXE_SERVICE_MODULE)
                .HasForeignKey(e => e.EXE_SERVICE_MODULE_ID);

            modelBuilder.Entity<HIS_EXECUTE_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_GROUP>()
                .Property(e => e.EXECUTE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_GROUP>()
                .Property(e => e.EXECUTE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_GROUP>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_EXECUTE_GROUP)
                .HasForeignKey(e => e.EXECUTE_GROUP_ID);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_DEBATE_EKIP_USER)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_DEBATE_INVITE_USER)
                .WithOptional(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_DEBATE_USER)
                .WithOptional(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_EKIP_PLAN_USER)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_EKIP_TEMP_USER)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_EXECUTE_ROLE_USER)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_EXP_MEST_USER)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_IMP_MEST_USER)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_IMP_USER_TEMP_DT)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_MEST_INVE_USER)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_REMUNERATION)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_SURG_REMU_DETAIL)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE>()
                .HasMany(e => e.HIS_USER_GROUP_TEMP_DT)
                .WithRequired(e => e.HIS_EXECUTE_ROLE)
                .HasForeignKey(e => e.EXECUTE_ROLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROLE_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .Property(e => e.TEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .HasMany(e => e.HIS_EXRO_ROOM)
                .WithRequired(e => e.HIS_EXECUTE_ROOM)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .HasMany(e => e.HIS_PTTT_TABLE)
                .WithRequired(e => e.HIS_EXECUTE_ROOM)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXECUTE_ROOM>()
                .HasMany(e => e.HIS_SARO_EXRO)
                .WithRequired(e => e.HIS_EXECUTE_ROOM)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXME_REASON_CFG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXME_REASON_CFG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXME_REASON_CFG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXME_REASON_CFG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXME_REASON_CFG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.SERVICE_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.NATIONAL_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.LAST_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.LAST_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TOTAL_SERVICE_ATTACH_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.ERX_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.CONFIRM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.CONFIRM_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.VIR_CREATE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.NOT_TAKEN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.RECIPIENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.RECEIVING_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.VIR_HEIN_CARD_PREFIX)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.GATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_AGGR_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .Property(e => e.TDL_AGGR_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_BLTY_SERVICE)
                .WithRequired(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST_BLOOD)
                .WithRequired(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST_BLTY_REQ)
                .WithRequired(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST1)
                .WithOptional(e => e.HIS_EXP_MEST2)
                .HasForeignKey(e => e.XBTT_EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST11)
                .WithOptional(e => e.HIS_EXP_MEST3)
                .HasForeignKey(e => e.AGGR_EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST_MATY_REQ)
                .WithRequired(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST_METY_REQ)
                .WithRequired(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST_USER)
                .WithRequired(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST1)
                .WithOptional(e => e.HIS_EXP_MEST1)
                .HasForeignKey(e => e.MOBA_EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST2)
                .WithOptional(e => e.HIS_EXP_MEST2)
                .HasForeignKey(e => e.CHMS_EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_SERE_SERV_TEIN)
                .WithOptional(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_TRANSACTION_EXP)
                .WithOptional(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST>()
                .HasMany(e => e.HIS_VITAMIN_A)
                .WithOptional(e => e.HIS_EXP_MEST)
                .HasForeignKey(e => e.EXP_MEST_ID);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PATIENT_BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PATIENT_BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PUC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.TEST_TUBE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.SCANGEL_GELCARD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.COOMBS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.TEST_TUBE_TWO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.AC_SELF_ENVIDENCE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .Property(e => e.AC_SELF_ENVIDENCE_SECOND)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EXP_MEST_BLOOD>()
                .HasMany(e => e.HIS_TRANSFUSION_SUM)
                .WithRequired(e => e.HIS_EXP_MEST_BLOOD)
                .HasForeignKey(e => e.EXP_MEST_BLOOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_EXP_MEST_BLTY_REQ>()
                .HasMany(e => e.HIS_EXP_MEST_BLOOD)
                .WithOptional(e => e.HIS_EXP_MEST_BLTY_REQ)
                .HasForeignKey(e => e.EXP_MEST_BLTY_REQ_ID);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_DELETED>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.FAILED_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXCEED_LIMIT_IN_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXCEED_LIMIT_IN_DAY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .HasMany(e => e.HIS_BCS_MATY_REQ_DT)
                .WithRequired(e => e.HIS_EXP_MEST_MATERIAL)
                .HasForeignKey(e => e.EXP_MEST_MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .HasMany(e => e.HIS_IMP_MEST_MATE_REQ)
                .WithOptional(e => e.HIS_EXP_MEST_MATERIAL)
                .HasForeignKey(e => e.TH_EXP_MEST_MATERIAL_ID);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .HasMany(e => e.HIS_IMP_MEST_MATERIAL1)
                .WithOptional(e => e.HIS_EXP_MEST_MATERIAL1)
                .HasForeignKey(e => e.TH_EXP_MEST_MATERIAL_ID);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .HasMany(e => e.HIS_MATERIAL_BEAN)
                .WithOptional(e => e.HIS_EXP_MEST_MATERIAL)
                .HasForeignKey(e => e.EXP_MEST_MATERIAL_ID);

            modelBuilder.Entity<HIS_EXP_MEST_MATERIAL>()
                .HasMany(e => e.HIS_SERE_SERV1)
                .WithOptional(e => e.HIS_EXP_MEST_MATERIAL1)
                .HasForeignKey(e => e.EXP_MEST_MATERIAL_ID);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .HasMany(e => e.HIS_BCS_MATY_REQ_DT)
                .WithRequired(e => e.HIS_EXP_MEST_MATY_REQ)
                .HasForeignKey(e => e.EXP_MEST_MATY_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .HasMany(e => e.HIS_BCS_MATY_REQ_REQ)
                .WithRequired(e => e.HIS_EXP_MEST_MATY_REQ)
                .HasForeignKey(e => e.EXP_MEST_MATY_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .HasMany(e => e.HIS_BCS_MATY_REQ_REQ1)
                .WithRequired(e => e.HIS_EXP_MEST_MATY_REQ1)
                .HasForeignKey(e => e.PRE_EXP_MEST_MATY_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_MATY_REQ>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_EXP_MEST_MATY_REQ)
                .HasForeignKey(e => e.EXP_MEST_MATY_REQ_ID);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BREATH_SPEED)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BREATH_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TUTORIAL_INFUSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXCEED_LIMIT_IN_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXCEED_LIMIT_IN_DAY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.ODD_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.OVER_RESULT_TEST_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.OVER_KIDNEY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .HasMany(e => e.HIS_BCS_METY_REQ_DT)
                .WithRequired(e => e.HIS_EXP_MEST_MEDICINE)
                .HasForeignKey(e => e.EXP_MEST_MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .HasMany(e => e.HIS_IMP_MEST_MEDI_REQ)
                .WithOptional(e => e.HIS_EXP_MEST_MEDICINE)
                .HasForeignKey(e => e.TH_EXP_MEST_MEDICINE_ID);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .HasMany(e => e.HIS_IMP_MEST_MEDICINE1)
                .WithOptional(e => e.HIS_EXP_MEST_MEDICINE1)
                .HasForeignKey(e => e.TH_EXP_MEST_MEDICINE_ID);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .HasMany(e => e.HIS_MEDICINE_BEAN)
                .WithOptional(e => e.HIS_EXP_MEST_MEDICINE)
                .HasForeignKey(e => e.EXP_MEST_MEDICINE_ID);

            modelBuilder.Entity<HIS_EXP_MEST_MEDICINE>()
                .HasMany(e => e.HIS_SERE_SERV1)
                .WithOptional(e => e.HIS_EXP_MEST_MEDICINE1)
                .HasForeignKey(e => e.EXP_MEST_MEDICINE_ID);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .HasMany(e => e.HIS_BCS_METY_REQ_DT)
                .WithRequired(e => e.HIS_EXP_MEST_METY_REQ)
                .HasForeignKey(e => e.EXP_MEST_METY_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .HasMany(e => e.HIS_BCS_METY_REQ_REQ)
                .WithRequired(e => e.HIS_EXP_MEST_METY_REQ)
                .HasForeignKey(e => e.EXP_MEST_METY_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .HasMany(e => e.HIS_BCS_METY_REQ_REQ1)
                .WithRequired(e => e.HIS_EXP_MEST_METY_REQ1)
                .HasForeignKey(e => e.PRE_EXP_MEST_METY_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_METY_REQ>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_EXP_MEST_METY_REQ)
                .HasForeignKey(e => e.EXP_MEST_METY_REQ_ID);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .Property(e => e.EXP_MEST_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .Property(e => e.EXP_MEST_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .HasMany(e => e.HIS_EXME_REASON_CFG)
                .WithRequired(e => e.HIS_EXP_MEST_REASON)
                .HasForeignKey(e => e.EXP_MEST_REASON_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_REASON>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_EXP_MEST_REASON)
                .HasForeignKey(e => e.EXP_MEST_REASON_ID);

            modelBuilder.Entity<HIS_EXP_MEST_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_STT>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_STT>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_STT>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithRequired(e => e.HIS_EXP_MEST_STT)
                .HasForeignKey(e => e.EXP_MEST_STT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .Property(e => e.EXP_MEST_TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .Property(e => e.EXP_MEST_TEMPLATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .HasMany(e => e.HIS_EMTE_MATERIAL_TYPE)
                .WithRequired(e => e.HIS_EXP_MEST_TEMPLATE)
                .HasForeignKey(e => e.EXP_MEST_TEMPLATE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .HasMany(e => e.HIS_EMTE_MEDICINE_TYPE)
                .WithRequired(e => e.HIS_EXP_MEST_TEMPLATE)
                .HasForeignKey(e => e.EXP_MEST_TEMPLATE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_TEMPLATE>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_EXP_MEST_TEMPLATE)
                .HasForeignKey(e => e.EXP_MEST_TEMPLATE_ID);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithRequired(e => e.HIS_EXP_MEST_TYPE)
                .HasForeignKey(e => e.EXP_MEST_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_TYPE>()
                .HasMany(e => e.HIS_MEDI_STOCK_EXTY)
                .WithRequired(e => e.HIS_EXP_MEST_TYPE)
                .HasForeignKey(e => e.EXP_MEST_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_EXP_MEST_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXP_MEST_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXPIRED_DATE_CFG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXPIRED_DATE_CFG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXPIRED_DATE_CFG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXPIRED_DATE_CFG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXPIRED_DATE_CFG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXPIRED_DATE_CFG>()
                .Property(e => e.EXPIRED_DAY_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EXRO_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXRO_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXRO_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXRO_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EXRO_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.NGUYEN_NHAN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.THUOC_TE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.TAO_VAT_KM_KINH_TUYEN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.UC_CHE_TAO_XO_TT_BS_KHAC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.UC_CHE_TAO_XO_THOIGIAN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.VAT_CM_HINHDANG)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.VAT_CM_KICHTHUOC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.KHAU_NAP_CM_SO_MUI)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.KHAU_NAP_CM_LOAICHI)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.KHAU_KM_SOMUI)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.KHAU_KM_LOAICHI_BS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.MO_KM_RIA_KINH_TUYEN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.MO_VAO_TP_KINH_TUYEN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.MO_VAO_TP_KICH_THUOC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.TAN_NHAN_NANG_LUONG)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.TAN_NHAN_LUC_HUT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.TAN_NHAN_TOC_DO_DC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.RACH_BAO_SAU_VI_TRI)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.RACH_BAO_SAU_KICH_THUOC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.CAT_MONG_MAT_NGOAI_VI_VITRI)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.LAY_MANH_KM_SAT_RIA_KT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.LAY_MANH_MANG_OI_KT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.KHAU_MANH_GHEP_CHI_SO_MUI)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.KHAU_KM_CHE_PHAN_CAT_KM_SO_MUI)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.XU_TRI_BIEN_CHUNG)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.TIEM_MAT_THUOC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.TRA_MAT_THUOC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.TRA_MAT_BANG_TT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.DIEN_BIEN_KHAC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.THUOC_TE_TAI_CHO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.KHAU_DA_MI_TAO_MI_CHI)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.CHI_NOI_2_DAU_LE_QUAN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.NYLON_CO_DINH_ONG_SILICON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.LASER_YAG_NANG_LUONG_KHAC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .Property(e => e.VI_TRI_CAT_MONG_CHU_BIEN)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_EYE_SURGRY_DESC>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_EYE_SURGRY_DESC)
                .HasForeignKey(e => e.EYE_SURGRY_DESC_ID);

            modelBuilder.Entity<HIS_FILE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILE_TYPE>()
                .Property(e => e.FILE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILE_TYPE>()
                .Property(e => e.FILE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILE_TYPE>()
                .HasMany(e => e.HIS_TREATMENT_FILE)
                .WithRequired(e => e.HIS_FILE_TYPE)
                .HasForeignKey(e => e.FILE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .Property(e => e.FILM_SIZE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .Property(e => e.FILM_SIZE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .HasMany(e => e.HIS_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_FILM_SIZE)
                .HasForeignKey(e => e.FILM_SIZE_ID);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .HasMany(e => e.HIS_SERE_SERV_EXT)
                .WithOptional(e => e.HIS_FILM_SIZE)
                .HasForeignKey(e => e.FILM_SIZE_ID);

            modelBuilder.Entity<HIS_FILM_SIZE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_FILM_SIZE)
                .HasForeignKey(e => e.FILM_SIZE_ID);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_DEPOSIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_BILL_EXEMPTION)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_FINANCE_PERIOD>()
                .HasMany(e => e.HIS_FINANCE_PERIOD1)
                .WithOptional(e => e.HIS_FINANCE_PERIOD2)
                .HasForeignKey(e => e.PREVIOUS_ID);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG>()
                .Property(e => e.FORM_TYPE_CFG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG>()
                .HasMany(e => e.HIS_FORM_TYPE_CFG_DATA)
                .WithRequired(e => e.HIS_FORM_TYPE_CFG)
                .HasForeignKey(e => e.FORM_TYPE_CFG_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.FORM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUEX_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUEX_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUEX_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUEX_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUEX_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUEX_TYPE>()
                .Property(e => e.FUEX_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUEX_TYPE>()
                .Property(e => e.FUEX_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUEX_TYPE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_FUEX_TYPE)
                .HasForeignKey(e => e.FUEX_TYPE_ID);

            modelBuilder.Entity<HIS_FUND>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUND>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUND>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUND>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUND>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUND>()
                .Property(e => e.FUND_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUND>()
                .Property(e => e.FUND_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_FUND>()
                .HasMany(e => e.HIS_BILL_FUND)
                .WithRequired(e => e.HIS_FUND)
                .HasForeignKey(e => e.FUND_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_FUND>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_FUND)
                .HasForeignKey(e => e.FUND_ID);

            modelBuilder.Entity<HIS_GENDER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_GENDER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_GENDER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_GENDER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_GENDER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_GENDER>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_GENDER>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_GENDER>()
                .HasMany(e => e.HIS_APPOINTMENT)
                .WithRequired(e => e.HIS_GENDER)
                .HasForeignKey(e => e.GENDER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_GENDER>()
                .HasMany(e => e.HIS_BABY)
                .WithOptional(e => e.HIS_GENDER)
                .HasForeignKey(e => e.GENDER_ID);

            modelBuilder.Entity<HIS_GENDER>()
                .HasMany(e => e.HIS_BLOOD_GIVER)
                .WithOptional(e => e.HIS_GENDER)
                .HasForeignKey(e => e.GENDER_ID);

            modelBuilder.Entity<HIS_GENDER>()
                .HasMany(e => e.HIS_CONTACT_POINT)
                .WithOptional(e => e.HIS_GENDER)
                .HasForeignKey(e => e.GENDER_ID);

            modelBuilder.Entity<HIS_GENDER>()
                .HasMany(e => e.HIS_ICD)
                .WithOptional(e => e.HIS_GENDER)
                .HasForeignKey(e => e.GENDER_ID);

            modelBuilder.Entity<HIS_GENDER>()
                .HasMany(e => e.HIS_PATIENT)
                .WithRequired(e => e.HIS_GENDER)
                .HasForeignKey(e => e.GENDER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_GENDER>()
                .HasMany(e => e.HIS_SERE_SERV_TEMP)
                .WithOptional(e => e.HIS_GENDER)
                .HasForeignKey(e => e.GENDER_ID);

            modelBuilder.Entity<HIS_HEALTH_EXAM_RANK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEALTH_EXAM_RANK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEALTH_EXAM_RANK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEALTH_EXAM_RANK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEALTH_EXAM_RANK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEALTH_EXAM_RANK>()
                .Property(e => e.HEALTH_EXAM_RANK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEALTH_EXAM_RANK>()
                .Property(e => e.HEALTH_EXAM_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEALTH_EXAM_RANK>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_HEALTH_EXAM_RANK)
                .HasForeignKey(e => e.HEALTH_EXAM_RANK_ID);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_APPROVAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.XML_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_APPROVAL>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithOptional(e => e.HIS_HEIN_APPROVAL)
                .HasForeignKey(e => e.HEIN_APPROVAL_ID);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.HEIN_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.HEIN_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .Property(e => e.OLD_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HEIN_SERVICE_TYPE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_HEIN_SERVICE_TYPE)
                .HasForeignKey(e => e.HEIN_SERVICE_TYPE_ID);

            modelBuilder.Entity<HIS_HIV_TREATMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HIV_TREATMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HIV_TREATMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HIV_TREATMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HIV_TREATMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HIV_TREATMENT>()
                .Property(e => e.HIV_PATIENT_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HIV_TREATMENT>()
                .Property(e => e.BEGIN_REGIMEN_HIV_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HIV_TREATMENT>()
                .Property(e => e.REGIMEN_HIV_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.HOLD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.HOLD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.RETURN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.RETURN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOLD_RETURN>()
                .Property(e => e.VIR_UNIQUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_DHTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_DHTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_DHTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_DHTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_DHTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.HORE_HANDOVER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.SEND_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.SEND_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.RECEIVE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER>()
                .Property(e => e.RECEIVE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER_STT>()
                .Property(e => e.HORE_HANDOVER_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER_STT>()
                .Property(e => e.HORE_HANDOVER_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HANDOVER_STT>()
                .HasMany(e => e.HIS_HORE_HANDOVER)
                .WithRequired(e => e.HIS_HORE_HANDOVER_STT)
                .HasForeignKey(e => e.HORE_HANDOVER_STT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_HORE_HOHA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HOHA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HOHA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HOHA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HORE_HOHA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOSPITALIZE_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOSPITALIZE_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOSPITALIZE_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOSPITALIZE_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOSPITALIZE_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOSPITALIZE_REASON>()
                .Property(e => e.HOSPITALIZE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HOSPITALIZE_REASON>()
                .Property(e => e.HOSPITALIZE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HTU>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HTU>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HTU>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HTU>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HTU>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HTU>()
                .Property(e => e.HTU_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HTU>()
                .Property(e => e.HTU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_HTU>()
                .HasMany(e => e.HIS_EMTE_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_HTU)
                .HasForeignKey(e => e.HTU_ID);

            modelBuilder.Entity<HIS_HTU>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_HTU)
                .HasForeignKey(e => e.HTU_ID);

            modelBuilder.Entity<HIS_HTU>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_HTU)
                .HasForeignKey(e => e.HTU_ID);

            modelBuilder.Entity<HIS_HTU>()
                .HasMany(e => e.HIS_MEDICINE_TYPE_TUT)
                .WithOptional(e => e.HIS_HTU)
                .HasForeignKey(e => e.HTU_ID);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.ICD_NAME_EN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.CHAPTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.CHAPTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.CHAPTER_NAME_EN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_NAME_EN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_CODE_1)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_NAME_1)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_NAME_1_EN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_NAME_2)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.SUB_NAME_2_EN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.TYPE_NAME_EN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.BYT_REPORT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.ICD_NAME_COMMON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD>()
                .Property(e => e.ATTACH_ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.ICD_CM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.ICD_CM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.ICD_CM_CHAPTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.ICD_CM_CHAPTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.ICD_CM_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.ICD_CM_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.ICD_CM_SUB_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .Property(e => e.ICD_CM_SUB_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_CM>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_ICD_CM)
                .HasForeignKey(e => e.ICD_CM_ID);

            modelBuilder.Entity<HIS_ICD_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_GROUP>()
                .Property(e => e.ICD_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_GROUP>()
                .Property(e => e.ICD_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_GROUP>()
                .HasMany(e => e.HIS_ICD)
                .WithOptional(e => e.HIS_ICD_GROUP)
                .HasForeignKey(e => e.ICD_GROUP_ID);

            modelBuilder.Entity<HIS_ICD_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_SERVICE>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_SERVICE>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ICD_SERVICE>()
                .Property(e => e.CONTRAINDICATION_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.IMP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.IMP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_CHMS_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_AGGR_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_MOBA_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.DOCUMENT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.DELIVERER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.NATIONAL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.CREDIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.DEBIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.INVOICE_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_BID_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_BID_GROUP_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.TDL_BID_NUMBERS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_BLOOD_GIVER)
                .WithRequired(e => e.HIS_IMP_MEST)
                .HasForeignKey(e => e.IMP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_IMP_MEST)
                .HasForeignKey(e => e.MANU_IMP_MEST_ID);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST_BLOOD)
                .WithRequired(e => e.HIS_IMP_MEST)
                .HasForeignKey(e => e.IMP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST1)
                .WithOptional(e => e.HIS_IMP_MEST2)
                .HasForeignKey(e => e.APPROVAL_IMP_MEST_ID);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST11)
                .WithOptional(e => e.HIS_IMP_MEST3)
                .HasForeignKey(e => e.AGGR_IMP_MEST_ID);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST_MATE_REQ)
                .WithRequired(e => e.HIS_IMP_MEST)
                .HasForeignKey(e => e.IMP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST_MATERIAL)
                .WithRequired(e => e.HIS_IMP_MEST)
                .HasForeignKey(e => e.IMP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST_MEDI_REQ)
                .WithRequired(e => e.HIS_IMP_MEST)
                .HasForeignKey(e => e.IMP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST_MEDICINE)
                .WithRequired(e => e.HIS_IMP_MEST)
                .HasForeignKey(e => e.IMP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST>()
                .HasMany(e => e.HIS_IMP_MEST_USER)
                .WithRequired(e => e.HIS_IMP_MEST)
                .HasForeignKey(e => e.IMP_MEST_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST_BLOOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_BLOOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_BLOOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_BLOOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_BLOOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_BLOOD>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_BLOOD>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_IMP_MEST_BLOOD>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_IMP_MEST_MATE_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATE_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATE_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATE_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATE_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATE_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MATE_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATE_REQ>()
                .Property(e => e.APPROVED_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MATERIAL>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_IMP_MEST_MATERIAL)
                .HasForeignKey(e => e.CK_IMP_MEST_MATERIAL_ID);

            modelBuilder.Entity<HIS_IMP_MEST_MEDI_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDI_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDI_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDI_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDI_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDI_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MEDI_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDI_REQ>()
                .Property(e => e.APPROVED_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_IMP_MEST_MEDICINE>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_IMP_MEST_MEDICINE)
                .HasForeignKey(e => e.CK_IMP_MEST_MEDICINE_ID);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.PAYER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.PAYER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.NEXT_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.STANDING_ORDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PAY>()
                .Property(e => e.PAYSLIP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.IMP_MEST_PROPOSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.PROPOSE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.PROPOSE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithOptional(e => e.HIS_IMP_MEST_PROPOSE)
                .HasForeignKey(e => e.IMP_MEST_PROPOSE_ID);

            modelBuilder.Entity<HIS_IMP_MEST_PROPOSE>()
                .HasMany(e => e.HIS_IMP_MEST_PAY)
                .WithRequired(e => e.HIS_IMP_MEST_PROPOSE)
                .HasForeignKey(e => e.IMP_MEST_PROPOSE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_STT>()
                .Property(e => e.IMP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_STT>()
                .Property(e => e.IMP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .Property(e => e.IMP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .Property(e => e.IMP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithRequired(e => e.HIS_IMP_MEST_TYPE)
                .HasForeignKey(e => e.IMP_MEST_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .HasMany(e => e.HIS_IMP_MEST_TYPE_USER)
                .WithRequired(e => e.HIS_IMP_MEST_TYPE)
                .HasForeignKey(e => e.IMP_MEST_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE>()
                .HasMany(e => e.HIS_MEDI_STOCK_IMTY)
                .WithRequired(e => e.HIS_IMP_MEST_TYPE)
                .HasForeignKey(e => e.IMP_MEST_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_TYPE_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_MEST_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .Property(e => e.IMP_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .Property(e => e.IMP_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .HasMany(e => e.HIS_BLOOD)
                .WithOptional(e => e.HIS_IMP_SOURCE)
                .HasForeignKey(e => e.IMP_SOURCE_ID);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .HasMany(e => e.HIS_MATERIAL)
                .WithOptional(e => e.HIS_IMP_SOURCE)
                .HasForeignKey(e => e.IMP_SOURCE_ID);

            modelBuilder.Entity<HIS_IMP_SOURCE>()
                .HasMany(e => e.HIS_MEDICINE)
                .WithOptional(e => e.HIS_IMP_SOURCE)
                .HasForeignKey(e => e.IMP_SOURCE_ID);

            modelBuilder.Entity<HIS_IMP_USER_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP>()
                .Property(e => e.IMP_USER_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP>()
                .HasMany(e => e.HIS_IMP_USER_TEMP_DT)
                .WithRequired(e => e.HIS_IMP_USER_TEMP)
                .HasForeignKey(e => e.IMP_USER_TEMP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.CONVERT_TIME_RATIO)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.CONVERT_VOLUME_RATIO)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.MIXED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.EMR_DOCUMENT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .Property(e => e.EMR_DOCUMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION>()
                .HasMany(e => e.HIS_MIXED_MEDICINE)
                .WithRequired(e => e.HIS_INFUSION)
                .HasForeignKey(e => e.INFUSION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INFUSION_SUM>()
                .HasMany(e => e.HIS_INFUSION)
                .WithRequired(e => e.HIS_INFUSION_SUM)
                .HasForeignKey(e => e.INFUSION_SUM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_INTERACTIVE_GRADE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INTERACTIVE_GRADE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INTERACTIVE_GRADE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INTERACTIVE_GRADE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INTERACTIVE_GRADE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INTERACTIVE_GRADE>()
                .Property(e => e.INTERACTIVE_GRADE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INTERACTIVE_GRADE>()
                .HasMany(e => e.HIS_ACIN_INTERACTIVE)
                .WithOptional(e => e.HIS_INTERACTIVE_GRADE)
                .HasForeignKey(e => e.INTERACTIVE_GRADE_ID);

            modelBuilder.Entity<HIS_INTERACTIVE_GRADE>()
                .HasMany(e => e.HIS_MEDICINE_INTERACTIVE)
                .WithRequired(e => e.HIS_INTERACTIVE_GRADE)
                .HasForeignKey(e => e.INTERACTIVE_GRADE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.SELLER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.SELLER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.SELLER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.SELLER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.SELLER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.BUYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.BUYER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.BUYER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.BUYER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.CANCEL_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.CANCEL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.CANCEL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.BUYER_ORGANIZATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.VIR_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_INVOICE>()
                .Property(e => e.VIR_UNIQUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .HasMany(e => e.HIS_INVOICE_DETAIL)
                .WithRequired(e => e.HIS_INVOICE)
                .HasForeignKey(e => e.INVOICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_INVOICE>()
                .HasMany(e => e.HIS_INVOICE_PRINT)
                .WithRequired(e => e.HIS_INVOICE)
                .HasForeignKey(e => e.INVOICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .Property(e => e.INVOICE_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .HasMany(e => e.HIS_INVOICE)
                .WithRequired(e => e.HIS_INVOICE_BOOK)
                .HasForeignKey(e => e.INVOICE_BOOK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .HasMany(e => e.HIS_INVOICE_BOOK1)
                .WithOptional(e => e.HIS_INVOICE_BOOK2)
                .HasForeignKey(e => e.LINK_ID);

            modelBuilder.Entity<HIS_INVOICE_BOOK>()
                .HasMany(e => e.HIS_USER_INVOICE_BOOK)
                .WithRequired(e => e.HIS_INVOICE_BOOK)
                .HasForeignKey(e => e.INVOICE_BOOK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.GOODS_UNIT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.GOODS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_DETAIL>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_INVOICE_PRINT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_PRINT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_PRINT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_PRINT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_PRINT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_PRINT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_PRINT>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_INVOICE_PRINT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK>()
                .Property(e => e.KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK>()
                .Property(e => e.KSK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK>()
                .HasMany(e => e.HIS_KSK_SERVICE)
                .WithRequired(e => e.HIS_KSK)
                .HasForeignKey(e => e.KSK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_KSK_ACCESS>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_ACCESS>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_ACCESS>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_ACCESS>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_ACCESS>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.KSK_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.CONTRACT_VALUE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.DEPOSIT_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .Property(e => e.PAYMENT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .HasMany(e => e.HIS_KSK)
                .WithOptional(e => e.HIS_KSK_CONTRACT)
                .HasForeignKey(e => e.KSK_CONTRACT_ID);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .HasMany(e => e.HIS_KSK_ACCESS)
                .WithRequired(e => e.HIS_KSK_CONTRACT)
                .HasForeignKey(e => e.KSK_CONTRACT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_KSK_CONTRACT>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ALTER)
                .WithOptional(e => e.HIS_KSK_CONTRACT)
                .HasForeignKey(e => e.KSK_CONTRACT_ID);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.KSK_DRIVER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.LICENSE_CLASS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.CONCLUDER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.CONCLUDER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.REASON_BAD_HEATHLY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.SICK_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.CONCENTRATION)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.VIR_CONCLUSION_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_KSK_DRIVER>()
                .Property(e => e.TDL_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.LICENSE_CLASS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.HISTORY_DISEASE_ONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.HISTORY_DISEASE_ONE_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.HISTORY_DISEASE_TWO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.HISTORY_DISEASE_TWO_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.HISTORY_DISEASE_THREE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.HISTORY_DISEASE_THREE_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.HISTORY_DISEASE_FOUR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.HISTORY_DISEASE_FOUR_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_RESPIRATORY_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_NEUROLOGICAL_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_MUSCLE_BONE_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_ENT_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYE_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_MENTAL_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_OEND_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_MATERNITY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_MATERNITY_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYE_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_TWO_EYESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_TWO_EYESIGHT_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYEFIELD_HORI_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYEFIELD_HORI_LIMIT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYEFIELD_VERT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_EYEFIELD_VERT_LIMIT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_ENT_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_ENT_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_ENT_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_ENT_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_ENT_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_CARDIOVASCULAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.EXAM_CARDIOVASCULAR_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.TEST_MORPHIN_HEROIN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.TEST_AMPHETAMIN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.TEST_METHAMPHETAMIN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.TEST_MARIJUANA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.TEST_CONCENTRATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.RESULT_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.NOTE_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_DRIVER_CAR>()
                .Property(e => e.DISEASES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_BLOOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_BIOCHEMICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_PROSTASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_SUPERSONIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_XRAY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.DISEASES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_EYE_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_ENT_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_ENT_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_ENT_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_ENT_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_ENT_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_STOMATOLOGY_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_STOMATOLOGY_LOWER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_STOMATOLOGY_UPPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HISTORY_DISEASE_ONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HISTORY_DISEASE_ONE_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HISTORY_DISEASE_TWO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HISTORY_DISEASE_TWO_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HISTORY_DISEASE_OCCU_ONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HISTORY_DISEASE_OCCU_ONE_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HISTORY_DISEASE_OCCU_TWO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HISTORY_DISEASE_OCCU_TWO_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.RECENT_WORK_ONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.RECENT_WORK_TWO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.RESULT_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_DIIM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_TEST_URINE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.NOTE_TEST_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_NUTRION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_TRADITIONAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.EXAM_OCCUPATIONAL_THERAPY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.KSK_GENERAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.CONCLUDER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.CONCLUDER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_GENERAL>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_NAIL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_MUCOSA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_HEMATOPOIETIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_CARDIOVASCULAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_LYMPH_NODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.EXAM_CAPILLARY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.DISEASES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OCCUPATIONAL>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OTHER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OTHER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OTHER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OTHER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OTHER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OTHER>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.MEDICINE_USING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.MATERNITY_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.DISEASES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_EYE_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_STOMATOLOGY_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_STOMATOLOGY_LOWER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.EXAM_STOMATOLOGY_UPPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_HC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_BC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_TC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_GLUCO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_URE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_CREATININ)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_ASAT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_ALAT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_BLOOD_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_URINE_GLUCO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_URINE_PROTEIN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.TEST_URINE_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_OVER_EIGHTEEN>()
                .Property(e => e.RESULT_DIIM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.MEDICINE_USING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.MATERNITY_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_RESPIRATORY_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_NEUROLOGICAL_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_MUSCLE_BONE_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_ENT_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYE_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_MENTAL_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_OEND_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_MATERNITY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_MATERNITY_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYE_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_TWO_EYESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_TWO_EYESIGHT_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYEFIELD_HORI_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYEFIELD_HORI_LIMIT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYEFIELD_VERT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_EYEFIELD_VERT_LIMIT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_ENT_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_ENT_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_ENT_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_ENT_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_ENT_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_CARDIOVASCULAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.EXAM_CARDIOVASCULAR_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.TEST_MORPHIN_HEROIN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.TEST_AMPHETAMIN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.TEST_METHAMPHETAMIN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.TEST_MARIJUANA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.TEST_CONCENTRATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.RESULT_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.NOTE_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .Property(e => e.LICENSE_CLASS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_PERIOD_DRIVER>()
                .HasMany(e => e.HIS_PERIOD_DRIVER_DITY)
                .WithRequired(e => e.HIS_KSK_PERIOD_DRIVER)
                .HasForeignKey(e => e.KSK_PERIOD_DRIVER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_KSK_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_SERVICE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_KSK_SERVICE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_KSK_SERVICE>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.MEDICINE_USING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.MATERNITY_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_NEURO_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_CLINICAL_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_EYE_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_ENT_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_STOMATOLOGY_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_STOMATOLOGY_LOWER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.EXAM_STOMATOLOGY_UPPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.RESULT_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.NORMAL_HEALTH)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .Property(e => e.PROBLEM_HEALTH)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNDER_EIGHTEEN>()
                .HasMany(e => e.HIS_KSK_UNEI_VATY)
                .WithRequired(e => e.HIS_KSK_UNDER_EIGHTEEN)
                .HasForeignKey(e => e.KSK_UNDER_EIGHTEEN_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_KSK_UNEI_VATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNEI_VATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNEI_VATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNEI_VATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_KSK_UNEI_VATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LICENSE_CLASS>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LICENSE_CLASS>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LICENSE_CLASS>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LICENSE_CLASS>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LICENSE_CLASS>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LICENSE_CLASS>()
                .Property(e => e.LICENSE_CLASS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LICENSE_CLASS>()
                .Property(e => e.LICENSE_CLASS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LICENSE_CLASS>()
                .HasMany(e => e.HIS_KSK_PERIOD_DRIVER)
                .WithOptional(e => e.HIS_LICENSE_CLASS)
                .HasForeignKey(e => e.LICENSE_CLASS_ID);

            modelBuilder.Entity<HIS_LOCATION_STORE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LOCATION_STORE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LOCATION_STORE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LOCATION_STORE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LOCATION_STORE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LOCATION_STORE>()
                .Property(e => e.LOCATION_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_LOCATION_STORE>()
                .Property(e => e.LOCATION_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.MACHINE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.INTEGRATE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.CIRCULATION_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .Property(e => e.SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID);

            modelBuilder.Entity<HIS_MACHINE>()
                .HasMany(e => e.HIS_MACHINE_SERV_MATY)
                .WithRequired(e => e.HIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .HasMany(e => e.HIS_QC_NORMATION)
                .WithRequired(e => e.HIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .HasMany(e => e.HIS_SERE_SERV_EXT)
                .WithOptional(e => e.HIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID);

            modelBuilder.Entity<HIS_MACHINE>()
                .HasMany(e => e.HIS_SERE_SERV_TEIN)
                .WithOptional(e => e.HIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID);

            modelBuilder.Entity<HIS_MACHINE>()
                .HasMany(e => e.HIS_SERVICE_MACHINE)
                .WithRequired(e => e.HIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MACHINE>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID);

            modelBuilder.Entity<HIS_MACHINE_SERV_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE_SERV_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE_SERV_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE_SERV_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE_SERV_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MACHINE_SERV_MATY>()
                .Property(e => e.EXPEND_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MACHINE_SERV_MATY>()
                .Property(e => e.EXPEND_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.MANUFACTURER_SHORT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .HasMany(e => e.HIS_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_MANUFACTURER)
                .HasForeignKey(e => e.MANUFACTURER_ID);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_MATY)
                .WithOptional(e => e.HIS_MANUFACTURER)
                .HasForeignKey(e => e.MANUFACTURER_ID);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_METY)
                .WithOptional(e => e.HIS_MANUFACTURER)
                .HasForeignKey(e => e.MANUFACTURER_ID);

            modelBuilder.Entity<HIS_MANUFACTURER>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_MANUFACTURER)
                .HasForeignKey(e => e.MANUFACTURER_ID);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.MATERIAL_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.BID_MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.BID_MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.TDL_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_MATERIAL)
                .HasForeignKey(e => e.MATERIAL_ID);

            modelBuilder.Entity<HIS_MATERIAL>()
                .HasMany(e => e.HIS_IMP_MEST_MATERIAL)
                .WithRequired(e => e.HIS_MATERIAL)
                .HasForeignKey(e => e.MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .HasMany(e => e.HIS_MATERIAL_BEAN)
                .WithRequired(e => e.HIS_MATERIAL)
                .HasForeignKey(e => e.MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .HasMany(e => e.HIS_MATERIAL_MATERIAL)
                .WithRequired(e => e.HIS_MATERIAL)
                .HasForeignKey(e => e.MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .HasMany(e => e.HIS_MATERIAL_MATERIAL1)
                .WithRequired(e => e.HIS_MATERIAL1)
                .HasForeignKey(e => e.PREPARATION_MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .HasMany(e => e.HIS_MATERIAL_PATY)
                .WithRequired(e => e.HIS_MATERIAL)
                .HasForeignKey(e => e.MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .HasMany(e => e.HIS_MEDICINE_MATERIAL)
                .WithRequired(e => e.HIS_MATERIAL)
                .HasForeignKey(e => e.MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL>()
                .HasMany(e => e.HIS_MEST_PERIOD_MATE)
                .WithRequired(e => e.HIS_MATERIAL)
                .HasForeignKey(e => e.MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.BK_DECREASE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.DETACH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.DETACH_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.TDL_MATERIAL_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.TDL_MATERIAL_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.TDL_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_BEAN>()
                .HasMany(e => e.HIS_MATERIAL_BEAN1)
                .WithOptional(e => e.HIS_MATERIAL_BEAN2)
                .HasForeignKey(e => e.SOURCE_ID);

            modelBuilder.Entity<HIS_MATERIAL_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_MATERIAL>()
                .Property(e => e.PREPARATION_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MATERIAL_PATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_PATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_PATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_PATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_PATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_PATY>()
                .Property(e => e.EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_PATY>()
                .Property(e => e.EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_PATY>()
                .Property(e => e.IMP_UNIT_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.ALERT_MAX_IN_PRESCRIPTION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.LAST_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.LAST_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.ALERT_MAX_IN_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .Property(e => e.MODEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_ANTICIPATE_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_BID_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_DEBT_GOODS)
                .WithOptional(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_EMTE_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_EQUIPMENT_SET_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST_MATY_REQ)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MACHINE_SERV_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MATERIAL)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MATERIAL_TYPE1)
                .WithOptional(e => e.HIS_MATERIAL_TYPE2)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MATY_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.PREPARATION_MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MATY_MATY1)
                .WithRequired(e => e.HIS_MATERIAL_TYPE1)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MEDI_STOCK_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MEST_MATY_DEPA)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_MEST_PERIOD_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_METY_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_QC_NORMATION)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_SERE_SERV_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_SERVICE_MATY)
                .WithRequired(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_SERVICE_REQ_MATY)
                .WithOptional(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID);

            modelBuilder.Entity<HIS_MATERIAL_TYPE>()
                .HasMany(e => e.HIS_TEST_INDEX)
                .WithOptional(e => e.HIS_MATERIAL_TYPE)
                .HasForeignKey(e => e.MATERIAL_TYPE_ID);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .Property(e => e.MATERIAL_TYPE_MAP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .Property(e => e.MATERIAL_TYPE_MAP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .HasMany(e => e.HIS_BID_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_MATERIAL_TYPE_MAP)
                .HasForeignKey(e => e.MATERIAL_TYPE_MAP_ID);

            modelBuilder.Entity<HIS_MATERIAL_TYPE_MAP>()
                .HasMany(e => e.HIS_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_MATERIAL_TYPE_MAP)
                .HasForeignKey(e => e.MATERIAL_TYPE_MAP_ID);

            modelBuilder.Entity<HIS_MATY_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATY_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATY_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATY_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATY_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MATY_MATY>()
                .Property(e => e.PREPARATION_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.VIR_CONTRACT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.VIR_BID_MATERIAL_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.VIR_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.VIR_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.VIR_CONTRACT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.VIR_BID_MEDICINE_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.VIR_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.VIR_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.RANK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_ORG>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.CHECK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.CHECK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.CHECK_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_SUM>()
                .HasMany(e => e.HIS_MEDI_REACT)
                .WithRequired(e => e.HIS_MEDI_REACT_SUM)
                .HasForeignKey(e => e.MEDI_REACT_SUM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_REACT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_TYPE>()
                .Property(e => e.MEDI_REACT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_TYPE>()
                .Property(e => e.MEDI_REACT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_REACT_TYPE>()
                .HasMany(e => e.HIS_MEDI_REACT)
                .WithRequired(e => e.HIS_MEDI_REACT_TYPE)
                .HasForeignKey(e => e.MEDI_REACT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.VIR_STORE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .Property(e => e.VIR_SEED_CODE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .HasMany(e => e.HIS_MEDI_RECORD_BORROW)
                .WithRequired(e => e.HIS_MEDI_RECORD)
                .HasForeignKey(e => e.MEDI_RECORD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_RECORD>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_MEDI_RECORD)
                .HasForeignKey(e => e.MEDI_RECORD_ID);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.BORROW_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.BORROW_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.GIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.GIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.VIR_GIVE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.VIR_RECEIVE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.VIR_APPOINTMENT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.BORROW_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .Property(e => e.MEDI_RECORD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .Property(e => e.MEDI_RECORD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .HasMany(e => e.HIS_MEDI_RECORD)
                .WithOptional(e => e.HIS_MEDI_RECORD_TYPE)
                .HasForeignKey(e => e.MEDI_RECORD_TYPE_ID);

            modelBuilder.Entity<HIS_MEDI_RECORD_TYPE>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_MEDI_RECORD_TYPE)
                .HasForeignKey(e => e.MEDI_RECORD_TYPE_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.BHYT_HEAD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.NOT_IN_BHYT_HEAD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .Property(e => e.PATIENT_CLASSIFY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_BLOOD)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_DISPENSE)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.IMP_MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_EXP_MEST1)
                .WithRequired(e => e.HIS_MEDI_STOCK1)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.CHMS_MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_IMP_MEST1)
                .WithRequired(e => e.HIS_MEDI_STOCK1)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MATERIAL_BEAN)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK_BLTY)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK_EXTY)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK1)
                .WithOptional(e => e.HIS_MEDI_STOCK2)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK_IMTY)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK_MATY)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK_MATY1)
                .WithOptional(e => e.HIS_MEDI_STOCK1)
                .HasForeignKey(e => e.EXP_MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK_METY)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK_METY1)
                .WithOptional(e => e.HIS_MEDI_STOCK1)
                .HasForeignKey(e => e.EXP_MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDI_STOCK_PERIOD)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEDICINE_BEAN)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_MATY_DEPA)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_METY_DEPA)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_METY_UNIT)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_PATIENT_TYPE)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_PATY_SUB)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_PATY_TRTY)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_PERIOD_MATE)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_PERIOD_MEDI)
                .WithOptional(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK>()
                .HasMany(e => e.HIS_MEST_ROOM)
                .WithRequired(e => e.HIS_MEDI_STOCK)
                .HasForeignKey(e => e.MEDI_STOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_BLTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_BLTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_BLTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_BLTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_BLTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_BLTY>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDI_STOCK_BLTY>()
                .Property(e => e.ALERT_MAX_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDI_STOCK_BLTY>()
                .Property(e => e.REAL_BASE_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_MATY>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDI_STOCK_MATY>()
                .Property(e => e.ALERT_MAX_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDI_STOCK_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_METY>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDI_STOCK_METY>()
                .Property(e => e.ALERT_MAX_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.VIR_UNIQUE_AUTO_PERIOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.SOURCE_MEST_PERIOD_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_EXP_MEST_BLOOD)
                .WithOptional(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithOptional(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.SOURCE_MEST_PERIOD_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_IMP_MEST1)
                .WithOptional(e => e.HIS_MEDI_STOCK_PERIOD1)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_MEDI_STOCK_PERIOD1)
                .WithOptional(e => e.HIS_MEDI_STOCK_PERIOD2)
                .HasForeignKey(e => e.PREVIOUS_ID);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_MEST_INVENTORY)
                .WithRequired(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_MEST_PERIOD_BLOOD)
                .WithRequired(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_MEST_PERIOD_BLTY)
                .WithRequired(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_MEST_PERIOD_MATE)
                .WithRequired(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_MEST_PERIOD_MATY)
                .WithRequired(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_MEST_PERIOD_MEDI)
                .WithRequired(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDI_STOCK_PERIOD>()
                .HasMany(e => e.HIS_MEST_PERIOD_METY)
                .WithRequired(e => e.HIS_MEDI_STOCK_PERIOD)
                .HasForeignKey(e => e.MEDI_STOCK_PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.WELFARE_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.PREVIOUS_INJURY_RATE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REFERRAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REQUEST_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REQUEST_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.EXAMINATION_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.LEGAL_GROUND_NUMBERS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.INJURY_RATE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.INJURY_RATE_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REQUEST_AFTER_ASSESSMENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ASSESSMENT_BOARD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ASSESSMENT_PURPOSE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.LEGAL_GROUND_DOCUMENTS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ASSESSMENT_REQUEST_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.DISCUSSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_ASSESSMENT>()
                .HasMany(e => e.HIS_ASSESSMENT_MEMBER)
                .WithRequired(e => e.HIS_MEDICAL_ASSESSMENT)
                .HasForeignKey(e => e.MEDICAL_ASSESSMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.MEDICAL_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.MEDICAL_CONTRACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.VENTURE_AGREENING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .Property(e => e.VIR_CREATE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithOptional(e => e.HIS_MEDICAL_CONTRACT)
                .HasForeignKey(e => e.MEDICAL_CONTRACT_ID);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .HasMany(e => e.HIS_IMP_MEST_PROPOSE)
                .WithOptional(e => e.HIS_MEDICAL_CONTRACT)
                .HasForeignKey(e => e.MEDICAL_CONTRACT_ID);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .HasMany(e => e.HIS_MATERIAL)
                .WithOptional(e => e.HIS_MEDICAL_CONTRACT)
                .HasForeignKey(e => e.MEDICAL_CONTRACT_ID);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_MATY)
                .WithRequired(e => e.HIS_MEDICAL_CONTRACT)
                .HasForeignKey(e => e.MEDICAL_CONTRACT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_METY)
                .WithRequired(e => e.HIS_MEDICAL_CONTRACT)
                .HasForeignKey(e => e.MEDICAL_CONTRACT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICAL_CONTRACT>()
                .HasMany(e => e.HIS_MEDICINE)
                .WithOptional(e => e.HIS_MEDICAL_CONTRACT)
                .HasForeignKey(e => e.MEDICAL_CONTRACT_ID);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME1)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.TDL_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_IMP_MEST_MATE_REQ)
                .WithRequired(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MATERIAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_IMP_MEST_MEDI_REQ)
                .WithRequired(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_IMP_MEST_MEDICINE)
                .WithRequired(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_INFUSION)
                .WithOptional(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_MEDI_REACT)
                .WithOptional(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_MEDICINE_BEAN)
                .WithRequired(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_MEDICINE_MATERIAL)
                .WithRequired(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_MEDICINE_MEDICINE)
                .WithRequired(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_MEDICINE_MEDICINE1)
                .WithRequired(e => e.HIS_MEDICINE1)
                .HasForeignKey(e => e.PREPARATION_MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_MEDICINE_PATY)
                .WithRequired(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_MEST_PERIOD_MEDI)
                .WithRequired(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE>()
                .HasMany(e => e.HIS_MIXED_MEDICINE)
                .WithOptional(e => e.HIS_MEDICINE)
                .HasForeignKey(e => e.MEDICINE_ID);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.BK_DECREASE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.DETACH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.DETACH_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_MEDICINE_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_MEDICINE_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_BEAN>()
                .HasMany(e => e.HIS_MEDICINE_BEAN1)
                .WithOptional(e => e.HIS_MEDICINE_BEAN2)
                .HasForeignKey(e => e.SOURCE_ID);

            modelBuilder.Entity<HIS_MEDICINE_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_GROUP>()
                .Property(e => e.MEDICINE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_GROUP>()
                .Property(e => e.MEDICINE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_GROUP>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_MEDICINE_GROUP)
                .HasForeignKey(e => e.MEDICINE_GROUP_ID);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_INTERACTIVE>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_LINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_LINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_LINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_LINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_LINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_LINE>()
                .Property(e => e.MEDICINE_LINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_LINE>()
                .Property(e => e.MEDICINE_LINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_LINE>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_MEDICINE_LINE)
                .HasForeignKey(e => e.MEDICINE_LINE_ID);

            modelBuilder.Entity<HIS_MEDICINE_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MATERIAL>()
                .Property(e => e.MATERIAL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDICINE_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_MEDICINE>()
                .Property(e => e.PREPARATION_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEDICINE_PATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_PATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_PATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_PATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_PATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_PATY>()
                .Property(e => e.EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_PATY>()
                .Property(e => e.EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_PATY>()
                .Property(e => e.IMP_UNIT_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.VALUE_SERVICE_FROM)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.VALUE_SERVICE_TO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.AMOUNT_INDAY_FROM)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.AMOUNT_INDAY_TO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_SERVICE>()
                .Property(e => e.WARNING_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.ALERT_MAX_IN_TREATMENT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.ALERT_MAX_IN_PRESCRIPTION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_PROPRIETARY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.CONTRAINDICATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.LAST_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.LAST_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.ATC_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.SCIENTIFIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.PREPROCESSING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.PROCESSING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.USED_PART)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.DISTRIBUTED_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.QUALITY_STANDARDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.PREPROCESSING_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.PROCESSING_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.NUM_ORDER_CIRCULARS20)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.ALERT_MAX_IN_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .Property(e => e.ODD_WARNING_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_ADR_MEDICINE_TYPE)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_ALLERGENIC)
                .WithOptional(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_ANTICIPATE_METY)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_BID_MEDICINE_TYPE)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_DEBT_GOODS)
                .WithOptional(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_EMTE_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST_METY_REQ)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_METY)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDI_STOCK_METY)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDICINE)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_INTERACTIVE)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID1)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_INTERACTIVE1)
                .WithRequired(e => e.HIS_MEDICINE_TYPE1)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID2)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_TYPE_ACIN)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_TYPE1)
                .WithOptional(e => e.HIS_MEDICINE_TYPE2)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_TYPE_ROOM)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_TYPE_TUT)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEST_METY_DEPA)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEST_METY_UNIT)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MEST_PERIOD_METY)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_METY_METY)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.PREPARATION_MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_METY_PRODUCT)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_MIXED_MEDICINE)
                .WithOptional(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_PREPARE_METY)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_SERVICE_METY)
                .WithRequired(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_SERVICE_REQ_METY)
                .WithOptional(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.VACCINE_ID);

            modelBuilder.Entity<HIS_MEDICINE_TYPE>()
                .HasMany(e => e.HIS_VITAMIN_A)
                .WithOptional(e => e.HIS_MEDICINE_TYPE)
                .HasForeignKey(e => e.MEDICINE_TYPE_ID);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .HasMany(e => e.HIS_BID_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_MEDICINE_USE_FORM)
                .HasForeignKey(e => e.MEDICINE_USE_FORM_ID);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .HasMany(e => e.HIS_MEDI_CONTRACT_METY)
                .WithOptional(e => e.HIS_MEDICINE_USE_FORM)
                .HasForeignKey(e => e.MEDICINE_USE_FORM_ID);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .HasMany(e => e.HIS_MEDICINE)
                .WithOptional(e => e.HIS_MEDICINE_USE_FORM)
                .HasForeignKey(e => e.MEDICINE_USE_FORM_ID);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_MEDICINE_USE_FORM)
                .HasForeignKey(e => e.MEDICINE_USE_FORM_ID);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .HasMany(e => e.HIS_MEDICINE_TYPE_TUT)
                .WithOptional(e => e.HIS_MEDICINE_USE_FORM)
                .HasForeignKey(e => e.MEDICINE_USE_FORM_ID);

            modelBuilder.Entity<HIS_MEDICINE_USE_FORM>()
                .HasMany(e => e.HIS_SERVICE_REQ_METY)
                .WithOptional(e => e.HIS_MEDICINE_USE_FORM)
                .HasForeignKey(e => e.MEDICINE_USE_FORM_ID);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .Property(e => e.MEMA_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .Property(e => e.MEMA_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .HasMany(e => e.HIS_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_MEMA_GROUP)
                .HasForeignKey(e => e.MEMA_GROUP_ID);

            modelBuilder.Entity<HIS_MEMA_GROUP>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_MEMA_GROUP)
                .HasForeignKey(e => e.MEMA_GROUP_ID);

            modelBuilder.Entity<HIS_MESSAGE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MESSAGE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MESSAGE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MESSAGE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MESSAGE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MESSAGE>()
                .Property(e => e.LANGUAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MESSAGE>()
                .Property(e => e.MESSAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MESSAGE>()
                .Property(e => e.MESSAGE_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVE_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVE_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVE_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVENTORY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVENTORY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVENTORY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVENTORY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVENTORY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_INVENTORY>()
                .HasMany(e => e.HIS_MEST_INVE_USER)
                .WithRequired(e => e.HIS_MEST_INVENTORY)
                .HasForeignKey(e => e.MEST_INVENTORY_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MEST_MATY_DEPA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_MATY_DEPA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_MATY_DEPA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_MATY_DEPA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_MATY_DEPA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_DEPA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_DEPA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_DEPA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_DEPA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_DEPA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_UNIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_UNIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_UNIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_UNIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_METY_UNIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_SUB>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_SUB>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_SUB>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_SUB>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_SUB>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_TRTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_TRTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_TRTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_TRTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PATY_TRTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATE>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MATY>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_MEST_PERIOD_METY>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_MEST_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MEST_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_MATY>()
                .Property(e => e.MATERIAL_TYPE_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_METY_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_METY>()
                .Property(e => e.PREPARATION_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_METY_PRODUCT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_PRODUCT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_PRODUCT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_PRODUCT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_PRODUCT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_METY_PRODUCT>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_METY_PRODUCT>()
                .HasMany(e => e.HIS_METY_MATY)
                .WithRequired(e => e.HIS_METY_PRODUCT)
                .HasForeignKey(e => e.METY_PRODUCT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_METY_PRODUCT>()
                .HasMany(e => e.HIS_METY_METY)
                .WithRequired(e => e.HIS_METY_PRODUCT)
                .HasForeignKey(e => e.METY_PRODUCT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MILITARY_RANK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MILITARY_RANK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MILITARY_RANK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MILITARY_RANK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MILITARY_RANK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MILITARY_RANK>()
                .Property(e => e.MILITARY_RANK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MILITARY_RANK>()
                .Property(e => e.MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MILITARY_RANK>()
                .HasMany(e => e.HIS_PATIENT)
                .WithOptional(e => e.HIS_MILITARY_RANK)
                .HasForeignKey(e => e.MILITARY_RANK_ID);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_MIXED_MEDICINE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM>()
                .Property(e => e.CHECK_ITEM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM>()
                .Property(e => e.EMR_COVER_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM>()
                .HasMany(e => e.HIS_MR_CHECKLIST)
                .WithRequired(e => e.HIS_MR_CHECK_ITEM)
                .HasForeignKey(e => e.MR_CHECK_ITEM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM_TYPE>()
                .Property(e => e.CHECK_ITEM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_ITEM_TYPE>()
                .HasMany(e => e.HIS_MR_CHECK_ITEM)
                .WithRequired(e => e.HIS_MR_CHECK_ITEM_TYPE)
                .HasForeignKey(e => e.CHECK_ITEM_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.DEPARTMENT_USER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.DEPARTMENT_LOGIN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.KHTH_USER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .Property(e => e.KHTH_LOGIN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECK_SUMMARY>()
                .HasMany(e => e.HIS_MR_CHECKLIST)
                .WithRequired(e => e.HIS_MR_CHECK_SUMMARY)
                .HasForeignKey(e => e.MR_CHECK_SUMMARY_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_MR_CHECKLIST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECKLIST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECKLIST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECKLIST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECKLIST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_MR_CHECKLIST>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NEXT_TREA_INTR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NEXT_TREA_INTR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NEXT_TREA_INTR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NEXT_TREA_INTR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NEXT_TREA_INTR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NEXT_TREA_INTR>()
                .Property(e => e.NEXT_TREA_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NEXT_TREA_INTR>()
                .Property(e => e.NEXT_TREA_INTR_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.NONE_MEDI_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.NONE_MEDI_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .HasMany(e => e.HIS_BILL_GOODS)
                .WithOptional(e => e.HIS_NONE_MEDI_SERVICE)
                .HasForeignKey(e => e.NONE_MEDI_SERVICE_ID);

            modelBuilder.Entity<HIS_NONE_MEDI_SERVICE>()
                .HasMany(e => e.HIS_DEBT_GOODS)
                .WithOptional(e => e.HIS_NONE_MEDI_SERVICE)
                .HasForeignKey(e => e.NONE_MEDI_SERVICE_ID);

            modelBuilder.Entity<HIS_NUM_ORDER_BLOCK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_BLOCK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_BLOCK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_BLOCK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_BLOCK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_BLOCK>()
                .Property(e => e.FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_BLOCK>()
                .Property(e => e.TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_BLOCK>()
                .HasMany(e => e.HIS_NUM_ORDER_ISSUE)
                .WithRequired(e => e.HIS_NUM_ORDER_BLOCK)
                .HasForeignKey(e => e.NUM_ORDER_BLOCK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_NUM_ORDER_ISSUE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_ISSUE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_ISSUE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_ISSUE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_ISSUE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_NUM_ORDER_ISSUE>()
                .HasMany(e => e.HIS_APPOINTMENT)
                .WithOptional(e => e.HIS_NUM_ORDER_ISSUE)
                .HasForeignKey(e => e.NUM_ORDER_ISSUE_ID);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.REQUEST_ROOM_ID)
                .HasPrecision(22, 0);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.SERVICE_REQ_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OBEY_CONTRAINDI>()
                .Property(e => e.EXP_MEST_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL>()
                .Property(e => e.BASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL_REUSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL_REUSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL_REUSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL_REUSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL_REUSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL_REUSE>()
                .Property(e => e.BASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ORDINAL_REUSE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_EXME_REASON_CFG)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_PATIENT_CLASSIFY)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_PATIENT_TYPE)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_SERE_SERV_RATION)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OTHER_PAY_SOURCE>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_OTHER_PAY_SOURCE)
                .HasForeignKey(e => e.OTHER_PAY_SOURCE_ID);

            modelBuilder.Entity<HIS_OWE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OWE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OWE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OWE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OWE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OWE_TYPE>()
                .Property(e => e.OWE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OWE_TYPE>()
                .Property(e => e.OWE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_OWE_TYPE>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_OWE_TYPE)
                .HasForeignKey(e => e.OWE_TYPE_ID);

            modelBuilder.Entity<HIS_PAAN_LIQUID>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_LIQUID>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_LIQUID>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_LIQUID>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_LIQUID>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_LIQUID>()
                .Property(e => e.PAAN_LIQUID_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_LIQUID>()
                .Property(e => e.PAAN_LIQUID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_LIQUID>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_PAAN_LIQUID)
                .HasForeignKey(e => e.PAAN_LIQUID_ID);

            modelBuilder.Entity<HIS_PAAN_POSITION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_POSITION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_POSITION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_POSITION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_POSITION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_POSITION>()
                .Property(e => e.PAAN_POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_POSITION>()
                .Property(e => e.PAAN_POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAAN_POSITION>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_PAAN_POSITION)
                .HasForeignKey(e => e.PAAN_POSITION_ID);

            modelBuilder.Entity<HIS_PACKAGE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE>()
                .Property(e => e.PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE>()
                .Property(e => e.PACKAGE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE>()
                .HasMany(e => e.HIS_PACKAGE_DETAIL)
                .WithRequired(e => e.HIS_PACKAGE)
                .HasForeignKey(e => e.PACKAGE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PACKAGE>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithOptional(e => e.HIS_PACKAGE)
                .HasForeignKey(e => e.PACKAGE_ID);

            modelBuilder.Entity<HIS_PACKAGE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_PACKAGE)
                .HasForeignKey(e => e.PACKAGE_ID);

            modelBuilder.Entity<HIS_PACKAGE>()
                .HasMany(e => e.HIS_SERVICE_PATY)
                .WithOptional(e => e.HIS_PACKAGE)
                .HasForeignKey(e => e.PACKAGE_ID);

            modelBuilder.Entity<HIS_PACKAGE_DETAIL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE_DETAIL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE_DETAIL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE_DETAIL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE_DETAIL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKAGE_DETAIL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .Property(e => e.PACKING_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .HasMany(e => e.HIS_BLOOD_TYPE)
                .WithOptional(e => e.HIS_PACKING_TYPE)
                .HasForeignKey(e => e.PACKING_TYPE_ID);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .HasMany(e => e.HIS_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_PACKING_TYPE)
                .HasForeignKey(e => e.PACKING_TYPE_ID__DELETE);

            modelBuilder.Entity<HIS_PACKING_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_PACKING_TYPE)
                .HasForeignKey(e => e.PACKING_TYPE_ID__DELETE);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.HT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.HT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.HT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.VIR_HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PATIENT_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.HRM_EMPLOYEE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.BORN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.BORN_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.HOUSEHOLD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.HOUSEHOLD_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.OWN_BRANCH_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.UUID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.SYS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.UUID_BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.REGISTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.FATHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.FATHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.MOTHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.MOTHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.TDL_LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_CARD_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.TDL_JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.TDL_PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CMND_BEFORE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.CMND_AFTER_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.VIR_DOB_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.FATHER_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .Property(e => e.MOTHER_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_APPOINTMENT)
                .WithOptional(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_CARD)
                .WithOptional(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_CONTACT_POINT)
                .WithOptional(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_HOLD_RETURN)
                .WithRequired(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_MEDI_RECORD)
                .WithRequired(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_PATIENT1)
                .WithOptional(e => e.HIS_PATIENT2)
                .HasForeignKey(e => e.REFERENCE_ID);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_PATIENT_PROGRAM)
                .WithRequired(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_REGISTER_REQ)
                .WithOptional(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithRequired(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_VACCINATION_EXAM)
                .WithRequired(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithRequired(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT>()
                .HasMany(e => e.HIS_VITAMIN_A)
                .WithRequired(e => e.HIS_PATIENT)
                .HasForeignKey(e => e.PATIENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_CASE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CASE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CASE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CASE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CASE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CASE>()
                .Property(e => e.PATIENT_CASE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CASE>()
                .Property(e => e.PATIENT_CASE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CASE>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_PATIENT_CASE)
                .HasForeignKey(e => e.PATIENT_CASE_ID);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.DISPLAY_COLOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.BHYT_WHITELIST_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .Property(e => e.MILITARY_RANK_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .HasMany(e => e.HIS_EXME_REASON_CFG)
                .WithRequired(e => e.HIS_PATIENT_CLASSIFY)
                .HasForeignKey(e => e.PATIENT_CLASSIFY_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .HasMany(e => e.HIS_PATIENT)
                .WithOptional(e => e.HIS_PATIENT_CLASSIFY)
                .HasForeignKey(e => e.PATIENT_CLASSIFY_ID);

            modelBuilder.Entity<HIS_PATIENT_CLASSIFY>()
                .HasMany(e => e.HIS_SERVICE_PATY)
                .WithOptional(e => e.HIS_PATIENT_CLASSIFY)
                .HasForeignKey(e => e.PATIENT_CLASSIFY_ID);

            modelBuilder.Entity<HIS_PATIENT_OBSERVATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_OBSERVATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_OBSERVATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_OBSERVATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_OBSERVATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_PROGRAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_PROGRAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_PROGRAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_PROGRAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_PROGRAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_PROGRAM>()
                .Property(e => e.PATIENT_PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_PROGRAM>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.INHERIT_PATIENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .Property(e => e.OTHER_PAY_SOURCE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_APPOINTMENT_SERV)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_AREA)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_BED_LOG)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_BED_LOG1)
                .WithOptional(e => e.HIS_PATIENT_TYPE1)
                .HasForeignKey(e => e.PRIMARY_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_DEPARTMENT)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.DEFAULT_INSTR_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_EXME_REASON_CFG)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST_BLOOD)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST_BLTY_REQ)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_MATERIAL_PATY)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_PATY)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_MEST_PATIENT_TYPE)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_MEST_PATY_TRTY)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ALLOW)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ALLOW1)
                .WithRequired(e => e.HIS_PATIENT_TYPE1)
                .HasForeignKey(e => e.PATIENT_TYPE_ALLOW_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ALTER)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ALTER1)
                .WithOptional(e => e.HIS_PATIENT_TYPE1)
                .HasForeignKey(e => e.PRIMARY_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_PATIENT_TYPE1)
                .WithOptional(e => e.HIS_PATIENT_TYPE2)
                .HasForeignKey(e => e.BASE_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ROOM)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_PATIENT_TYPE_SUB)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_RATION_SCHEDULE)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PRIMARY_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERE_SERV1)
                .WithRequired(e => e.HIS_PATIENT_TYPE1)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERE_SERV_RATION)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERE_SERV_RATION1)
                .WithOptional(e => e.HIS_PATIENT_TYPE1)
                .HasForeignKey(e => e.PRIMARY_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERVICE_CHANGE_REQ)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERVICE_CHANGE_REQ1)
                .WithOptional(e => e.HIS_PATIENT_TYPE1)
                .HasForeignKey(e => e.PRIMARY_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.DEFAULT_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERVICE1)
                .WithOptional(e => e.HIS_PATIENT_TYPE1)
                .HasForeignKey(e => e.BILL_PATIENT_TYPE_ID);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_SERVICE_PATY)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_VACCINATION_EXAM)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithRequired(e => e.HIS_PATIENT_TYPE)
                .HasForeignKey(e => e.PATIENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HNCODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.TT46_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.GUARANTEE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.GUARANTEE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.GUARANTEE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.PATIENT_TYPE_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.PATIENT_TYPE_SUB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PATIENT_TYPE_SUB>()
                .HasMany(e => e.HIS_MEST_PATY_SUB)
                .WithRequired(e => e.HIS_PATIENT_TYPE_SUB)
                .HasForeignKey(e => e.PATIENT_TYPE_SUB_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .Property(e => e.PAY_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .Property(e => e.PAY_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .Property(e => e.ELECTRONIC_PAY_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_PAY_FORM)
                .HasForeignKey(e => e.PAY_FORM_ID);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .HasMany(e => e.HIS_IMP_MEST_PAY)
                .WithOptional(e => e.HIS_PAY_FORM)
                .HasForeignKey(e => e.PAY_FORM_ID);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .HasMany(e => e.HIS_INVOICE)
                .WithRequired(e => e.HIS_PAY_FORM)
                .HasForeignKey(e => e.PAY_FORM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PAY_FORM>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithRequired(e => e.HIS_PAY_FORM)
                .HasForeignKey(e => e.PAY_FORM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PERIOD_DRIVER_DITY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERIOD_DRIVER_DITY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERIOD_DRIVER_DITY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERIOD_DRIVER_DITY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERIOD_DRIVER_DITY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERIOD_DRIVER_DITY>()
                .Property(e => e.IS_YES_NO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERMISSION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERMISSION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERMISSION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERMISSION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERMISSION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERMISSION>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PERMISSION>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PETROLEUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PETROLEUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PETROLEUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PETROLEUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PETROLEUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PETROLEUM>()
                .Property(e => e.PETROLEUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PETROLEUM>()
                .Property(e => e.PETROLEUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .Property(e => e.POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .Property(e => e.POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_POSITION>()
                .HasMany(e => e.HIS_PATIENT)
                .WithOptional(e => e.HIS_POSITION)
                .HasForeignKey(e => e.POSITION_ID);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.PREPARE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE>()
                .HasMany(e => e.HIS_PREPARE_METY)
                .WithRequired(e => e.HIS_PREPARE)
                .HasForeignKey(e => e.PREPARE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PREPARE_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_MATY>()
                .Property(e => e.REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_PREPARE_MATY>()
                .Property(e => e.APPROVAL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_PREPARE_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PREPARE_METY>()
                .Property(e => e.REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_PREPARE_METY>()
                .Property(e => e.APPROVAL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .Property(e => e.PRIORITY_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .Property(e => e.PRIORITY_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .Property(e => e.BHYT_PREFIXS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_PRIORITY_TYPE)
                .HasForeignKey(e => e.PRIORITY_TYPE_ID);

            modelBuilder.Entity<HIS_PRIORITY_TYPE>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_PRIORITY_TYPE)
                .HasForeignKey(e => e.PRIORITY_TYPE_ID);

            modelBuilder.Entity<HIS_PROCESSING_METHOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROCESSING_METHOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROCESSING_METHOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROCESSING_METHOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROCESSING_METHOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROCESSING_METHOD>()
                .Property(e => e.PROCESSING_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROCESSING_METHOD>()
                .Property(e => e.PROCESSING_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .Property(e => e.PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .Property(e => e.PROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .HasMany(e => e.HIS_MEDI_RECORD)
                .WithOptional(e => e.HIS_PROGRAM)
                .HasForeignKey(e => e.PROGRAM_ID);

            modelBuilder.Entity<HIS_PROGRAM>()
                .HasMany(e => e.HIS_PATIENT_PROGRAM)
                .WithRequired(e => e.HIS_PROGRAM)
                .HasForeignKey(e => e.PROGRAM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PROGRAM>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_PROGRAM)
                .HasForeignKey(e => e.PROGRAM_ID);

            modelBuilder.Entity<HIS_PTTT_APPROVAL_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_APPROVAL_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_APPROVAL_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_APPROVAL_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_APPROVAL_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_APPROVAL_STT>()
                .Property(e => e.PTTT_APPROVAL_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_APPROVAL_STT>()
                .Property(e => e.PTTT_APPROVAL_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.PTTT_CALENDAR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.VIR_DATE_FROM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .Property(e => e.VIR_DATE_TO)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_PTTT_CALENDAR>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_PTTT_CALENDAR)
                .HasForeignKey(e => e.PTTT_CALENDAR_ID);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .Property(e => e.PTTT_CATASTROPHE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .Property(e => e.PTTT_CATASTROPHE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_PTTT_CATASTROPHE)
                .HasForeignKey(e => e.PTTT_CATASTROPHE_ID);

            modelBuilder.Entity<HIS_PTTT_CATASTROPHE>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_PTTT_CATASTROPHE)
                .HasForeignKey(e => e.PTTT_CATASTROPHE_ID);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .Property(e => e.PTTT_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .Property(e => e.PTTT_CONDITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_PTTT_CONDITION)
                .HasForeignKey(e => e.PTTT_CONDITION_ID);

            modelBuilder.Entity<HIS_PTTT_CONDITION>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_PTTT_CONDITION)
                .HasForeignKey(e => e.PTTT_CONDITION_ID);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .Property(e => e.REMUNERATION)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .HasMany(e => e.HIS_PTTT_GROUP_BEST)
                .WithRequired(e => e.HIS_PTTT_GROUP)
                .HasForeignKey(e => e.PTTT_GROUP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .HasMany(e => e.HIS_PTTT_METHOD)
                .WithOptional(e => e.HIS_PTTT_GROUP)
                .HasForeignKey(e => e.PTTT_GROUP_ID);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_PTTT_GROUP)
                .HasForeignKey(e => e.PTTT_GROUP_ID);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_PTTT_GROUP)
                .HasForeignKey(e => e.PTTT_GROUP_ID);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_PTTT_GROUP)
                .HasForeignKey(e => e.PTTT_GROUP_ID);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .HasMany(e => e.HIS_SESE_PTTT_METHOD)
                .WithOptional(e => e.HIS_PTTT_GROUP)
                .HasForeignKey(e => e.PTTT_GROUP_ID);

            modelBuilder.Entity<HIS_PTTT_GROUP>()
                .HasMany(e => e.HIS_SURG_REMUNERATION)
                .WithRequired(e => e.HIS_PTTT_GROUP)
                .HasForeignKey(e => e.PTTT_GROUP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PTTT_GROUP_BEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP_BEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP_BEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP_BEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_GROUP_BEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .Property(e => e.PTTT_HIGH_TECH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .Property(e => e.PTTT_HIGH_TECH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_PTTT_HIGH_TECH)
                .HasForeignKey(e => e.PTTT_HIGH_TECH_ID);

            modelBuilder.Entity<HIS_PTTT_HIGH_TECH>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_PTTT_HIGH_TECH)
                .HasForeignKey(e => e.PTTT_HIGH_TECH_ID);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .Property(e => e.PTTT_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .Property(e => e.PTTT_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .HasMany(e => e.HIS_DEBATE)
                .WithOptional(e => e.HIS_PTTT_METHOD)
                .HasForeignKey(e => e.PTTT_METHOD_ID);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_PTTT_METHOD)
                .HasForeignKey(e => e.REAL_PTTT_METHOD_ID);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT1)
                .WithOptional(e => e.HIS_PTTT_METHOD1)
                .HasForeignKey(e => e.PTTT_METHOD_ID);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_PTTT_METHOD)
                .HasForeignKey(e => e.PTTT_METHOD_ID);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP1)
                .WithOptional(e => e.HIS_PTTT_METHOD1)
                .HasForeignKey(e => e.REAL_PTTT_METHOD_ID);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_PTTT_METHOD)
                .HasForeignKey(e => e.PTTT_METHOD_ID);

            modelBuilder.Entity<HIS_PTTT_METHOD>()
                .HasMany(e => e.HIS_SESE_PTTT_METHOD)
                .WithRequired(e => e.HIS_PTTT_METHOD)
                .HasForeignKey(e => e.PTTT_METHOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .Property(e => e.PTTT_PRIORITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .Property(e => e.PTTT_PRIORITY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_PTTT_PRIORITY)
                .HasForeignKey(e => e.PTTT_PRIORITY_ID);

            modelBuilder.Entity<HIS_PTTT_PRIORITY>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_PTTT_PRIORITY)
                .HasForeignKey(e => e.PTTT_PRIORITY_ID);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .Property(e => e.PTTT_TABLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .Property(e => e.PTTT_TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_PTTT_TABLE)
                .HasForeignKey(e => e.PTTT_TABLE_ID);

            modelBuilder.Entity<HIS_PTTT_TABLE>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT_TEMP)
                .WithOptional(e => e.HIS_PTTT_TABLE)
                .HasForeignKey(e => e.PTTT_TABLE_ID);

            modelBuilder.Entity<HIS_QC_NORMATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_NORMATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_NORMATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_NORMATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_NORMATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_NORMATION>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .Property(e => e.QC_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .Property(e => e.QC_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_QC_TYPE)
                .HasForeignKey(e => e.QC_TYPE_ID);

            modelBuilder.Entity<HIS_QC_TYPE>()
                .HasMany(e => e.HIS_QC_NORMATION)
                .WithRequired(e => e.HIS_QC_TYPE)
                .HasForeignKey(e => e.QC_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_RATION_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_GROUP>()
                .Property(e => e.RATION_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_GROUP>()
                .Property(e => e.RATION_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_GROUP>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_RATION_GROUP)
                .HasForeignKey(e => e.RATION_GROUP_ID);

            modelBuilder.Entity<HIS_RATION_SCHEDULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SCHEDULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SCHEDULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SCHEDULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SCHEDULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SCHEDULE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_RATION_SCHEDULE>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.RATION_SUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_RATION_SUM)
                .HasForeignKey(e => e.RATION_SUM_ID);

            modelBuilder.Entity<HIS_RATION_SUM_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM_STT>()
                .Property(e => e.RATION_SUM_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM_STT>()
                .Property(e => e.RATION_SUM_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_SUM_STT>()
                .HasMany(e => e.HIS_RATION_SUM)
                .WithRequired(e => e.HIS_RATION_SUM_STT)
                .HasForeignKey(e => e.RATION_SUM_STT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .Property(e => e.RATION_TIME_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .Property(e => e.RATION_TIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .HasMany(e => e.HIS_RATION_SCHEDULE)
                .WithOptional(e => e.HIS_RATION_TIME)
                .HasForeignKey(e => e.RATION_TIME_ID);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .HasMany(e => e.HIS_SERVICE_PATY)
                .WithOptional(e => e.HIS_RATION_TIME)
                .HasForeignKey(e => e.RATION_TIME_ID);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .HasMany(e => e.HIS_SERVICE_RATI)
                .WithRequired(e => e.HIS_RATION_TIME)
                .HasForeignKey(e => e.RATION_TIME_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_RATION_TIME>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_RATION_TIME)
                .HasForeignKey(e => e.RATION_TIME_ID);

            modelBuilder.Entity<HIS_RECEPTION_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RECEPTION_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RECEPTION_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RECEPTION_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RECEPTION_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RECEPTION_ROOM>()
                .Property(e => e.RECEPTION_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RECEPTION_ROOM>()
                .Property(e => e.RECEPTION_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_RECEPTION_ROOM>()
                .Property(e => e.PATIENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REFECTORY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REFECTORY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REFECTORY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REFECTORY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REFECTORY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REFECTORY>()
                .Property(e => e.REFECTORY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REFECTORY>()
                .Property(e => e.REFECTORY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REFECTORY>()
                .HasMany(e => e.HIS_RATION_SCHEDULE)
                .WithOptional(e => e.HIS_REFECTORY)
                .HasForeignKey(e => e.REFECTORY_ROOM_ID);

            modelBuilder.Entity<HIS_REGIMEN_HIV>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGIMEN_HIV>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGIMEN_HIV>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGIMEN_HIV>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGIMEN_HIV>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGIMEN_HIV>()
                .Property(e => e.REGIMEN_HIV_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGIMEN_HIV>()
                .Property(e => e.REGIMEN_HIV_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.REGISTER_GATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.REGISTER_GATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .Property(e => e.FORMAT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_GATE>()
                .HasMany(e => e.HIS_REGISTER_REQ)
                .WithRequired(e => e.HIS_REGISTER_GATE)
                .HasForeignKey(e => e.REGISTER_GATE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_REGISTER_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_REQ>()
                .Property(e => e.CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_REQ>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REGISTER_REQ>()
                .Property(e => e.CALL_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_SUM>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_REHA_SUM)
                .HasForeignKey(e => e.REHA_SUM_ID);

            modelBuilder.Entity<HIS_REHA_TRAIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.REHA_TRAIN_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.REHA_TRAIN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .HasMany(e => e.HIS_REST_RETR_TYPE)
                .WithRequired(e => e.HIS_REHA_TRAIN_TYPE)
                .HasForeignKey(e => e.REHA_TRAIN_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_TYPE>()
                .HasMany(e => e.HIS_SERE_SERV_REHA)
                .WithRequired(e => e.HIS_REHA_TRAIN_TYPE)
                .HasForeignKey(e => e.REHA_TRAIN_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_UNIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_UNIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_UNIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_UNIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_UNIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_UNIT>()
                .Property(e => e.REHA_TRAIN_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_UNIT>()
                .Property(e => e.REHA_TRAIN_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REHA_TRAIN_UNIT>()
                .HasMany(e => e.HIS_REHA_TRAIN_TYPE)
                .WithRequired(e => e.HIS_REHA_TRAIN_UNIT)
                .HasForeignKey(e => e.REHA_TRAIN_UNIT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_REJECT_ALERT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REJECT_ALERT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REJECT_ALERT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REJECT_ALERT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REJECT_ALERT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REJECT_ALERT>()
                .Property(e => e.REJECTER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REJECT_ALERT>()
                .Property(e => e.REJECTER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REMUNERATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REMUNERATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REMUNERATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REMUNERATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REMUNERATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REMUNERATION>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_REMUNERATION>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REMUNERATION>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPAY_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPAY_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPAY_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPAY_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPAY_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPAY_REASON>()
                .Property(e => e.REPAY_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPAY_REASON>()
                .Property(e => e.REPAY_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPAY_REASON>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_REPAY_REASON)
                .HasForeignKey(e => e.REPAY_REASON_ID);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .Property(e => e.REPORT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .Property(e => e.CATEGORY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .Property(e => e.CATEGORY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REPORT_TYPE_CAT>()
                .HasMany(e => e.HIS_SERVICE_RETY_CAT)
                .WithRequired(e => e.HIS_REPORT_TYPE_CAT)
                .HasForeignKey(e => e.REPORT_TYPE_CAT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_REST_RETR_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REST_RETR_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REST_RETR_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REST_RETR_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_REST_RETR_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.ORDER_ISSUE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.RESPONSIBLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.RESPONSIBLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.SCREEN_SAVER_MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.WORKING_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.WORKING_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.DEFAULT_DRUG_STORE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_ALERT)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_ANTICIPATE)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.REQUEST_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_BED_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_CARE)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_CASHIER_ADD_CONFIG)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_CASHIER_ADD_CONFIG1)
                .WithOptional(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.REQUEST_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_CASHIER_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_DATA_STORE)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_DATA_STORE1)
                .WithOptional(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.STORED_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_DESK)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_DHST)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_EMR_COVER_CONFIG)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_EXAM_SCHEDULE)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_EXECUTE_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.REQ_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_EXRO_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_HOLD_RETURN)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.HOLD_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_HOLD_RETURN1)
                .WithRequired(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.RESPONSIBLE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_HOLD_RETURN2)
                .WithOptional(e => e.HIS_ROOM2)
                .HasForeignKey(e => e.RETURN_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_HORE_HANDOVER)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.SEND_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_HORE_HANDOVER1)
                .WithRequired(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.RECEIVE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.REQ_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_IMP_MEST_PROPOSE)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.PROPOSE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_INFUSION_SUM)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_KSK_SERVICE)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_MACHINE)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_MEDI_REACT_SUM)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_MEDI_RECORD)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.END_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_MEDI_STOCK)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_MEDICINE_TYPE_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_MEST_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_PATIENT)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.RECENT_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_RATION_SUM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_RECEPTION_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_REFECTORY)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_ROOM_SARO)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_ROOM_TIME)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SAMPLE_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SERE_SERV_TEMP)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SERV_SEGR)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SERVICE_NUM_ORDER)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.REQUEST_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SERVICE_REQ1)
                .WithRequired(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.REQUEST_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SERVICE_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_STATION)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SUBCLINICAL_RS_ADD)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.REQUEST_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SUBCLINICAL_RS_ADD1)
                .WithOptional(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_SUBCLINICAL_RS_ADD2)
                .WithOptional(e => e.HIS_ROOM2)
                .HasForeignKey(e => e.RESULT_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_TRACKING)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.CANCEL_REQ_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_TRANSFUSION_SUM)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_ROOM)
                .HasForeignKey(e => e.FEE_LOCK_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_TREATMENT1)
                .WithOptional(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.IN_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_TREATMENT2)
                .WithOptional(e => e.HIS_ROOM2)
                .HasForeignKey(e => e.END_ROOM_ID);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_USER_ROOM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_VACCINATION_EXAM)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.REQUEST_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_VACCINATION_EXAM1)
                .WithRequired(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.REQUEST_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_VACCINATION1)
                .WithRequired(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_VITAMIN_A)
                .WithRequired(e => e.HIS_ROOM)
                .HasForeignKey(e => e.REQUEST_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM>()
                .HasMany(e => e.HIS_VITAMIN_A1)
                .WithRequired(e => e.HIS_ROOM1)
                .HasForeignKey(e => e.EXECUTE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_GROUP>()
                .Property(e => e.ROOM_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_GROUP>()
                .Property(e => e.ROOM_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_GROUP>()
                .HasMany(e => e.HIS_ROOM)
                .WithOptional(e => e.HIS_ROOM_GROUP)
                .HasForeignKey(e => e.ROOM_GROUP_ID);

            modelBuilder.Entity<HIS_ROOM_SARO>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_SARO>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_SARO>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_SARO>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_SARO>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .Property(e => e.FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .Property(e => e.TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .Property(e => e.ROOM_TIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TIME>()
                .HasMany(e => e.HIS_NUM_ORDER_BLOCK)
                .WithRequired(e => e.HIS_ROOM_TIME)
                .HasForeignKey(e => e.ROOM_TIME_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .HasMany(e => e.HIS_ROOM)
                .WithRequired(e => e.HIS_ROOM_TYPE)
                .HasForeignKey(e => e.ROOM_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM_TYPE>()
                .HasMany(e => e.HIS_ROOM_TYPE_MODULE)
                .WithRequired(e => e.HIS_ROOM_TYPE)
                .HasForeignKey(e => e.ROOM_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE>()
                .Property(e => e.AUDIT_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SALE_PROFIT_CFG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE_PROFIT_CFG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE_PROFIT_CFG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE_PROFIT_CFG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE_PROFIT_CFG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SALE_PROFIT_CFG>()
                .Property(e => e.RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SALE_PROFIT_CFG>()
                .Property(e => e.IMP_PRICE_FROM)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SALE_PROFIT_CFG>()
                .Property(e => e.IMP_PRICE_TO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .HasMany(e => e.HIS_ROOM_SARO)
                .WithRequired(e => e.HIS_SAMPLE_ROOM)
                .HasForeignKey(e => e.SAMPLE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .HasMany(e => e.HIS_SARO_EXRO)
                .WithRequired(e => e.HIS_SAMPLE_ROOM)
                .HasForeignKey(e => e.SAMPLE_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SAMPLE_ROOM>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_SAMPLE_ROOM)
                .HasForeignKey(e => e.SAMPLE_ROOM_ID);

            modelBuilder.Entity<HIS_SARO_EXRO>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SARO_EXRO>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SARO_EXRO>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SARO_EXRO>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SARO_EXRO>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_CHANGE_DEBT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_CHANGE_DEBT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_CHANGE_DEBT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_CHANGE_DEBT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_CHANGE_DEBT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_IS_WAIT_CHILD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_IS_WAIT_CHILD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_IS_WAIT_CHILD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_IS_WAIT_CHILD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_IS_WAIT_CHILD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.NO_EXECUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .Property(e => e.CONFIRM_NO_EXCUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_EXP_MEST_BLOOD)
                .WithOptional(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_PARENT_ID);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_PARENT_ID);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_PARENT_ID);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_BILL)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_DEBT)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_DEPOSIT)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_FILE)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV1)
                .WithOptional(e => e.HIS_SERE_SERV2)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_MATY)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_REHA)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_SUIN)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERE_SERV_TEIN)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERVICE_CHANGE_REQ)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SERVICE_CHANGE_REQ1)
                .WithOptional(e => e.HIS_SERE_SERV1)
                .HasForeignKey(e => e.ALTER_SERE_SERV_ID);

            modelBuilder.Entity<HIS_SERE_SERV>()
                .HasMany(e => e.HIS_SESE_TRANS_REQ)
                .WithRequired(e => e.HIS_SERE_SERV)
                .HasForeignKey(e => e.SERE_SERV_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.PATIENT_BHYT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.PATIENT_PAY_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_PRIMARY_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_TOTAL_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_TOTAL_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_REAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_REAL_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_REAL_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.TDL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.TDL_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.DEBT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_DEBT>()
                .Property(e => e.TOTAL_PREVIOUS_DEBT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_SERE_SERV_DEPOSIT>()
                .HasMany(e => e.HIS_SESE_DEPO_REPAY)
                .WithRequired(e => e.HIS_SERE_SERV_DEPOSIT)
                .HasForeignKey(e => e.SERE_SERV_DEPOSIT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.DESCRIPTION_SAR_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.BED_CODE_LIST)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.DOC_PROTECTED_LOCATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.BACTERIAL_CULTIVATION_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.SUBCLINICAL_PRES_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.SUBCLINICAL_PRES_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.SUBCLINICAL_RESULT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.SUBCLINICAL_RESULT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.MICROCOPY_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.IMPLANTION_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.SUBCLINICAL_NURSE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.SUBCLINICAL_NURSE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.XML_DESCRIPTION_LOCATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.DESCRIPTION_BK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_EXT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.SERE_SERV_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_FILE>()
                .Property(e => e.CAPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.BEFORE_PTTT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.BEFORE_PTTT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.AFTER_PTTT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.AFTER_PTTT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.MANNER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.BEFORE_PTTT_ICD_TEXT__DELETE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.AFTER_PTTT_ICD_TEXT__DELETE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CM_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CM_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.WICK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.DRAINAGE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.PARTICIPANT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.PCI)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.STENTING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.LOCATION_INTERVENTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.REASON_INTERVENTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.INTRODUCER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.GUIDING_CATHETER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.GUITE_WIRE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.BALLON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.STENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.CONTRAST_AGENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.INSTRUMENTS_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .Property(e => e.STENT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT>()
                .HasMany(e => e.HIS_SESE_PTTT_METHOD)
                .WithRequired(e => e.HIS_SERE_SERV_PTTT)
                .HasForeignKey(e => e.SERE_SERV_PTTT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.MANNER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.SERE_SERV_PTTT_TEMP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_PTTT_TEMP>()
                .Property(e => e.SERE_SERV_PTTT_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_RATION>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERE_SERV_REHA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_REHA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_REHA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_REHA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_REHA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_REHA>()
                .HasMany(e => e.HIS_REHA_TRAIN)
                .WithRequired(e => e.HIS_SERE_SERV_REHA)
                .HasForeignKey(e => e.SERE_SERV_REHA_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERE_SERV_SUIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_SUIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_SUIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_SUIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_SUIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_SUIN>()
                .Property(e => e.VALUE)
                .HasPrecision(19, 5);

            modelBuilder.Entity<HIS_SERE_SERV_SUIN>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_DENSITY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.ANTIBIOTIC_RESISTANCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.ANTIBIOTIC_RESISTANCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.SRI_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.LEAVEN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEIN>()
                .Property(e => e.RESULT_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.SERE_SERV_TEMP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.SERE_SERV_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.DESCRIPTION_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.EMR_BUSINESS_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.EMR_DOCUMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERE_SERV_TEMP>()
                .Property(e => e.EMR_DOCUMENT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERV_SEGR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERV_SEGR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERV_SEGR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERV_SEGR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERV_SEGR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERV_SEGR>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_SERV_SEGR>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.HEIN_LIMIT_PRICE_OLD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.HEIN_LIMIT_RATIO_OLD)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.MAX_EXPEND)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.COGS)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.ESTIMATE_DURATION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.RATION_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.NOTICE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.PROCESS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.OTHER_PAY_SOURCE_ICDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.BODY_PART_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.TESTING_TECHNIQUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.APPLIED_PATIENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.SAMPLE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.MIN_PROC_TIME_EXCEPT_PATY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.MAX_PROC_TIME_EXCEPT_PATY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.PETROLEUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.PETROLEUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.TOTAL_TIME_EXCEPT_PATY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .Property(e => e.APPLIED_PATIENT_CLASSIFY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_APPOINTMENT_SERV)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_BED_BSTY)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.BED_SERVICE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_BED_LOG)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.BED_SERVICE_TYPE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_BLOOD_TYPE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_BLTY_SERVICE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_CARER_CARD)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_DEBATE)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SURGERY_SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_DEBATE1)
                .WithOptional(e => e.HIS_SERVICE1)
                .HasForeignKey(e => e.SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_EXP_BLTY_SERVICE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_ICD_SERVICE)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_KSK_SERVICE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_MACHINE_SERV_MATY)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_MATERIAL_TYPE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_PACKAGE_DETAIL)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_PATIENT)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.RECENT_SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_PTTT_GROUP_BEST)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.BED_SERVICE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_RATION_SCHEDULE)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_REMUNERATION)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_REST_RETR_TYPE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.REHA_SERVICE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_ROOM)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.DEFAULT_SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERE_SERV_RATION)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERE_SERV_TEMP)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERV_SEGR)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_CHANGE_REQ)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.ALTER_SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_CONDITION)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE1)
                .WithOptional(e => e.HIS_SERVICE2)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_FOLLOW)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_FOLLOW1)
                .WithRequired(e => e.HIS_SERVICE1)
                .HasForeignKey(e => e.FOLLOW_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_GROUP)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.PARENT_SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_HEIN)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_MACHINE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_MATY)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_METY)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_NUM_ORDER)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_PACKAGE)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_PACKAGE1)
                .WithRequired(e => e.HIS_SERVICE1)
                .HasForeignKey(e => e.SERVICE_ATTACH_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_PATY)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_RATI)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_RERE_TIME)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_RETY_CAT)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_ROOM)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_SAME)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SERVICE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SERVICE_SAME1)
                .WithRequired(e => e.HIS_SERVICE1)
                .HasForeignKey(e => e.SAME_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_SUIM_SETY_SUIN)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.SUIM_SERVICE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_TEST_INDEX)
                .WithRequired(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.TEST_SERVICE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE>()
                .HasMany(e => e.HIS_TREATMENT_TYPE)
                .WithOptional(e => e.HIS_SERVICE)
                .HasForeignKey(e => e.REQUIRED_SERVICE_ID);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APPROVAL_CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APPROVAL_CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.SERVICE_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.SERVICE_CONDITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .HasMany(e => e.HIS_EXP_MEST_MATERIAL)
                .WithOptional(e => e.HIS_SERVICE_CONDITION)
                .HasForeignKey(e => e.SERVICE_CONDITION_ID);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_SERVICE_CONDITION)
                .HasForeignKey(e => e.SERVICE_CONDITION_ID);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithOptional(e => e.HIS_SERVICE_CONDITION)
                .HasForeignKey(e => e.SERVICE_CONDITION_ID);

            modelBuilder.Entity<HIS_SERVICE_CONDITION>()
                .HasMany(e => e.HIS_SERVICE_PATY)
                .WithOptional(e => e.HIS_SERVICE_CONDITION)
                .HasForeignKey(e => e.SERVICE_CONDITION_ID);

            modelBuilder.Entity<HIS_SERVICE_FOLLOW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_FOLLOW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_FOLLOW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_FOLLOW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_FOLLOW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_FOLLOW>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_SERVICE_FOLLOW>()
                .Property(e => e.CONDITIONED_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_FOLLOW>()
                .Property(e => e.TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .Property(e => e.SERVICE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .Property(e => e.SERVICE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_GROUP>()
                .HasMany(e => e.HIS_SERV_SEGR)
                .WithRequired(e => e.HIS_SERVICE_GROUP)
                .HasForeignKey(e => e.SERVICE_GROUP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.SERVICE_HEIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_HEIN>()
                .Property(e => e.SERVICE_HEIN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MACHINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MACHINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MACHINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MACHINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MACHINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_MATY>()
                .Property(e => e.EXPEND_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERVICE_MATY>()
                .Property(e => e.EXPEND_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_MATY>()
                .Property(e => e.AMOUNT_BHYT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERVICE_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_METY>()
                .Property(e => e.EXPEND_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERVICE_METY>()
                .Property(e => e.EXPEND_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_METY>()
                .Property(e => e.AMOUNT_BHYT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PACKAGE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PACKAGE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PACKAGE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PACKAGE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PACKAGE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PACKAGE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.REQUEST_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.EXECUTE_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.HOUR_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.HOUR_TO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.REQUEST_DEPARMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_PATY>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_RATI>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RATI>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RATI>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RATI>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RATI>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.CONCLUSION_CLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.CONCLUSION_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.OCCUPATIONAL_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.CONCLUSION_CONSULTATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.EXAM_CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PLANNING_REQUEST)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.SURGERY_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.INTERACTION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_CIRC_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_RESP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_DIGE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_KIDN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_NEUR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_MUSC_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_ENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_STOM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_EYE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_OEND_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_MENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_NUTR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_MOTI_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_OBST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_DERM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.VIR_CREATE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.RECEIVE_SAMPLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.RECEIVE_SAMPLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.MACHINE_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .Property(e => e.ERX_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_BED_LOG)
                .WithOptional(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_DRUG_INTERVENTION)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_EXAM_SERE_DIRE)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.PRESCRIPTION_ID);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_EXP_MEST1)
                .WithOptional(e => e.HIS_SERVICE_REQ1)
                .HasForeignKey(e => e.SERVICE_REQ_ID);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_KSK_DRIVER)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_KSK_DRIVER_CAR)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_KSK_GENERAL)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_KSK_OCCUPATIONAL)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_KSK_OTHER)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_KSK_OVER_EIGHTEEN)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_KSK_PERIOD_DRIVER)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_KSK_UNDER_EIGHTEEN)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_SERE_SERV)
                .WithOptional(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_SERE_SERV_EXT)
                .WithOptional(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SUBCLINICAL_PRES_ID);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_SERE_SERV_RATION)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_SERVICE_REQ1)
                .WithOptional(e => e.HIS_SERVICE_REQ2)
                .HasForeignKey(e => e.PREVIOUS_SERVICE_REQ_ID);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_SERVICE_REQ11)
                .WithOptional(e => e.HIS_SERVICE_REQ3)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_SERVICE_REQ_MATY)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ>()
                .HasMany(e => e.HIS_SERVICE_REQ_METY)
                .WithRequired(e => e.HIS_SERVICE_REQ)
                .HasForeignKey(e => e.SERVICE_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.EXCEED_LIMIT_IN_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_MATY>()
                .Property(e => e.EXCEED_LIMIT_IN_DAY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.EXCEED_LIMIT_IN_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.EXCEED_LIMIT_IN_DAY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.ODD_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.OVER_RESULT_TEST_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_METY>()
                .Property(e => e.OVER_KIDNEY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_STT>()
                .Property(e => e.SERVICE_REQ_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_STT>()
                .Property(e => e.SERVICE_REQ_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_TYPE>()
                .Property(e => e.SERVICE_REQ_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_TYPE>()
                .Property(e => e.SERVICE_REQ_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_REQ_TYPE>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithRequired(e => e.HIS_SERVICE_REQ_TYPE)
                .HasForeignKey(e => e.SERVICE_REQ_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_RERE_TIME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RERE_TIME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RERE_TIME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RERE_TIME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RERE_TIME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RERE_TIME>()
                .Property(e => e.INSTR_TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RERE_TIME>()
                .Property(e => e.INSTR_TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RETY_CAT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RETY_CAT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RETY_CAT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RETY_CAT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_RETY_CAT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_SAME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_SAME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_SAME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_SAME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_SAME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .HasMany(e => e.HIS_SERE_SERV_TEMP)
                .WithOptional(e => e.HIS_SERVICE_TYPE)
                .HasForeignKey(e => e.SERVICE_TYPE_ID);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithRequired(e => e.HIS_SERVICE_TYPE)
                .HasForeignKey(e => e.SERVICE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_TYPE>()
                .HasMany(e => e.HIS_SURG_REMUNERATION)
                .WithRequired(e => e.HIS_SERVICE_TYPE)
                .HasForeignKey(e => e.SERVICE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_BILL_GOODS)
                .WithOptional(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_DEBT_GOODS)
                .WithOptional(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_EMTE_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_EMTE_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_INFUSION)
                .WithOptional(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_MATERIAL_TYPE)
                .WithOptional(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.IMP_UNIT_ID);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.IMP_UNIT_ID);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_NONE_MEDI_SERVICE)
                .WithRequired(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_SERVICE)
                .WithRequired(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_SERVICE_MATY)
                .WithRequired(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_SERVICE_METY)
                .WithRequired(e => e.HIS_SERVICE_UNIT)
                .HasForeignKey(e => e.SERVICE_UNIT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SERVICE_UNIT>()
                .HasMany(e => e.HIS_SERVICE_UNIT1)
                .WithOptional(e => e.HIS_SERVICE_UNIT2)
                .HasForeignKey(e => e.CONVERT_ID);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_PTTT_METHOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_PTTT_METHOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_PTTT_METHOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_PTTT_METHOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_PTTT_METHOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_PTTT_METHOD>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SESE_TRANS_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_TRANS_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_TRANS_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_TRANS_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_TRANS_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SESE_TRANS_REQ>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.IS_WITHIN_4_WEEK_SURGERY)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.SURGERY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.OTHER_EXTERNAL_CAUSES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.FETAL_INFANT_AFFECTED_ICD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .Property(e => e.DEATH_MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SEVERE_ILLNESS_INFO>()
                .HasMany(e => e.HIS_EVENTS_CAUSES_DEATH)
                .WithRequired(e => e.HIS_SEVERE_ILLNESS_INFO)
                .HasForeignKey(e => e.SEVERE_ILLNESS_INFO_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .Property(e => e.DAMAGE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .Property(e => e.DAMAGE_POSITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .Property(e => e.DAMAGE_TREAT_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SKIN_SURGERY_DESC>()
                .HasMany(e => e.HIS_SERE_SERV_PTTT)
                .WithOptional(e => e.HIS_SKIN_SURGERY_DESC)
                .HasForeignKey(e => e.SKIN_SURGERY_DESC_ID);

            modelBuilder.Entity<HIS_SOURCE_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SOURCE_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SOURCE_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SOURCE_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SOURCE_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SOURCE_MEDICINE>()
                .Property(e => e.SOURCE_MEDICINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SOURCE_MEDICINE>()
                .Property(e => e.SOURCE_MEDICINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .Property(e => e.SPECIALITY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .Property(e => e.BHYT_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SPECIALITY>()
                .HasMany(e => e.HIS_ROOM)
                .WithOptional(e => e.HIS_SPECIALITY)
                .HasForeignKey(e => e.SPECIALITY_ID);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.SPEED_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.SPEED_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.CONVERT_TIME_RATIO)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_SPEED_UNIT>()
                .Property(e => e.CONVERT_VOLUME_RATIO)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_STATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STATION>()
                .Property(e => e.STATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STATION>()
                .Property(e => e.STATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.SURGERY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.DEVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.BALLON_PRESSURE_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.RESULT_BEFORE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_STENT_CONCLUDE>()
                .Property(e => e.RESULT_AFTER)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.STORAGE_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.STORAGE_CONDITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.FROM_TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .Property(e => e.TO_TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_STORAGE_CONDITION>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_STORAGE_CONDITION)
                .HasForeignKey(e => e.STORAGE_CONDITION_ID);

            modelBuilder.Entity<HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.INSTR_TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.INSTR_TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .Property(e => e.SUIM_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .Property(e => e.SUIM_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .HasMany(e => e.HIS_SERE_SERV_SUIN)
                .WithRequired(e => e.HIS_SUIM_INDEX)
                .HasForeignKey(e => e.SUIM_INDEX_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_SUIM_INDEX)
                .HasForeignKey(e => e.SUIM_INDEX_ID);

            modelBuilder.Entity<HIS_SUIM_INDEX>()
                .HasMany(e => e.HIS_SUIM_SETY_SUIN)
                .WithRequired(e => e.HIS_SUIM_INDEX)
                .HasForeignKey(e => e.SUIM_INDEX_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .Property(e => e.SUIM_INDEX_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .Property(e => e.SUIM_INDEX_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .Property(e => e.SUIM_INDEX_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_INDEX_UNIT>()
                .HasMany(e => e.HIS_SUIM_INDEX)
                .WithOptional(e => e.HIS_SUIM_INDEX_UNIT)
                .HasForeignKey(e => e.SUIM_INDEX_UNIT_ID);

            modelBuilder.Entity<HIS_SUIM_SETY_SUIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_SETY_SUIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_SETY_SUIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_SETY_SUIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUIM_SETY_SUIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.SUPPLIER_SHORT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.REPRESENTATIVE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.FAX)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.POSITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.AUTH_LETTER_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.CONTRACT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.BANK_ACCOUNT)
                .HasPrecision(30, 0);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .Property(e => e.BANK_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_ANTICIPATE_BLTY)
                .WithOptional(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_ANTICIPATE_MATY)
                .WithOptional(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_ANTICIPATE_METY)
                .WithOptional(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_BID_BLOOD_TYPE)
                .WithRequired(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_BID_MATERIAL_TYPE)
                .WithRequired(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_BID_MEDICINE_TYPE)
                .WithRequired(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_BLOOD)
                .WithOptional(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_IMP_MEST)
                .WithOptional(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_IMP_MEST_PROPOSE)
                .WithRequired(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_MATERIAL)
                .WithOptional(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_MEDICAL_CONTRACT)
                .WithRequired(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_MEDICAL_CONTRACT1)
                .WithOptional(e => e.HIS_SUPPLIER1)
                .HasForeignKey(e => e.DOCUMENT_SUPPLIER_ID);

            modelBuilder.Entity<HIS_SUPPLIER>()
                .HasMany(e => e.HIS_MEDICINE)
                .WithOptional(e => e.HIS_SUPPLIER)
                .HasForeignKey(e => e.SUPPLIER_ID);

            modelBuilder.Entity<HIS_SURG_REMU_DETAIL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMU_DETAIL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMU_DETAIL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMU_DETAIL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMU_DETAIL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMU_DETAIL>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_SURG_REMUNERATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMUNERATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMUNERATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMUNERATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMUNERATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMUNERATION>()
                .Property(e => e.SURG_REMUNERATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMUNERATION>()
                .Property(e => e.SURG_REMUNERATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_SURG_REMUNERATION>()
                .HasMany(e => e.HIS_SURG_REMU_DETAIL)
                .WithRequired(e => e.HIS_SURG_REMUNERATION)
                .HasForeignKey(e => e.SURG_REMUNERATION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.NORMATION_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.CONVERT_RATIO_MLCT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_A)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_B)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_AB)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_O)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_RH_PLUS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_RH_MINUS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .HasMany(e => e.HIS_SERE_SERV_TEIN)
                .WithOptional(e => e.HIS_TEST_INDEX)
                .HasForeignKey(e => e.TEST_INDEX_ID);

            modelBuilder.Entity<HIS_TEST_INDEX>()
                .HasMany(e => e.HIS_TEST_INDEX_RANGE)
                .WithRequired(e => e.HIS_TEST_INDEX)
                .HasForeignKey(e => e.TEST_INDEX_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TEST_INDEX_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_GROUP>()
                .Property(e => e.TEST_INDEX_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_GROUP>()
                .Property(e => e.TEST_INDEX_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_GROUP>()
                .HasMany(e => e.HIS_TEST_INDEX)
                .WithOptional(e => e.HIS_TEST_INDEX_GROUP)
                .HasForeignKey(e => e.TEST_INDEX_GROUP_ID);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.MIN_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.MAX_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.NORMAL_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.WARNING_MIN_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_RANGE>()
                .Property(e => e.WARNING_MAX_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .Property(e => e.TEST_INDEX_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .Property(e => e.TEST_INDEX_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .Property(e => e.TEST_INDEX_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_INDEX_UNIT>()
                .HasMany(e => e.HIS_TEST_INDEX)
                .WithOptional(e => e.HIS_TEST_INDEX_UNIT)
                .HasForeignKey(e => e.TEST_INDEX_UNIT_ID);

            modelBuilder.Entity<HIS_TEST_SAMPLE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_SAMPLE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_SAMPLE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_SAMPLE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_SAMPLE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_SAMPLE_TYPE>()
                .Property(e => e.TEST_SAMPLE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_SAMPLE_TYPE>()
                .Property(e => e.TEST_SAMPLE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_SAMPLE_TYPE>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_TEST_SAMPLE_TYPE)
                .HasForeignKey(e => e.TEST_SAMPLE_TYPE_ID);

            modelBuilder.Entity<HIS_TEST_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_TYPE>()
                .Property(e => e.TEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_TYPE>()
                .Property(e => e.TEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEST_TYPE>()
                .HasMany(e => e.HIS_SERVICE)
                .WithOptional(e => e.HIS_TEST_TYPE)
                .HasForeignKey(e => e.TEST_TYPE_ID);

            modelBuilder.Entity<HIS_TEXT_LIB>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEXT_LIB>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEXT_LIB>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEXT_LIB>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEXT_LIB>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEXT_LIB>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEXT_LIB>()
                .Property(e => e.HASHTAG)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TEXT_LIB>()
                .Property(e => e.HOT_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.MEDICAL_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.SUBCLINICAL_PROCESSES_BK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.CARE_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.GENERAL_EXPRESSION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.ORIENTATION_CAPACITY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EMOTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.PERCEPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.FORM_OF_THINKING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.CONTENT_OF_THINKING)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.INSTINCTIVELY_BEHAVIOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.AWARENESS_BEHAVIOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.MEMORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.INTELLECTUAL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.CONCENTRATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.CARDIOVASCULAR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EMR_DOCUMENT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.EMR_DOCUMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.CONTENT_BK)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.SUBCLINICAL_PROCESSES)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.DISEASE_STAGE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .Property(e => e.REHABILITATION_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING>()
                .HasMany(e => e.HIS_CARE)
                .WithOptional(e => e.HIS_TRACKING)
                .HasForeignKey(e => e.TRACKING_ID);

            modelBuilder.Entity<HIS_TRACKING>()
                .HasMany(e => e.HIS_DEBATE)
                .WithOptional(e => e.HIS_TRACKING)
                .HasForeignKey(e => e.TRACKING_ID);

            modelBuilder.Entity<HIS_TRACKING>()
                .HasMany(e => e.HIS_DHST)
                .WithOptional(e => e.HIS_TRACKING)
                .HasForeignKey(e => e.TRACKING_ID);

            modelBuilder.Entity<HIS_TRACKING>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_TRACKING)
                .HasForeignKey(e => e.TRACKING_ID);

            modelBuilder.Entity<HIS_TRACKING>()
                .HasMany(e => e.HIS_SERVICE_REQ1)
                .WithOptional(e => e.HIS_TRACKING1)
                .HasForeignKey(e => e.USED_FOR_TRACKING_ID);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.MEDICAL_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.BREATH_RATE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.CHEST)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.BELLY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.VIR_BMI)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.VIR_BODY_SURFACE_AREA)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.TRACKING_TEMP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRACKING_TEMP>()
                .Property(e => e.TRACKING_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_FORM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_FORM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_FORM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_FORM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_FORM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_FORM>()
                .Property(e => e.TRAN_PATI_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_FORM>()
                .Property(e => e.TRAN_PATI_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_FORM>()
                .HasMany(e => e.HIS_TRAN_PATI_TEMP)
                .WithRequired(e => e.HIS_TRAN_PATI_FORM)
                .HasForeignKey(e => e.TRAN_PATI_FORM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRAN_PATI_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_REASON>()
                .Property(e => e.TRAN_PATI_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_REASON>()
                .Property(e => e.TRAN_PATI_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_REASON>()
                .HasMany(e => e.HIS_TRAN_PATI_TEMP)
                .WithRequired(e => e.HIS_TRAN_PATI_REASON)
                .HasForeignKey(e => e.TRAN_PATI_REASON_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .Property(e => e.TRAN_PATI_TECH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .Property(e => e.TRAN_PATI_TECH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .HasMany(e => e.HIS_TRAN_PATI_TEMP)
                .WithOptional(e => e.HIS_TRAN_PATI_TECH)
                .HasForeignKey(e => e.TRAN_PATI_TECH_ID);

            modelBuilder.Entity<HIS_TRAN_PATI_TECH>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_TRAN_PATI_TECH)
                .HasForeignKey(e => e.TRAN_PATI_TECH_ID);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.TRAN_PATI_TEMP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.TRAN_PATI_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRAN_PATI_TEMP>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.BANK_JSON_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.TRANS_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.BANK_MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .HasMany(e => e.HIS_SESE_TRANS_REQ)
                .WithRequired(e => e.HIS_TRANS_REQ)
                .HasForeignKey(e => e.TRANS_REQ_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANS_REQ>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_TRANS_REQ)
                .HasForeignKey(e => e.TRANS_REQ_ID);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.KC_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_BILL_FUND_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.EXEMPTION)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.EXEMPTION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.SELLER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.SELLER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.SELLER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.SELLER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.SELLER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BUYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BUYER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BUYER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BUYER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TIG_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TIG_VOID_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.INVOICE_SYS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.INVOICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.NATIONAL_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BUYER_ORGANIZATION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_MEDICINE_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_MATERIAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_SUBCLINICAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_SURG_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_EXAM_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_BED_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_DEPOSIT_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_REPAY_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_BLOOD_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TRANSACTION_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BUYER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PREVIOUS_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_PREVIOUS_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.SERE_SERV_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.EINVOICE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_DEBT_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_TRANSFER_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.SWIPE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.ALL_TRANS_CODES_IN_INVOICE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.ROUNDED_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.ROUND_PRICE_BASE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.POS_INVOICE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.POS_PAN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.POS_CARD_HOLDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.POS_RESULT_JSON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.EINVOICE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.REPLACE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_ORIGINAL_EI_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_ORIGINAL_EI_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.EINVOICE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.TDL_BANK_CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_REJECT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_REJECT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_REJECT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BANK_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BEFORE_UL_CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .Property(e => e.BEFORE_UL_CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_BILL_FUND)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.BILL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_BILL_GOODS)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.BILL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_DEBT_GOODS)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.DEBT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_DEPOSIT_REQ)
                .WithOptional(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.DEPOSIT_ID);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.BILL_ID);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_EXP_MEST1)
                .WithOptional(e => e.HIS_TRANSACTION1)
                .HasForeignKey(e => e.DEBT_ID);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_SALE)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.TRANSACTION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_SERE_SERV_BILL)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.BILL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_SERE_SERV_DEBT)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.DEBT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_SERE_SERV_DEPOSIT)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.DEPOSIT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_SESE_DEPO_REPAY)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.REPAY_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_TRANSACTION_EXP)
                .WithRequired(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.TRANSACTION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_TRANSACTION1)
                .WithOptional(e => e.HIS_TRANSACTION2)
                .HasForeignKey(e => e.BILL_ID);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_TRANSACTION11)
                .WithOptional(e => e.HIS_TRANSACTION3)
                .HasForeignKey(e => e.PREVIOUS_ID);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_TRANSACTION12)
                .WithOptional(e => e.HIS_TRANSACTION4)
                .HasForeignKey(e => e.DEBT_BILL_ID);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_TRANSACTION13)
                .WithOptional(e => e.HIS_TRANSACTION5)
                .HasForeignKey(e => e.ORIGINAL_TRANSACTION_ID);

            modelBuilder.Entity<HIS_TRANSACTION>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithOptional(e => e.HIS_TRANSACTION)
                .HasForeignKey(e => e.BILL_ID);

            modelBuilder.Entity<HIS_TRANSACTION_EXP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_EXP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_EXP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_EXP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_EXP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_EXP>()
                .Property(e => e.TDL_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_TYPE>()
                .Property(e => e.TRANSACTION_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_TYPE>()
                .Property(e => e.TRANSACTION_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSACTION_TYPE>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithRequired(e => e.HIS_TRANSACTION_TYPE)
                .HasForeignKey(e => e.TRANSACTION_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.SKIN)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.BREATH_RATE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRANSFUSION>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.TRANSFUSION_VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TRANSFUSION_SUM>()
                .HasMany(e => e.HIS_TRANSFUSION)
                .WithRequired(e => e.HIS_TRANSFUSION_SUM)
                .HasForeignKey(e => e.TRANSFUSION_SUM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.UNAPPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.UNAPPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.HOSPITALIZE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.HOSPITALIZE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.END_TYPE_EXT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.PREGNANCY_TERMINATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DEATH_CERT_ISSUER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DEATH_CERT_ISSUER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.DEATH_SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.XML_CHECKIN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.XML_CHECKIN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.XML130_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.VIR_STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .Property(e => e.XML130_CHECK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_ACCIDENT_HURT)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_ADR)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_ALLERGY_CARD)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_ANTIBIOTIC_REQUEST)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_APPOINTMENT_SERV)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_BABY)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_CARE)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_CARE_SUM)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_CARER_CARD_BORROW)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_DEBATE)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_DEPARTMENT_TRAN)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_DEPOSIT_REQ)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_DHST)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_EXP_MEST_MATY_REQ)
                .WithOptional(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_EXP_MEST_METY_REQ)
                .WithOptional(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_HEIN_APPROVAL)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_HIV_TREATMENT)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_HOLD_RETURN)
                .WithOptional(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_IMP_MEST_MATE_REQ)
                .WithOptional(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_IMP_MEST_MEDI_REQ)
                .WithOptional(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_INFUSION_SUM)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_MEDI_REACT_SUM)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_MEDICAL_ASSESSMENT)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_MEDICINE_INTERACTIVE)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_MR_CHECK_SUMMARY)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_OBEY_CONTRAINDI)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ALTER)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_PREPARE)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_REHA_SUM)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_SEVERE_ILLNESS_INFO)
                .WithOptional(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TRACKING)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TRANS_REQ)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TRANSFUSION_SUM)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TREATMENT_BED_ROOM)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TREATMENT_BORROW)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TREATMENT_FILE)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TREATMENT_LOGGING)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT>()
                .HasMany(e => e.HIS_TREATMENT_UNLIMIT)
                .WithRequired(e => e.HIS_TREATMENT)
                .HasForeignKey(e => e.TREATMENT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ADD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ADD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.REMOVE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.REMOVE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .HasMany(e => e.HIS_BED_LOG)
                .WithRequired(e => e.HIS_TREATMENT_BED_ROOM)
                .HasForeignKey(e => e.TREATMENT_BED_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_BED_ROOM>()
                .HasMany(e => e.HIS_PATIENT_OBSERVATION)
                .WithRequired(e => e.HIS_TREATMENT_BED_ROOM)
                .HasForeignKey(e => e.TREATMENT_BED_ROOM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.BORROW_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.BORROW_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.GIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.GIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_BORROW>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .Property(e => e.TREATMENT_END_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .Property(e => e.END_CODE_PREFIX)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_TREATMENT_END_TYPE)
                .HasForeignKey(e => e.TREATMENT_END_TYPE_ID);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE_EXT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE_EXT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE_EXT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE_EXT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE_EXT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE_EXT>()
                .Property(e => e.TREATMENT_END_TYPE_EXT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE_EXT>()
                .Property(e => e.TREATMENT_END_TYPE_EXT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_END_TYPE_EXT>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_TREATMENT_END_TYPE_EXT)
                .HasForeignKey(e => e.TREATMENT_END_TYPE_EXT_ID);

            modelBuilder.Entity<HIS_TREATMENT_FILE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_FILE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_FILE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_FILE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_FILE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_FILE>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_FILE>()
                .Property(e => e.FILE_URLS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_FILE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOG_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOG_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOG_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOG_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOG_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOG_TYPE>()
                .Property(e => e.TREATMENT_LOG_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOG_TYPE>()
                .Property(e => e.TREATMENT_LOG_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOG_TYPE>()
                .HasMany(e => e.HIS_TREATMENT_LOGGING)
                .WithRequired(e => e.HIS_TREATMENT_LOG_TYPE)
                .HasForeignKey(e => e.TREATMENT_LOG_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_LOGGING>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOGGING>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOGGING>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOGGING>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOGGING>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_LOGGING>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_RESULT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_RESULT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_RESULT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_RESULT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_RESULT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_RESULT>()
                .Property(e => e.TREATMENT_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_RESULT>()
                .Property(e => e.TREATMENT_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_RESULT>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_TREATMENT_RESULT)
                .HasForeignKey(e => e.TREATMENT_RESULT_ID);

            modelBuilder.Entity<HIS_TREATMENT_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_ROOM>()
                .Property(e => e.TREATMENT_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_ROOM>()
                .Property(e => e.TREATMENT_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_ROOM>()
                .HasMany(e => e.HIS_BED)
                .WithOptional(e => e.HIS_TREATMENT_ROOM)
                .HasForeignKey(e => e.TREATMENT_ROOM_ID);

            modelBuilder.Entity<HIS_TREATMENT_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_STT>()
                .Property(e => e.TREATMENT_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_STT>()
                .Property(e => e.TREATMENT_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.HEIN_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .Property(e => e.END_CODE_PREFIX)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_DEPARTMENT)
                .WithOptional(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.REQ_SURG_TREATMENT_TYPE_ID);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_EMR_COVER_CONFIG)
                .WithRequired(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.TREATMENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_EXME_REASON_CFG)
                .WithRequired(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.TREATMENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_HEIN_APPROVAL)
                .WithRequired(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.TREATMENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_MEST_PATY_TRTY)
                .WithRequired(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.TREATMENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_PATIENT_TYPE_ALTER)
                .WithRequired(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.TREATMENT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_PROGRAM)
                .WithOptional(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.TREATMENT_TYPE_ID);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.TREATMENT_TYPE_ID);

            modelBuilder.Entity<HIS_TREATMENT_TYPE>()
                .HasMany(e => e.HIS_TREATMENT)
                .WithOptional(e => e.HIS_TREATMENT_TYPE)
                .HasForeignKey(e => e.IN_TREATMENT_TYPE_ID);

            modelBuilder.Entity<HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.UNLIMIT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_REASON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_REASON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_REASON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_REASON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_REASON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_REASON>()
                .Property(e => e.UNLIMIT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_TYPE>()
                .Property(e => e.UNLIMIT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_TYPE>()
                .Property(e => e.UNLIMIT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_UNLIMIT_TYPE>()
                .HasMany(e => e.HIS_TREATMENT_UNLIMIT)
                .WithRequired(e => e.HIS_UNLIMIT_TYPE)
                .HasForeignKey(e => e.UNLIMIT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP>()
                .Property(e => e.USER_GROUP_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP>()
                .HasMany(e => e.HIS_USER_GROUP_TEMP_DT)
                .WithRequired(e => e.HIS_USER_GROUP_TEMP)
                .HasForeignKey(e => e.USER_GROUP_TEMP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_INVOICE_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_INVOICE_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_INVOICE_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_INVOICE_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_INVOICE_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_INVOICE_BOOK>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_USER_ROOM>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_APPOINTMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_APPOINTMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_APPOINTMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_APPOINTMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_APPOINTMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_EXAM_RESULT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_EXAM_RESULT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_EXAM_RESULT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_EXAM_RESULT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_EXAM_RESULT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_EXAM_RESULT>()
                .Property(e => e.VACC_EXAM_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_EXAM_RESULT>()
                .Property(e => e.VACC_EXAM_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_EXAM_RESULT>()
                .HasMany(e => e.HIS_VAEX_VAER)
                .WithRequired(e => e.HIS_VACC_EXAM_RESULT)
                .HasForeignKey(e => e.VACC_EXAM_RESULT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACC_HEALTH_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_HEALTH_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_HEALTH_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_HEALTH_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_HEALTH_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_HEALTH_STT>()
                .Property(e => e.VACC_HEALTH_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_HEALTH_STT>()
                .Property(e => e.VACC_HEALTH_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_PLACE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_PLACE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_PLACE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_PLACE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_PLACE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_PLACE>()
                .Property(e => e.VACC_REACT_PLACE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_PLACE>()
                .Property(e => e.VACC_REACT_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_PLACE>()
                .HasMany(e => e.HIS_VACCINATION_VRPL)
                .WithRequired(e => e.HIS_VACC_REACT_PLACE)
                .HasForeignKey(e => e.VACC_REACT_PLACE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .Property(e => e.VACC_REACT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .Property(e => e.VACC_REACT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .HasMany(e => e.HIS_VACCINATION_VRTY)
                .WithRequired(e => e.HIS_VACC_REACT_TYPE)
                .HasForeignKey(e => e.VACC_REACT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACC_REACT_TYPE>()
                .HasMany(e => e.HIS_VARE_VART)
                .WithRequired(e => e.HIS_VACC_REACT_TYPE)
                .HasForeignKey(e => e.VACC_REACT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.VACCINATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.FOLLOW_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.FOLLOW_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.REACT_RESPONSER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .Property(e => e.REACT_REPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .HasMany(e => e.HIS_EXP_MEST)
                .WithOptional(e => e.HIS_VACCINATION)
                .HasForeignKey(e => e.VACCINATION_ID);

            modelBuilder.Entity<HIS_VACCINATION>()
                .HasMany(e => e.HIS_VACCINATION_VRPL)
                .WithRequired(e => e.HIS_VACCINATION)
                .HasForeignKey(e => e.VACCINATION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINATION>()
                .HasMany(e => e.HIS_VACCINATION_VRTY)
                .WithRequired(e => e.HIS_VACCINATION)
                .HasForeignKey(e => e.VACCINATION_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.VACCINATION_EXAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.SPECIALIST_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.SPECIALIST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .Property(e => e.SPECIALIST_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .HasMany(e => e.HIS_DHST)
                .WithOptional(e => e.HIS_VACCINATION_EXAM)
                .HasForeignKey(e => e.VACCINATION_EXAM_ID);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .HasMany(e => e.HIS_VACC_APPOINTMENT)
                .WithRequired(e => e.HIS_VACCINATION_EXAM)
                .HasForeignKey(e => e.VACCINATION_EXAM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithRequired(e => e.HIS_VACCINATION_EXAM)
                .HasForeignKey(e => e.VACCINATION_EXAM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINATION_EXAM>()
                .HasMany(e => e.HIS_VAEX_VAER)
                .WithRequired(e => e.HIS_VACCINATION_EXAM)
                .HasForeignKey(e => e.VACCINATION_EXAM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .Property(e => e.VACCINATION_REACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .Property(e => e.VACCINATION_REACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithOptional(e => e.HIS_VACCINATION_REACT)
                .HasForeignKey(e => e.VACCINATION_REACT_ID);

            modelBuilder.Entity<HIS_VACCINATION_REACT>()
                .HasMany(e => e.HIS_VARE_VART)
                .WithRequired(e => e.HIS_VACCINATION_REACT)
                .HasForeignKey(e => e.VACCINATION_REACT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINATION_RESULT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_RESULT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_RESULT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_RESULT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_RESULT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_RESULT>()
                .Property(e => e.VACCINATION_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_RESULT>()
                .Property(e => e.VACCINATION_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_RESULT>()
                .HasMany(e => e.HIS_EXP_MEST_MEDICINE)
                .WithOptional(e => e.HIS_VACCINATION_RESULT)
                .HasForeignKey(e => e.VACCINATION_RESULT_ID);

            modelBuilder.Entity<HIS_VACCINATION_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_STT>()
                .Property(e => e.VACCINATION_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_STT>()
                .Property(e => e.VACCINATION_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_STT>()
                .HasMany(e => e.HIS_VACCINATION)
                .WithRequired(e => e.HIS_VACCINATION_STT)
                .HasForeignKey(e => e.VACCINATION_STT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINATION_VRPL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRPL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRPL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRPL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRPL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINATION_VRTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .Property(e => e.VACCINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .Property(e => e.VACCINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .HasMany(e => e.HIS_KSK_UNEI_VATY)
                .WithRequired(e => e.HIS_VACCINE_TYPE)
                .HasForeignKey(e => e.VACCINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .HasMany(e => e.HIS_MEDICINE_TYPE)
                .WithOptional(e => e.HIS_VACCINE_TYPE)
                .HasForeignKey(e => e.VACCINE_TYPE_ID);

            modelBuilder.Entity<HIS_VACCINE_TYPE>()
                .HasMany(e => e.HIS_VACC_APPOINTMENT)
                .WithRequired(e => e.HIS_VACCINE_TYPE)
                .HasForeignKey(e => e.VACCINE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_VAEX_VAER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VAEX_VAER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VAEX_VAER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VAEX_VAER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VAEX_VAER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VAEX_VAER>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VARE_VART>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VARE_VART>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VARE_VART>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VARE_VART>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VARE_VART>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.VITAMIN_A_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WARNING_FEE_CFG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WARNING_FEE_CFG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WARNING_FEE_CFG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WARNING_FEE_CFG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WARNING_FEE_CFG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WARNING_FEE_CFG>()
                .Property(e => e.WARNING_FEE_CFG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WARNING_FEE_CFG>()
                .Property(e => e.WARNING_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HIS_WARNING_FEE_CFG>()
                .Property(e => e.COLOR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WELFARE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WELFARE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WELFARE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WELFARE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WELFARE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WELFARE_TYPE>()
                .Property(e => e.WELFARE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WELFARE_TYPE>()
                .Property(e => e.WELFARE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.WORK_PLACE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.DIRECTOR_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.CONTACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.CONTACT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .HasMany(e => e.HIS_BLOOD_GIVER)
                .WithOptional(e => e.HIS_WORK_PLACE)
                .HasForeignKey(e => e.WORK_PLACE_ID);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .HasMany(e => e.HIS_KSK_CONTRACT)
                .WithRequired(e => e.HIS_WORK_PLACE)
                .HasForeignKey(e => e.WORK_PLACE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .HasMany(e => e.HIS_PATIENT)
                .WithOptional(e => e.HIS_WORK_PLACE)
                .HasForeignKey(e => e.WORK_PLACE_ID);

            modelBuilder.Entity<HIS_WORK_PLACE>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_WORK_PLACE)
                .HasForeignKey(e => e.BUYER_WORK_PLACE_ID);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.WORKING_SHIFT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.WORKING_SHIFT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .Property(e => e.TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .HasMany(e => e.HIS_ACCOUNT_BOOK)
                .WithOptional(e => e.HIS_WORKING_SHIFT)
                .HasForeignKey(e => e.WORKING_SHIFT_ID);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .HasMany(e => e.HIS_SERVICE_REQ)
                .WithOptional(e => e.HIS_WORKING_SHIFT)
                .HasForeignKey(e => e.EXECUTE_WORKING_SHIFT_ID);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .HasMany(e => e.HIS_SERVICE_REQ1)
                .WithOptional(e => e.HIS_WORKING_SHIFT1)
                .HasForeignKey(e => e.EXE_WORKING_SHIFT_ID);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .HasMany(e => e.HIS_SERVICE_REQ2)
                .WithOptional(e => e.HIS_WORKING_SHIFT2)
                .HasForeignKey(e => e.REQ_WORKING_SHIFT_ID);

            modelBuilder.Entity<HIS_WORKING_SHIFT>()
                .HasMany(e => e.HIS_TRANSACTION)
                .WithOptional(e => e.HIS_WORKING_SHIFT)
                .HasForeignKey(e => e.WORKING_SHIFT_ID);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.EXPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .Property(e => e.EXPENSE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .Property(e => e.EXPENSE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .HasMany(e => e.HTC_EXPENSE)
                .WithRequired(e => e.HTC_EXPENSE_TYPE)
                .HasForeignKey(e => e.EXPENSE_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HTC_EXPENSE_TYPE>()
                .HasMany(e => e.HTC_EXPENSE_TYPE1)
                .WithOptional(e => e.HTC_EXPENSE_TYPE2)
                .HasForeignKey(e => e.PARENT_ID);

            modelBuilder.Entity<HTC_PERIOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .Property(e => e.PERIOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .Property(e => e.PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .HasMany(e => e.HTC_EXPENSE)
                .WithRequired(e => e.HTC_PERIOD)
                .HasForeignKey(e => e.PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .HasMany(e => e.HTC_PERIOD_DEPARTMENT)
                .WithRequired(e => e.HTC_PERIOD)
                .HasForeignKey(e => e.PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .HasMany(e => e.HTC_REPARTITION_RATIO)
                .WithRequired(e => e.HTC_PERIOD)
                .HasForeignKey(e => e.PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HTC_PERIOD>()
                .HasMany(e => e.HTC_REVENUE)
                .WithRequired(e => e.HTC_PERIOD)
                .HasForeignKey(e => e.PERIOD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.VIR_FROM_OTHER_CLINICAL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.VIR_NOT_END_TREATMENT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HTC_REPARTITION_RATIO>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_RATIO>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_RATIO>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_RATIO>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_RATIO>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_RATIO>()
                .Property(e => e.RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<HTC_REPARTITION_RATIO>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_RATIO>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_TYPE>()
                .Property(e => e.REPARTITION_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_TYPE>()
                .Property(e => e.REPARTITION_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REPARTITION_TYPE>()
                .HasMany(e => e.HTC_REPARTITION_RATIO)
                .WithRequired(e => e.HTC_REPARTITION_TYPE)
                .HasForeignKey(e => e.REPARTITION_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REVENUE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REQUEST_ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REQUEST_ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.EXECUTE_ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.EXECUTE_ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<HTC_REVENUE>()
                .Property(e => e.XANHPON_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.ACTIVE_INGREDIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.ACTIVE_INGREDIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MATERIAL_BEAN>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<L_HIS_MATERIAL_BEAN>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MATERIAL_BEAN>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MATERIAL_BEAN>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MATERIAL_BEAN>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MATERIAL_BEAN>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MATERIAL_BEAN>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_MEDICINE_BEAN>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.RESPONSIBLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.RESPONSIBLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.WORKING_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.WORKING_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.TOTAL_NEW_SERVICE_REQ)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.TOTAL_TODAY_SERVICE_REQ)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.TOTAL_WAIT_TODAY_SERVICE_REQ)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER>()
                .Property(e => e.TOTAL_END_SERVICE_REQ)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER_1>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER_1>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER_1>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_ROOM_COUNTER_1>()
                .Property(e => e.TOTAL_TODAY_PATIENT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.MACHINE_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ>()
                .Property(e => e.ORDER_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_SERVICE_REQ_1>()
                .Property(e => e.SERVICE_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_BILL_OTHER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_BILL_EXEMPTION)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_BILL_FUND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_DISCOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_1>()
                .Property(e => e.REMAIN_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_2>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.UNAPPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.UNAPPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_3>()
                .Property(e => e.LAST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.DISPLAY_COLOR)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TREATMENT_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TREATMENT_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.LAST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<L_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.LAST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ANTIBIOTIC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ANTIBIOTIC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ANTIBIOTIC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ANTIBIOTIC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ANTIBIOTIC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ANTIBIOTIC>()
                .Property(e => e.ANTIBIOTIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ANTIBIOTIC>()
                .Property(e => e.ANTIBIOTIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ANTIBIOTIC>()
                .HasMany(e => e.LIS_BAC_ANTIBIOTIC)
                .WithRequired(e => e.LIS_ANTIBIOTIC)
                .HasForeignKey(e => e.ANTIBIOTIC_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.MIC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<LIS_BACTERIUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM>()
                .Property(e => e.BACTERIUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM>()
                .Property(e => e.BACTERIUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM>()
                .HasMany(e => e.LIS_BAC_ANTIBIOTIC)
                .WithRequired(e => e.LIS_BACTERIUM)
                .HasForeignKey(e => e.BACTERIUM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LIS_BACTERIUM_FAMILY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM_FAMILY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM_FAMILY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM_FAMILY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM_FAMILY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM_FAMILY>()
                .Property(e => e.BACTERIUM_FAMILY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM_FAMILY>()
                .Property(e => e.BACTERIUM_FAMILY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BACTERIUM_FAMILY>()
                .HasMany(e => e.LIS_BACTERIUM)
                .WithRequired(e => e.LIS_BACTERIUM_FAMILY)
                .HasForeignKey(e => e.BACTERIUM_FAMILY_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LIS_BARCODE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BARCODE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BARCODE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BARCODE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BARCODE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_BARCODE>()
                .Property(e => e.BARCODE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.KEY)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_CONFIG>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .HasMany(e => e.LIS_MACHINE_INDEX)
                .WithRequired(e => e.LIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LIS_MACHINE>()
                .HasMany(e => e.LIS_RESULT)
                .WithOptional(e => e.LIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID);

            modelBuilder.Entity<LIS_MACHINE>()
                .HasMany(e => e.LIS_SAMPLE_SERVICE)
                .WithOptional(e => e.LIS_MACHINE)
                .HasForeignKey(e => e.MACHINE_ID);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.MACHINE_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.MACHINE_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.FORMAT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .Property(e => e.RESULT_COEFFICIENT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<LIS_MACHINE_INDEX>()
                .HasMany(e => e.LIS_TEST_INDEX_MAP)
                .WithOptional(e => e.LIS_MACHINE_INDEX)
                .HasForeignKey(e => e.MACHINE_INDEX_ID);

            modelBuilder.Entity<LIS_ORDINAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ORDINAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ORDINAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ORDINAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ORDINAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ORDINAL>()
                .Property(e => e.BASE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_ORDINAL>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.TEST_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.SUMMARY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.TEST_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.TEST_INDEX_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.MACHINE_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.MACHINE_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.MIC)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.SRI_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.ANTIBIOTIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.ANTIBIOTIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.BACTERIUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.BACTERIUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.BACTERIUM_FAMILY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_RESULT>()
                .Property(e => e.BACTERIUM_FAMILY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.VIR_DATE_BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.SAMPLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.SAMPLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.REJECT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .Property(e => e.KSK_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE>()
                .HasMany(e => e.LIS_SAMPLE_SERVICE)
                .WithRequired(e => e.LIS_SAMPLE)
                .HasForeignKey(e => e.SAMPLE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LIS_SAMPLE_CONDITION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_CONDITION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_CONDITION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_CONDITION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_CONDITION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_CONDITION>()
                .Property(e => e.SAMPLE_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_CONDITION>()
                .Property(e => e.SAMPLE_CONDITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_CONDITION>()
                .HasMany(e => e.LIS_SAMPLE)
                .WithOptional(e => e.LIS_SAMPLE_CONDITION)
                .HasForeignKey(e => e.SAMPLE_CONDITION_ID);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE>()
                .HasMany(e => e.LIS_RESULT)
                .WithOptional(e => e.LIS_SAMPLE_SERVICE)
                .HasForeignKey(e => e.SAMPLE_SERVICE_ID);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE_STT>()
                .Property(e => e.SAMPLE_SERVICE_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE_STT>()
                .Property(e => e.SAMPLE_SERVICE_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_SERVICE_STT>()
                .HasMany(e => e.LIS_SAMPLE_SERVICE)
                .WithRequired(e => e.LIS_SAMPLE_SERVICE_STT)
                .HasForeignKey(e => e.SAMPLE_SERVICE_STT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LIS_SAMPLE_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_STT>()
                .Property(e => e.SAMPLE_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_STT>()
                .Property(e => e.SAMPLE_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_STT>()
                .HasMany(e => e.LIS_SAMPLE)
                .WithRequired(e => e.LIS_SAMPLE_STT)
                .HasForeignKey(e => e.SAMPLE_STT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LIS_SAMPLE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_TYPE>()
                .Property(e => e.SAMPLE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_TYPE>()
                .Property(e => e.SAMPLE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_SAMPLE_TYPE>()
                .HasMany(e => e.LIS_SAMPLE)
                .WithOptional(e => e.LIS_SAMPLE_TYPE)
                .HasForeignKey(e => e.SAMPLE_TYPE_ID);

            modelBuilder.Entity<LIS_TEST_INDEX_MAP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_TEST_INDEX_MAP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_TEST_INDEX_MAP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_TEST_INDEX_MAP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_TEST_INDEX_MAP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_TEST_INDEX_MAP>()
                .Property(e => e.TEST_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_TEST_INDEX_MAP>()
                .Property(e => e.TEST_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LIS_TEST_INDEX_MAP>()
                .Property(e => e.TEST_INDEX_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM>()
                .HasMany(e => e.SAR_FORM_DATA)
                .WithRequired(e => e.SAR_FORM)
                .HasForeignKey(e => e.FORM_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_FORM_DATA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_DATA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_DATA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_DATA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_DATA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_DATA>()
                .Property(e => e.KEY)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_DATA>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_DATA>()
                .Property(e => e.VIR_UNIQUE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_FIELD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_FIELD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_FIELD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_FIELD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_FIELD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_FIELD>()
                .Property(e => e.FORM_FIELD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_FIELD>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_FIELD>()
                .HasMany(e => e.SAR_RETY_FOFI)
                .WithRequired(e => e.SAR_FORM_FIELD)
                .HasForeignKey(e => e.FORM_FIELD_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_FORM_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_TYPE>()
                .Property(e => e.FORM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_TYPE>()
                .Property(e => e.FORM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_FORM_TYPE>()
                .HasMany(e => e.SAR_FORM)
                .WithRequired(e => e.SAR_FORM_TYPE)
                .HasForeignKey(e => e.FORM_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.EMR_BUSINESS_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.EMR_DOCUMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.EMR_DOCUMENT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT>()
                .Property(e => e.ADDITIONAL_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.PRINT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.IP)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.DATA_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.UNIQUE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_LOG>()
                .Property(e => e.PRINT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.FILE_PATTERN)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.PRINT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.EMR_DOCUMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.BUSINESS_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.REPRINT_EXCEPTION_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.PRINT_EXCEPTION_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.EMR_COLUMN_MAPPING)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.DISABLE_PRINT_BY_KEY_CFG)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.GEN_SIGNATURE_BY_KEY_CFG)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .Property(e => e.EMR_DOCUMENT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .HasMany(e => e.SAR_PRINT)
                .WithOptional(e => e.SAR_PRINT_TYPE)
                .HasForeignKey(e => e.PRINT_TYPE_ID);

            modelBuilder.Entity<SAR_PRINT_TYPE>()
                .HasMany(e => e.SAR_PRINT_TYPE_CFG)
                .WithRequired(e => e.SAR_PRINT_TYPE)
                .HasForeignKey(e => e.PRINT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.APP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.CONTROL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.CONTROL_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_PRINT_TYPE_CFG>()
                .Property(e => e.CAPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.REPORT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.REPORT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.REPORT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.JSON_FILTER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.JSON_READER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.VIR_TOTAL_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.VIR_QUERY_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.VIR_PREPARE_DATA_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.VIR_GENERATE_FILE_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.REPORT_URL_PDF)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .Property(e => e.ERROR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT>()
                .HasMany(e => e.SAR_REPORT_CALENDAR)
                .WithOptional(e => e.SAR_REPORT)
                .HasForeignKey(e => e.REPORT_ID);

            modelBuilder.Entity<SAR_REPORT_CALENDAR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_CALENDAR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_CALENDAR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_CALENDAR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_CALENDAR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_CALENDAR>()
                .Property(e => e.REPORT_CALENDAR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_CALENDAR>()
                .Property(e => e.FILTER_TOTAL_JSON)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_CALENDAR>()
                .HasMany(e => e.SAR_REPORT_CALENDAR1)
                .WithOptional(e => e.SAR_REPORT_CALENDAR2)
                .HasForeignKey(e => e.SOURCE_ID);

            modelBuilder.Entity<SAR_REPORT_STT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_STT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_STT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_STT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_STT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_STT>()
                .Property(e => e.REPORT_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_STT>()
                .Property(e => e.REPORT_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_STT>()
                .HasMany(e => e.SAR_REPORT)
                .WithRequired(e => e.SAR_REPORT_STT)
                .HasForeignKey(e => e.REPORT_STT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.REPORT_TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.REPORT_TEMPLATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.REPORT_TEMPLATE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.EXTENSION_RECEIVE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TEMPLATE>()
                .HasMany(e => e.SAR_REPORT)
                .WithOptional(e => e.SAR_REPORT_TEMPLATE)
                .HasForeignKey(e => e.REPORT_TEMPLATE_ID);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.REPORT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.REPORT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.HOUR_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.HOUR_TO)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .Property(e => e.DLL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .HasMany(e => e.SAR_REPORT)
                .WithRequired(e => e.SAR_REPORT_TYPE)
                .HasForeignKey(e => e.REPORT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .HasMany(e => e.SAR_REPORT_TEMPLATE)
                .WithRequired(e => e.SAR_REPORT_TYPE)
                .HasForeignKey(e => e.REPORT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .HasMany(e => e.SAR_RETY_FOFI)
                .WithRequired(e => e.SAR_REPORT_TYPE)
                .HasForeignKey(e => e.REPORT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_REPORT_TYPE>()
                .HasMany(e => e.SAR_USER_REPORT_TYPE)
                .WithRequired(e => e.SAR_REPORT_TYPE)
                .HasForeignKey(e => e.REPORT_TYPE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SAR_REPORT_TYPE_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE_GROUP>()
                .Property(e => e.REPORT_TYPE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE_GROUP>()
                .Property(e => e.REPORT_TYPE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_REPORT_TYPE_GROUP>()
                .HasMany(e => e.SAR_REPORT_TYPE)
                .WithOptional(e => e.SAR_REPORT_TYPE_GROUP)
                .HasForeignKey(e => e.REPORT_TYPE_GROUP_ID);

            modelBuilder.Entity<SAR_RETY_FOFI>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_RETY_FOFI>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_RETY_FOFI>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_RETY_FOFI>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_RETY_FOFI>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_RETY_FOFI>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_RETY_FOFI>()
                .Property(e => e.JSON_OUTPUT)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_USER_REPORT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_USER_REPORT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_USER_REPORT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_USER_REPORT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_USER_REPORT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SAR_USER_REPORT_TYPE>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.INITIAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE>()
                .Property(e => e.SEARCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.PARTNER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.PARTNER_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.PARTNER_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.PARTNER_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_COMMUNE_MAP>()
                .Property(e => e.PARTNER_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.KEY)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.KEY)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.VALUE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.VALUE_ALLOW_MIN)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.VALUE_ALLOW_MAX)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.VALUE_ALLOW_IN)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.APP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .Property(e => e.MODULE_LINKS)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP>()
                .HasMany(e => e.SDA_CONFIG_APP_USER)
                .WithRequired(e => e.SDA_CONFIG_APP)
                .HasForeignKey(e => e.CONFIG_APP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SDA_CONFIG_APP_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CONFIG_APP_USER>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.APP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.BUTTON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.BUTTON_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.CURRENT_SHORTCUT)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.SHORTCUT)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.CAPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_BUTTON>()
                .Property(e => e.DEFAULT_CAPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.APP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.CONTROL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_CUSTOMIZE_UI>()
                .Property(e => e.CONTROL_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DELETE_DATA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DELETE_DATA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DELETE_DATA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DELETE_DATA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DELETE_DATA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DELETE_DATA>()
                .Property(e => e.DATA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.INITIAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .Property(e => e.SEARCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT>()
                .HasMany(e => e.SDA_COMMUNE)
                .WithRequired(e => e.SDA_DISTRICT)
                .HasForeignKey(e => e.DISTRICT_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.PARTNER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.PARTNER_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.PARTNER_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_DISTRICT_MAP>()
                .Property(e => e.PARTNER_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_ETHNIC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_ETHNIC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_ETHNIC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_ETHNIC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_ETHNIC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_ETHNIC>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_ETHNIC>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_ETHNIC>()
                .Property(e => e.OTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.LOGIN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.IP)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.APP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.EVENT_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<SDA_EVENT_LOG>()
                .Property(e => e.EVENT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.CODE_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP>()
                .Property(e => e.ID_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP_TYPE>()
                .Property(e => e.GROUP_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_GROUP_TYPE>()
                .Property(e => e.GROUP_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.APP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.CONTROL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.CONTROL_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_HIDE_CONTROL>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LANGUAGE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LANGUAGE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LANGUAGE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LANGUAGE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LANGUAGE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LANGUAGE>()
                .Property(e => e.LANGUAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LANGUAGE>()
                .Property(e => e.LANGUAGE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LANGUAGE>()
                .HasMany(e => e.SDA_TRANSLATE)
                .WithRequired(e => e.SDA_LANGUAGE)
                .HasForeignKey(e => e.LANGUAGE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.LICENSE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.APP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.CLIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.FEATURE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_LICENSE>()
                .Property(e => e.PUBLISHER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.SCHEMA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.COLUMN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.METADATA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.VIR_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_METADATA>()
                .Property(e => e.DATA_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_MODULE_FIELD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_MODULE_FIELD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_MODULE_FIELD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_MODULE_FIELD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_MODULE_FIELD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_MODULE_FIELD>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_MODULE_FIELD>()
                .Property(e => e.FIELD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_MODULE_FIELD>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .Property(e => e.MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NATIONAL>()
                .HasMany(e => e.SDA_PROVINCE)
                .WithRequired(e => e.SDA_NATIONAL)
                .HasForeignKey(e => e.NATIONAL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.LOGIN_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.RECEIVER_LOGINNAMES)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_NOTIFY>()
                .Property(e => e.RECEIVER_DEPARTMENT_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .Property(e => e.SEARCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE>()
                .HasMany(e => e.SDA_DISTRICT)
                .WithRequired(e => e.SDA_PROVINCE)
                .HasForeignKey(e => e.PROVINCE_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.PARTNER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.PARTNER_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_PROVINCE_MAP>()
                .Property(e => e.PARTNER_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_RELIGION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_RELIGION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_RELIGION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_RELIGION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_RELIGION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_RELIGION>()
                .Property(e => e.RELIGION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_RELIGION>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.SQL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.SQL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.SCHEMA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL>()
                .HasMany(e => e.SDA_SQL_PARAM)
                .WithRequired(e => e.SDA_SQL)
                .HasForeignKey(e => e.SQL_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SDA_SQL_PARAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL_PARAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL_PARAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL_PARAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL_PARAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL_PARAM>()
                .Property(e => e.SQL_PARAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_SQL_PARAM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.SCHEMA)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.FIND_DATA_CODE_ONE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.FIND_COLUMN_NAME_ONE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.FIND_DATA_CODE_TWO)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.FIND_COLUMN_NAME_TWO)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.UPDATE_COLUMN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TRANSLATE>()
                .Property(e => e.UPDATE_DATA_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.TROUBLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.OVERCOME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDA_TROUBLE>()
                .Property(e => e.MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.DEATH_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.COLLECTOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_DEATH>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.ABORTION_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.OBSTETRIC_COMPLICATION)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.EXECUTE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_ABORTION>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.BORN_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.OBSTETRIC_COMPLICATION)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.CHILD_WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.CHILD_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.BORN_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.MIDWIFE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.FIRST_WEEK_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.EXAM_742)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_BORN>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.UTERUS)
                .HasPrecision(19, 2);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.OTHER_TEST)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.BORN_GUESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.FETUS_POSITION)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_FETUS_EXAM>()
                .Property(e => e.HEALTH_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.GDSK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.FORM)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.TARGET)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.MEDIA)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.AMOUNT_OF_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.EXECUTE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_GDSK>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.OBJECT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.HIV_DIAGNOSIS_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.ARV_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_HIV>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.EXECUTE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.OBSTETRIC_COMPLICATION)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_KHH>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.DIAGNOSE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.TREATMENT_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.MEDICINE_CTDT)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_MALARIA>()
                .Property(e => e.DIAGNOSE_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.DIAGNOSE_TTPL)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.DIAGNOSE_DK)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.DIAGNOSE_TC)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_NERVES>()
                .Property(e => e.MEDICINE_MONITOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.DTCKS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_TUBERCULOSIS>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.VIR_PERSON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.PERSON_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.DIAGNOSIS_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD>()
                .Property(e => e.UNINFECT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD>()
                .Property(e => e.UNINFECT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD_GROUP>()
                .Property(e => e.UNINFECT_ICD_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD_GROUP>()
                .Property(e => e.UNINFECT_ICD_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TYT_UNINFECT_ICD_GROUP>()
                .HasMany(e => e.TYT_UNINFECT_ICD)
                .WithRequired(e => e.TYT_UNINFECT_ICD_GROUP)
                .HasForeignKey(e => e.UNINFECT_ICD_GROUP_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.APPLICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.APPLICATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_APPLICATION_ROLE>()
                .Property(e => e.ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.CONTROL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.CONTROL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.APPLICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL>()
                .Property(e => e.APPLICATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.CONTROL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.CONTROL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_CONTROL_ROLE>()
                .Property(e => e.ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.MODULE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.ICON_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.MODULE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.VIR_MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.VIDEO_URLS)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.MODULE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.MODULE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.APPLICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.APPLICATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE>()
                .Property(e => e.PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.MODULE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.MODULE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.APPLICATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.APPLICATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_MODULE_ROLE>()
                .Property(e => e.ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.BASE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.BASE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_BASE>()
                .Property(e => e.ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_ACS_ROLE_USER>()
                .Property(e => e.ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.STATUS_IN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.STATUS_OUT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TREATMENT_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ISSUE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.SEEDING_ISSUED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.VIR_ISSUE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HURT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_BODY_PART_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_BODY_PART_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_LOCATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_LOCATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_POISON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_POISON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_VEHICLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_VEHICLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HELMET_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_HELMET_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_CARE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ACCIDENT_CARE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCIDENT_HURT>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.ACCOUNT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.ACCOUNT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACCOUNT_BOOK>()
                .Property(e => e.CURRENT_NUM_ORDER)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.CONSEQUENCE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.MECHANISM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.ACTIVE_INGREDIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.ACTIVE_INGREDIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.CONFLICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.CONFLICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ACIN_INTERACTIVE>()
                .Property(e => e.INTERACTIVE_GRADE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.ADR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.REPORT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.REPORT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.RELATED_TEST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.REACTION_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.APPEAR_AFTER_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.RELATIONSHIP_ORTHER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.EXPERTISE_STANDER_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.BYT_COMMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.ONCE_TUTORIAL)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.NUMBER_USE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.ADR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ADR_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.ALLERGENIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.CLINICAL_EXPRESSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGENIC>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.DIAGNOSE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.DIAGNOSE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.DIAGNOSE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ALLERGY_CARD>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.DOSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.PERIOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.USE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.USE_DAY)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.ACTIVE_INGREDIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_NEW_REG>()
                .Property(e => e.ACTIVE_INGREDIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ANTIBIOTIC_REQUEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ALLERGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.INFECTION_ENTRY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CLINICAL_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.WHITE_BLOOD_CELL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CRP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.PCT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CRCL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.NO_MICROBIOLOGY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.ADR_ANTIBIOTIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.OTHER_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.OTHER_OPINION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.BREATH_RATE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CHEST)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.BELLY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.VIR_BMI)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.VIR_BODY_SURFACE_AREA)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.SPO2)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.CAPILLARY_BLOOD_GLUCOSE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIBIOTIC_REQUEST>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.ANTICIPATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.USE_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE>()
                .Property(e => e.REQUEST_ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.ELEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_BLTY>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_MATY>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.MEDICINE_TYPE_PROPRIETARY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTICIPATE_METY>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.ANTIGEN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.ANTIGEN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.MEDICINE_TYPE_PROPRIETARY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ANTIGEN_METY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_PERIOD>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_APPOINTMENT_SERV>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BABY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.HEAD)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.MIDWIFE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.ISSUER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.ISSUER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTHPLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.METHOD_STYLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.HEIN_CARD_NUMBER_TMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_HOSPITAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_HOSPITAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BORN_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BORN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BORN_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BORN_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BORN_POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BORN_POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_CERT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.BIRTH_CERT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.TDL_PATIENT_ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BABY>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.Y)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.BED_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.BED_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.TREATMENT_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.TREATMENT_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.BED_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_BSTY>()
                .Property(e => e.BED_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.Y)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.BED_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.BED_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.PRIMARY_PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG>()
                .Property(e => e.PRIMARY_PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.Y)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_1>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.Y)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.BED_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_2>()
                .Property(e => e.BED_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.Y)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.BED_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.BED_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_3>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.Y)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_LOG_4>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.SPECIALITY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.BHYT_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.AREA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.SPECIALITY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.BHYT_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.PATIENT_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BED_ROOM_1>()
                .Property(e => e.BED_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BHYT_WHITELIST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BHYT_WHITELIST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BHYT_WHITELIST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BHYT_WHITELIST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BHYT_WHITELIST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BHYT_WHITELIST>()
                .Property(e => e.BHYT_WHITELIST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BHYT_WHITELIST>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BHYT_WHITELIST>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.ALLOW_UPDATE_LOGINNAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.BID_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.BID_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.MATERIAL_TYPE_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.MEDICINE_TYPE_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID>()
                .Property(e => e.BLOOD_TYPE_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.ALLOW_UPDATE_LOGINNAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.BID_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.BID_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.MATERIAL_TYPE_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.MEDICINE_TYPE_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.BLOOD_TYPE_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID_1>()
                .Property(e => e.SUPPLIER_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.ELEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.PACKING_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID_BLOOD_TYPE>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.TDL_CONTRACT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.JOIN_BID_MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.IMP_MORE_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.ADJUST_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_MAP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_MAP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MATERIAL_TYPE>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.TDL_CONTRACT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.IMP_MORE_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.ADJUST_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BID_MEDICINE_TYPE>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.FUND_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.FUND_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BILL_FUND>()
                .Property(e => e.TRANSACTION_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.BIRTH_CERT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.BIRTH_CERT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BIRTH_CERT_BOOK>()
                .Property(e => e.CURRENT_BIRTH_CERT_NUM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.GIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.GIVE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.ELEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.IMP_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.IMP_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.ELEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.COGS)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.ESTIMATE_DURATION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.PACKING_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.HEIN_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE>()
                .Property(e => e.HEIN_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.ELEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.HEIN_LIMIT_PRICE_OLD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.HEIN_LIMIT_RATIO_OLD)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_BLOOD_TYPE_1>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BLTY_SERVICE>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_BRANCH_TIME>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.CARD_MAC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.BANK_CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.HT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.HT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.HT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARD>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.CARE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARE_DETAIL>()
                .Property(e => e.CARE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.CARER_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.GIVING_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.GIVING_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.RECEIVING_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.RECEIVING_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARER_CARD_BORROW>()
                .Property(e => e.CARER_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.ACCOUNT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.ACCOUNT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CARO_ACCOUNT_BOOK>()
                .Property(e => e.CURRENT_NUM_ORDER)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.INSTR_TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.INSTR_TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ADD_CONFIG>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.EINVOICE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.EINVOICE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CASHIER_ROOM>()
                .Property(e => e.AREA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.COTREATMENT_REQUEST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TREA_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TREA_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TREA_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.TREA_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.CURRENT_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CO_TREATMENT>()
                .Property(e => e.CURRENT_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.VALUE_BK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.DEFAULT_VALUE_BK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.DESCRIPTION_BK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.MODULE_LINKS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.CONFIG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.CONFIG_GROUP_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.CONFIG_GROUP_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONFIG>()
                .Property(e => e.ROLE_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.CONTACT_POINT_OTHER_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.FULL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.DOB)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.DEPARTMENT_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_CONTACT_POINT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.DATA_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.DATA_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.TREATMENT_END_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.PARENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.STORED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.STORED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.STORED_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.STORED_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE>()
                .Property(e => e.TREATMENT_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.DATA_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.DATA_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.TREATMENT_END_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DATA_STORE_1>()
                .Property(e => e.MEDI_RECORD_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.DEATH_CERT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.DEATH_CERT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEATH_CERT_BOOK>()
                .Property(e => e.CURRENT_DEATH_CERT_NUM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TREATMENT_TRACKING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.LOCATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.REQUEST_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.HOSPITALIZATION_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.BEFORE_DIAGNOSTIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.DIAGNOSTIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.CARE_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.DISCUSSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.MEDICINE_TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.SUBCLINICAL_PROCESSES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.INTERNAL_MEDICINE_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.PROGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.PTTT_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.MEDICINE_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.ACTIVE_INGREDIENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TMP_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.DEBATE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.DEBATE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.SURGERY_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.SURGERY_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.EMOTIONLESS_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.EMOTIONLESS_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.PTTT_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.DEBATE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.DEBATE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.INVITE_USER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_EKIP_USER>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEBATE_USER>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.ALLOW_ASSIGN_PACKAGE_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.ALLOW_TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.ACCEPTED_ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.ACCEPT_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.PARENT_ORGANIZATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.HEIN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT>()
                .Property(e => e.HEIN_LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.ALLOW_ASSIGN_PACKAGE_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.ALLOW_TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.ACCEPTED_ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.ACCEPT_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.PARENT_ORGANIZATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.HEIN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.HEIN_LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_1>()
                .Property(e => e.PATIENT_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.PREVIOUS_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPARTMENT_TRAN>()
                .Property(e => e.PREVIOUS_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.DEPOSIT_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.BANK_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TRANSACTION_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.ACCOUNT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DEPOSIT_REQ>()
                .Property(e => e.BANK_MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.DESK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.DESK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DESK>()
                .Property(e => e.AREA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.BREATH_RATE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.CHEST)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.BELLY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.VIR_BMI)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.VIR_BODY_SURFACE_AREA)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.SPO2)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.CAPILLARY_BLOOD_GLUCOSE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.IS_IN_SERVICE_REQ)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DHST>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.DISPENSE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.DISPENSE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DISPENSE>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DOCUMENT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DOCUMENT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DOCUMENT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DOCUMENT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DOCUMENT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DOCUMENT_BOOK>()
                .Property(e => e.DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_DOCUMENT_BOOK>()
                .Property(e => e.DOCUMENT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_PLAN_USER>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_TEMP_USER>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.REMUNERATION_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EKIP_USER>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.DIPLOMA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.BANK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.DEFAULT_MEDI_STOCK_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.ERX_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.ERX_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.TDL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.TDL_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.TDL_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMPLOYEE>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.EMR_COVER_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMR_COVER_CONFIG>()
                .Property(e => e.EMR_COVER_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.EXP_MEST_TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.EXP_MEST_TEMPLATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MATERIAL_TYPE>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.EXP_MEST_TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.EXP_MEST_TEMPLATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EMTE_MEDICINE_TYPE>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EQUIPMENT_SET_MATY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SCHEDULE>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SERE_DIRE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SERE_DIRE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SERE_DIRE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SERE_DIRE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SERE_DIRE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SERE_DIRE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SERE_DIRE>()
                .Property(e => e.DISEASE_RELATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXAM_SERE_DIRE>()
                .Property(e => e.DISEASE_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.TEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.ORDER_ISSUE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.DEFAULT_DRUG_STORE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.SCREEN_SAVER_MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.ROOM_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.ROOM_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.SPECIALITY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.BHYT_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.AREA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.TEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.TOTAL_OPEN_SERVICE_REQ)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.TOTAL_TODAY_SERVICE_REQ)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.ROOM_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.ROOM_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.RESPONSIBLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXECUTE_ROOM_1>()
                .Property(e => e.RESPONSIBLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.EXP_MEST_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.EXP_MEST_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXME_REASON_CFG>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.SERVICE_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_BLTY_SERVICE>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.NATIONAL_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.LAST_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.LAST_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TOTAL_SERVICE_ATTACH_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.ERX_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.CONFIRM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.CONFIRM_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.VIR_CREATE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.NOT_TAKEN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.RECIPIENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.RECEIVING_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.VIR_HEIN_CARD_PREFIX)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.GATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_AGGR_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.TDL_AGGR_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.REQ_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.REQ_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.REQ_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.REQ_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.EXP_MEST_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.PARENT_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.PARENT_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.CURRENT_BED_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST>()
                .Property(e => e.ANTIBIOTIC_REQUEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.NATIONAL_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.LAST_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.LAST_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TOTAL_SERVICE_ATTACH_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.ERX_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.CONFIRM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.CONFIRM_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.VIR_CREATE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.NOT_TAKEN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.EXP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.RECIPIENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.RECEIVING_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.VIR_HEIN_CARD_PREFIX)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.REQ_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_1>()
                .Property(e => e.REQ_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.NATIONAL_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.LAST_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.LAST_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TOTAL_SERVICE_ATTACH_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.ERX_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.CONFIRM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.CONFIRM_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.VIR_CREATE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.NOT_TAKEN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.RECIPIENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.RECEIVING_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.VIR_HEIN_CARD_PREFIX)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.GATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_AGGR_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TDL_AGGR_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.REQ_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.REQ_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.REQ_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.REQ_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EXP_MEST_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.EINVOICE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.INVOICE_SYS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.INVOICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_2>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.NATIONAL_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.LAST_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.LAST_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TOTAL_SERVICE_ATTACH_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.ERX_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.CONFIRM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.CONFIRM_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.VIR_CREATE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.NOT_TAKEN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_3>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.NATIONAL_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.LAST_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.LAST_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TOTAL_SERVICE_ATTACH_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.ERX_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.CONFIRM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.CONFIRM_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.VIR_CREATE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.NOT_TAKEN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.EXP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.RECIPIENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.RECEIVING_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.VIR_HEIN_CARD_PREFIX)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.IMP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.IMP_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_4>()
                .Property(e => e.IMP_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.NATIONAL_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.LAST_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.LAST_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TOTAL_SERVICE_ATTACH_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.ERX_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.CONFIRM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.CONFIRM_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.VIR_CREATE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.NOT_TAKEN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.EXP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.RECIPIENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.RECEIVING_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.IS_HAS_BCS_REQ_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_5>()
                .Property(e => e.IS_NOT_FULL_BCS_REQ_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PATIENT_BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PATIENT_BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PUC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.TEST_TUBE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.SCANGEL_GELCARD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.COOMBS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.TEST_TUBE_TWO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.AC_SELF_ENVIDENCE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.AC_SELF_ENVIDENCE_SECOND)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.GIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.GIVE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.ELEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.IMP_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.IMP_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLOOD>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.EXP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.REQ_BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.REQ_BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.REQ_VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.REQ_BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_1>()
                .Property(e => e.REQ_BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.EXP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.EXP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_BLTY_REQ_2>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.IMP_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS>()
                .Property(e => e.IMP_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.IMP_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.IMP_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_1>()
                .Property(e => e.EXISTS_IMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.IMP_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_CHMS_2>()
                .Property(e => e.IMP_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.LAST_EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.LAST_EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_XBTT_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_MANU_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PRESCRIPTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.TDL_PRESCRIPTION_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MANU>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.FAILED_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXCEED_LIMIT_IN_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXCEED_LIMIT_IN_DAY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.FAILED_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.SUM_IN_STOCK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.SUM_BY_MATERIAL_IN_STOCK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_1>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.FAILED_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_2>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.FAILED_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_3>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.FAILED_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATERIAL_4>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MATY_REQ>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BREATH_SPEED)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BREATH_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TUTORIAL_INFUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXCEED_LIMIT_IN_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXCEED_LIMIT_IN_DAY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.ODD_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.OVER_RESULT_TEST_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.OVER_KIDNEY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TDL_PRES_REQ_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.HTU_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.BREATH_SPEED)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.BREATH_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.TUTORIAL_INFUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.SUM_IN_STOCK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.SUM_BY_MEDICINE_IN_STOCK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_1>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.BREATH_SPEED)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.BREATH_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_2>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.BREATH_SPEED)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.BREATH_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_3>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.BREATH_SPEED)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.BREATH_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_4>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.BREATH_SPEED)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.BREATH_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.TUTORIAL_INFUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.VACCINATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.VACCINATION_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.VACCINATION_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_5>()
                .Property(e => e.ANTIGEN_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.EXP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.EXP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.TH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.BREATH_SPEED)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.BREATH_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.TUTORIAL_INFUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_MEDICINE_6>()
                .Property(e => e.HTU_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.DD_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_METY_REQ_1>()
                .Property(e => e.BCS_REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXP_MEST_USER>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_EXRO_ROOM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_DEPOSIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.TOTAL_BILL_EXEMPTION)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FINANCE_PERIOD>()
                .Property(e => e.PREVIOUS_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.FORM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.FORM_TYPE_CFG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_FORM_TYPE_CFG_DATA>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_APPROVAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.XML_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.HEIN_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HEIN_APPROVAL>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HIV_TREATMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HIV_TREATMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HIV_TREATMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HIV_TREATMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HIV_TREATMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HIV_TREATMENT>()
                .Property(e => e.HIV_PATIENT_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HIV_TREATMENT>()
                .Property(e => e.BEGIN_REGIMEN_HIV_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HIV_TREATMENT>()
                .Property(e => e.REGIMEN_HIV_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.HOLD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.HOLD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.RETURN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.RETURN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.VIR_UNIQUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.RESPONSIBLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.RESPONSIBLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.DOC_HOLD_TYPE_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HOLD_RETURN>()
                .Property(e => e.DOC_HOLD_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_DHTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_DHTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_DHTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_DHTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_DHTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_DHTY>()
                .Property(e => e.DOC_HOLD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_DHTY>()
                .Property(e => e.DOC_HOLD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.HORE_HANDOVER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.SEND_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.SEND_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.RECEIVE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.RECEIVE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.HORE_HANDOVER_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.HORE_HANDOVER_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.SEND_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.SEND_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.SEND_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.SEND_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.RECEIVE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.RECEIVE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.RECEIVE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HANDOVER>()
                .Property(e => e.RECEIVE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.HOLD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.HOLD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.RETURN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.RETURN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_HORE_HOHA>()
                .Property(e => e.DOC_HOLD_TYPE_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.ICD_NAME_EN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.CHAPTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.CHAPTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.CHAPTER_NAME_EN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_NAME_EN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_CODE_1)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_NAME_1)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_NAME_1_EN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_NAME_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.SUB_NAME_2_EN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.TYPE_NAME_EN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.BYT_REPORT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.ICD_NAME_COMMON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.ATTACH_ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.AGE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ICD>()
                .Property(e => e.AGE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_CHMS_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_AGGR_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_MOBA_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DOCUMENT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DELIVERER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.NATIONAL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.CREDIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DEBIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.INVOICE_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_BID_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_BID_GROUP_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TDL_BID_NUMBERS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.IMP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.REQ_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.REQ_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.SUPPLIER_SHORT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.MEDICAL_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.MEDICAL_CONTRACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DOCUMENT_SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DOCUMENT_SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST>()
                .Property(e => e.DOCUMENT_SUPPLIER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.IMP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.IMP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_CHMS_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_AGGR_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_MOBA_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.DOCUMENT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.DELIVERER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.NATIONAL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.CREDIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.DEBIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.INVOICE_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_BID_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_BID_GROUP_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.TDL_BID_NUMBERS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.IMP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_1>()
                .Property(e => e.IS_BLOOD)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_CHMS_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_AGGR_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_MOBA_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.DOCUMENT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.DELIVERER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.NATIONAL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.CREDIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.DEBIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.INVOICE_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_BID_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_BID_GROUP_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_BID_NUMBERS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_MEST_SUB_CODE_2)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.VIR_SPECIAL_MEDICINE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.VIR_CREATE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.IMP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.REQ_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.REQ_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_2>()
                .Property(e => e.TDL_AGGR_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.GIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.GIVE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.ELEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.IMP_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.IMP_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_BLOOD>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.IMP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.IMP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_CHMS_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_AGGR_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_MOBA_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_DISPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.DOCUMENT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.DELIVERER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.NATIONAL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.CREDIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.DEBIT_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.INVOICE_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.IMP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.IMP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MANU>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.TDL_MOBA_EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.MATERIAL_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL>()
                .Property(e => e.IMP_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_2>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.IMP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_3>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.BK_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MATERIAL_4>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.IMP_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_2>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.IMP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_3>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_MEDICINE_4>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.PAYER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.PAYER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.NEXT_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.STANDING_ORDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.PAYSLIP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.IMP_MEST_PROPOSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.PROPOSE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.PAY_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.PAY_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.TOTAL_PAY)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_PAY>()
                .Property(e => e.PAYED)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.IMP_MEST_PROPOSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.PROPOSE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.PROPOSE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.VENTURE_AGREENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.MEDICAL_CONTRACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.MEDICAL_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.DOCUMENT_SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.DOCUMENT_SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.TOTAL_PAY)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_PROPOSE>()
                .Property(e => e.PAYED)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_MEST_USER>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_IMP_USER_TEMP_DT>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.CONVERT_TIME_RATIO)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.CONVERT_VOLUME_RATIO)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.MIXED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.EMR_DOCUMENT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.EMR_DOCUMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.INFUSION_SUM_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.SPEED_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.SPEED_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.EMR_DOCUMENT_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION>()
                .Property(e => e.EMR_DOCUMENT_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INFUSION_SUM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.SELLER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.SELLER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.SELLER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.SELLER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.SELLER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.BUYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.BUYER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.BUYER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.BUYER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.CANCEL_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.CANCEL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.CANCEL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.BUYER_ORGANIZATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.VIR_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.VIR_UNIQUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.PAY_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE>()
                .Property(e => e.PAY_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.INVOICE_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_INVOICE_BOOK>()
                .Property(e => e.CURRENT_NUM_ORDER)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_KSK_ACCESS>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_ACCESS>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_ACCESS>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_ACCESS>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_ACCESS>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_ACCESS>()
                .Property(e => e.KSK_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_ACCESS>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.KSK_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.CONTRACT_VALUE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.DEPOSIT_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.PAYMENT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.WORK_PLACE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_CONTRACT>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.KSK_DRIVER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.LICENSE_CLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CONCLUDER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CONCLUDER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.REASON_BAD_HEATHLY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.SICK_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CONCENTRATION)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.VIR_CONCLUSION_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.TDL_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_DRIVER>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.KSK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_KSK_SERVICE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.MACHINE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.INTEGRATE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MACHINE>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.MATERIAL_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.BID_MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.BID_MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.TDL_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MATERIAL_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.BID_MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.BID_MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.TDL_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MEDICAL_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.MEDICAL_CONTRACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.IMP_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.IMP_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.BID_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_1>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.MATERIAL_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.BID_MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.BID_MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.TDL_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_2>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.BK_DECREASE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.DETACH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.DETACH_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.TDL_MATERIAL_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.TDL_MATERIAL_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.TDL_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MATERIAL_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MATE_LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MATY_LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.BK_DECREASE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.DETACH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.DETACH_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.TDL_MATERIAL_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.TDL_MATERIAL_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.TDL_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.MATERIAL_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_1>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.BK_DECREASE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.DETACH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.DETACH_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.TDL_MATERIAL_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.TDL_MATERIAL_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.TDL_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_BEAN_2>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.IMP_UNIT_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_PATY>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.ALERT_MAX_IN_PRESCRIPTION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.LAST_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.LAST_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.ALERT_MAX_IN_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MODEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_LIMIT_PRICE_OLD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_LIMIT_RATIO_OLD)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.HEIN_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_MAP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.MATERIAL_TYPE_MAP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.IMP_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.IMP_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.PARENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE>()
                .Property(e => e.PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.ALERT_MAX_IN_PRESCRIPTION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.LAST_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.LAST_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MATERIAL_TYPE_1>()
                .Property(e => e.MATERIAL_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.VIR_CONTRACT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.VIR_BID_MATERIAL_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.VIR_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.VIR_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.MEDICAL_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.VIR_CONTRACT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.VIR_BID_MATERIAL_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.VIR_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.VIR_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_MATY_1>()
                .Property(e => e.BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.VIR_CONTRACT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.VIR_BID_MEDICINE_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.VIR_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.VIR_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MEDICAL_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.VIR_CONTRACT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.VIR_BID_MEDICINE_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.VIR_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.VIR_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_CONTRACT_METY_1>()
                .Property(e => e.BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.CHECK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.CHECK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.CHECK_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.MEDI_REACT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.MEDI_REACT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_REACT_SUM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.VIR_STORE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.VIR_SEED_CODE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.MEDI_RECORD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.MEDI_RECORD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.PROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD>()
                .Property(e => e.PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.VIR_STORE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.VIR_SEED_CODE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.MEDI_RECORD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.MEDI_RECORD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.PROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.GIVE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.RECEIVE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.END_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_1>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.VIR_STORE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.VIR_SEED_CODE_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.MEDI_RECORD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.MEDI_RECORD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.PROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.IN_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.OUT_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.GIVE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.RECEIVE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.END_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_2>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.BORROW_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.BORROW_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.GIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.GIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.VIR_GIVE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.VIR_RECEIVE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.VIR_APPOINTMENT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.BORROW_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.DATA_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.DATA_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.BORROW_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.BORROW_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.GIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.GIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.VIR_GIVE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.VIR_RECEIVE_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.VIR_APPOINTMENT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.BORROW_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_RECORD_BORROW_1>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.BHYT_HEAD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.NOT_IN_BHYT_HEAD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.PATIENT_CLASSIFY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.PARENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK>()
                .Property(e => e.PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.EXP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_EXTY>()
                .Property(e => e.EXP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.IMP_MEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_IMTY>()
                .Property(e => e.IMP_MEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.ALERT_MAX_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.EXP_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY>()
                .Property(e => e.EXP_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.ALERT_MAX_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.EXP_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.EXP_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_MATY_1>()
                .Property(e => e.AMOUT_EXP_MEDI_STOCK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.ALERT_MAX_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.EXP_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY>()
                .Property(e => e.EXP_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.ALERT_MAX_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.EXP_MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.EXP_MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_METY_1>()
                .Property(e => e.AMOUT_EXP_MEDI_STOCK)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDI_STOCK_PERIOD>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.WELFARE_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.PREVIOUS_INJURY_RATE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REFERRAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REQUEST_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REQUEST_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.EXAMINATION_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.LEGAL_GROUND_NUMBERS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.INJURY_RATE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.INJURY_RATE_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.REQUEST_AFTER_ASSESSMENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ASSESSMENT_BOARD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ASSESSMENT_PURPOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.LEGAL_GROUND_DOCUMENTS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ASSESSMENT_REQUEST_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.DISCUSSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ASSESSMENT_OBJECT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ASSESSMENT_OBJECT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.WELFARE_TYPE_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.PRESIDENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_ASSESSMENT>()
                .Property(e => e.ON_BEHALF_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.MEDICAL_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.MEDICAL_CONTRACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.VENTURE_AGREENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.VIR_CREATE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.DOCUMENT_SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.DOCUMENT_SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.ALLOW_UPDATE_LOGINNAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.MATERIAL_TYPE_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDICAL_CONTRACT>()
                .Property(e => e.MEDICINE_TYPE_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME1)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TDL_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME1)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TAX_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.TDL_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICAL_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.MEDICAL_CONTRACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.IMP_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.IMP_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_1>()
                .Property(e => e.BID_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.TDL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.TDL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.TDL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.MEDICINE_BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.MEDICINE_TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.TDL_IMP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.TDL_IMP_MEST_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.IMP_UNIT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.IMP_UNIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.TDL_IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.CONTRACT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.PROFIT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.BID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_2>()
                .Property(e => e.BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.BK_DECREASE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.DETACH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.DETACH_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_MEDICINE_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_MEDICINE_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.TDL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDI_LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.METY_LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.BK_DECREASE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.DETACH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.DETACH_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.TDL_MEDICINE_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.TDL_MEDICINE_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_1>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.DETACH_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.DETACH_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.BK_DECREASE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.TDL_MEDICINE_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.TDL_MEDICINE_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_BEAN_2>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.MATERIAL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MATERIAL>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.PREPARATION_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.PREPARATION_MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_MEDICINE>()
                .Property(e => e.PREPARATION_MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.IMP_UNIT_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.TDL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_PATY>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.ALERT_MAX_IN_TREATMENT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.ALERT_MAX_IN_PRESCRIPTION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_TYPE_PROPRIETARY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.CONTRAINDICATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.LAST_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.LAST_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.ATC_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.SCIENTIFIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.PREPROCESSING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.PROCESSING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.USED_PART)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.DISTRIBUTED_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.QUALITY_STANDARDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.LOCKING_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.PREPROCESSING_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.PROCESSING_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.NUM_ORDER_CIRCULARS20)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.ALERT_MAX_IN_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.ODD_WARNING_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_LIMIT_PRICE_OLD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_LIMIT_RATIO_OLD)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.HEIN_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_LINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_LINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.MEDICINE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.IMP_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.IMP_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.PARENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE>()
                .Property(e => e.PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ALERT_MAX_IN_TREATMENT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ALERT_MAX_IN_PRESCRIPTION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_TYPE_PROPRIETARY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.LAST_EXP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.LAST_EXP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.CONTRAINDICATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.LAST_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.LAST_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.ATC_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.RECORDING_TRANSACTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.IMP_UNIT_CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.SCIENTIFIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.PREPROCESSING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.PROCESSING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.USED_PART)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.DISTRIBUTED_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_1>()
                .Property(e => e.MEDICINE_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.MEDICINE_TYPE_PROPRIETARY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.ACTIVE_INGREDIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ACIN>()
                .Property(e => e.ACTIVE_INGREDIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_ROOM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEDICINE_TYPE_TUT>()
                .Property(e => e.HTU_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_INVE_USER>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_MATY_DEPA>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_DEPA>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_METY_UNIT>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.BHYT_HEAD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.NOT_IN_BHYT_HEAD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATIENT_TYPE>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.PATIENT_TYPE_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.PATIENT_TYPE_SUB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_SUB>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PATY_TRTY>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.GIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.GIVE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLOOD>()
                .Property(e => e.VIR_IMP_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_BLTY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATE>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MATY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.SUPPLIER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_MEDI>()
                .Property(e => e.SUPPLIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.BEGIN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.IN_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.OUT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.VIR_END_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.INVENTORY_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.MEDI_STOCK_PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.INTERNAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.ALERT_MIN_IN_STOCK)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.USE_ON_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.BYT_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.TCY_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_PERIOD_METY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_MEST_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.MATERIAL_TYPE_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.PRODUCT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.PREPARATION_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.PRODUCT_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.PREPARATION_MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_METY>()
                .Property(e => e.PREPARATION_MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.MEDICINE_LINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_METY_PRODUCT>()
                .Property(e => e.MEDICINE_LINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.NONE_MEDI_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.NONE_MEDI_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_NONE_MEDI_SERVICE>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PACKAGE_DETAIL>()
                .Property(e => e.PACKAGE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.HT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.HT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.HT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.VIR_HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PATIENT_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.HRM_EMPLOYEE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.BORN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.BORN_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.HOUSEHOLD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.HOUSEHOLD_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.OWN_BRANCH_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.UUID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.SYS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.UUID_BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.REGISTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.FATHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.FATHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MOTHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MOTHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.TDL_LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.TDL_HEIN_CARD_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.TDL_JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.TDL_PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CMND_BEFORE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.CMND_AFTER_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.VIR_DOB_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.FATHER_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MOTHER_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MILITARY_RANK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.WORK_PLACE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.WORK_PLACE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT>()
                .Property(e => e.POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PERSON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.HT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.HT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.HT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.VIR_HT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PATIENT_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.HRM_EMPLOYEE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.BORN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.BORN_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.HOUSEHOLD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.HOUSEHOLD_RELATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.OWN_BRANCH_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.UUID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.SYS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.UUID_BHYT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.REGISTER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.FATHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.FATHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.MOTHER_EDUCATIIONAL_LEVEL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.MOTHER_CAREER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.TDL_LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.TDL_HEIN_CARD_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.TDL_JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.TDL_PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CMND_BEFORE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.CMND_AFTER_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.VIR_DOB_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.DEPARTMENT_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_PATIENT_1>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PATIENT_PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.VIR_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.VIR_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.RELIGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PATIENT_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_PROGRAM>()
                .Property(e => e.PROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.PATIENT_TYPE_ALLOW_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALLOW>()
                .Property(e => e.PATIENT_TYPE_ALLOW_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.RIGHT_ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.RIGHT_ROUTE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.LIVE_AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HAS_BIRTH_CERTIFICATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HNCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.JOIN_5_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.PAID_6_MONTH)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.BHYT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.TT46_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.HEIN_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.KSK_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.CONTRACT_VALUE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.DEPOSIT_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.PAYMENT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.WORK_PLACE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ALTER>()
                .Property(e => e.WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_ROOM>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.PATIENT_TYPE_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.PATIENT_TYPE_SUB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PATIENT_TYPE_SUB>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.PREPARE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.APPROVAL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_MATY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.REQ_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.APPROVAL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PREPARE_METY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.PROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.DATA_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.DATA_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PROGRAM>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.PTTT_CALENDAR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.VIR_DATE_FROM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.VIR_DATE_TO)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_CALENDAR>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_GROUP_BEST>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.PTTT_TABLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.PTTT_TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_PTTT_TABLE>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.QC_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.QC_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_QC_NORMATION>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.RATION_TIME_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.RATION_TIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.REFECTORY_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.REFECTORY_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.LAST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SCHEDULE>()
                .Property(e => e.LAST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.RATION_SUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.RATION_SUM_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.RATION_SUM_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.REQ_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RATION_SUM>()
                .Property(e => e.REQ_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.RECEPTION_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.RECEPTION_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.PATIENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.AREA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_RECEPTION_ROOM>()
                .Property(e => e.AREA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.REFECTORY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.REFECTORY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REFECTORY>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.REGISTER_GATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.REGISTER_GATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.FORMAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_GATE>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.CALL_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.REGISTER_GATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.REGISTER_GATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REGISTER_REQ>()
                .Property(e => e.FORMAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.REHA_TRAIN_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.REHA_TRAIN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.REHA_TRAIN_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN>()
                .Property(e => e.REHA_TRAIN_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.REHA_TRAIN_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.REHA_TRAIN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.REHA_TRAIN_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REHA_TRAIN_TYPE>()
                .Property(e => e.REHA_TRAIN_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REMUNERATION>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.REHA_TRAIN_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.REHA_TRAIN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.REHA_TRAIN_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_REST_RETR_TYPE>()
                .Property(e => e.REHA_TRAIN_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.ORDER_ISSUE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.RESPONSIBLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.RESPONSIBLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.SCREEN_SAVER_MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.WORKING_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.WORKING_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.DEFAULT_DRUG_STORE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM>()
                .Property(e => e.IS_EXAM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.ORDER_ISSUE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.RESPONSIBLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.RESPONSIBLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.SCREEN_SAVER_MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.WORKING_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.WORKING_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.DEFAULT_DRUG_STORE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.IS_EXAM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.TOTAL_OPEN_SERVICE_REQ)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER>()
                .Property(e => e.TOTAL_TODAY_SERVICE_REQ)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.ORDER_ISSUE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.RESPONSIBLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.RESPONSIBLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.DEFAULT_DRUG_STORE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_COUNTER_1>()
                .Property(e => e.TOTAL_OPEN_TODAY)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_SARO>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.ROOM_TIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TIME>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_ROOM_TYPE_MODULE>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SAMPLE_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SARO_EXRO>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.NO_EXECUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.CONFIRM_NO_EXCUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.HEIN_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.HEIN_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_1>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_10>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_11>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_12>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.PLANNING_REQUEST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.SURGERY_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.MANNER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.PTTT_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.PTTT_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.EMOTIONLESS_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.EMOTIONLESS_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_13>()
                .Property(e => e.ATTACHED_SERVICE_NAMES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_14>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_14>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_14>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_14>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_14>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_14>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_14>()
                .Property(e => e.TOTAL_DEBT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_15>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.NO_EXECUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_16>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.NO_EXECUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.CONFIRM_NO_EXCUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_17>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.NO_EXECUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.CONVERT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.RECEIVE_SAMPLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.RECEIVE_SAMPLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.REQUEST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MEDICINE_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MEDICINE_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MEDICINE_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MEDICINE_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MEDICINE_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PREPROCESSING_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.PROCESSING_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.DOSAGE_FORM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MEDICINE_USE_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MEDICINE_USE_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MATERIAL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MATERIAL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MATERIAL_BID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MATERIAL_BID_YEAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MATERIAL_BID_EXTRA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MACHINE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.BED_CODE_LIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.SUBCLINICAL_RESULT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.CONVERT_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.CONVERT_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.OLD_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MATERIAL_SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_2>()
                .Property(e => e.MODEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.HEIN_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.HEIN_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_TYPE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MEDICINE_PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MATERIAL_IMP_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MATERIAL_IMP_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MATERIAL_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MATERIAL_BID_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MATERIAL_BID_PACKAGE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MATERIAL_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MATERIAL_TYPE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_3>()
                .Property(e => e.MATERIAL_PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.NO_EXECUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.HEIN_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.HEIN_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_4>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.NO_EXECUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.CONFIRM_NO_EXCUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.REQUEST_ROOM_IS_EXAM)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_5>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_6>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_SERVICE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.TDL_REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.DISCOUNT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.DISCOUNT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.NO_EXECUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.CONFIRM_NO_EXCUTE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_7>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.EMOTIONLESS_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.EMOTIONLESS_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.PTTT_PRIORITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.PTTT_PRIORITY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.SERVICE_PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_8>()
                .Property(e => e.SERVICE_PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.PRIMARY_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.JSON_PATIENT_TYPE_ALTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_MEDICINE_CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_MEDICINE_BID_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_MEDICINE_REGISTER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_MEDICINE_PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_HST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.TDL_MATERIAL_GROUP_BHYT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.AMOUNT_TEMP)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.PATIENT_PRICE_BHYT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_ADD_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_TOTAL_PRICE_NO_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_NO_DC)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.VIR_TOTAL_PATIENT_PRICE_TEMP)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.CONFIG_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.PACKAGE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.EXP_MEST_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_9>()
                .Property(e => e.EXP_MEST_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.PATIENT_BHYT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.PATIENT_PAY_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_PRIMARY_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_ORIGINAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_HEIN_NORMAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_USER_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_OTHER_SOURCE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_TOTAL_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_TOTAL_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_REAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_REAL_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TDL_REAL_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_BILL>()
                .Property(e => e.PAY_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.TDL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.TDL_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.DEBT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.TOTAL_PREVIOUS_DEBT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEBT>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TDL_VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.PAY_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_DEPOSIT>()
                .Property(e => e.PAY_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_MATY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.BEFORE_PTTT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.BEFORE_PTTT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.AFTER_PTTT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.AFTER_PTTT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.MANNER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.BEFORE_PTTT_ICD_TEXT__DELETE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.AFTER_PTTT_ICD_TEXT__DELETE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CM_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.ICD_CM_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.WICK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.DRAINAGE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PARTICIPANT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PCI)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.STENTING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.LOCATION_INTERVENTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.REASON_INTERVENTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.INTRODUCER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.GUIDING_CATHETER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.GUITE_WIRE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.BALLON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.STENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.CONTRAST_AGENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.INSTRUMENTS_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.STENT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.REMUNERATION)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PTTT_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PTTT_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.REAL_PTTT_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.REAL_PTTT_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.EMOTIONLESS_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.EMOTIONLESS_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.EMME_HEIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PTTT_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PTTT_CONDITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PTTT_CATASTROPHE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.PTTT_CATASTROPHE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.DEATH_WITHIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.DEATH_WITHIN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.EMOTIONLESS_METHOD_SECOND_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.EMOTIONLESS_METHOD_SECOND_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT>()
                .Property(e => e.EMME_SECOND_HEIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.BEFORE_PTTT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.BEFORE_PTTT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.AFTER_PTTT_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.AFTER_PTTT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.MANNER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.BEFORE_PTTT_ICD_TEXT__DELETE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.AFTER_PTTT_ICD_TEXT__DELETE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.ICD_CM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.ICD_CM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.ICD_CM_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.ICD_CM_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_PTTT_1>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.DISCOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.RATION_TIME_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.RATION_TIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.PRIMARY_PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.PRIMARY_PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_RATION>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.REHA_TRAIN_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.REHA_TRAIN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.REHA_TRAIN_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_REHA>()
                .Property(e => e.REHA_TRAIN_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.VALUE)
                .HasPrecision(19, 5);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.SUIM_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.SUIM_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.SUIM_INDEX_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_SUIN>()
                .Property(e => e.SUIM_INDEX_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.BACTERIUM_DENSITY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.ANTIBIOTIC_RESISTANCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.ANTIBIOTIC_RESISTANCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.SRI_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.LEAVEN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.RESULT_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.TEST_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.TEST_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.TEST_INDEX_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.TEST_INDEX_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.MACHINE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.TEST_INDEX_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN>()
                .Property(e => e.TEST_INDEX_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.BACTERIUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.BACTERIUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.BACTERIUM_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.BACTERIUM_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.BACTERIUM_DENSITY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.ANTIBIOTIC_RESISTANCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.ANTIBIOTIC_RESISTANCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.SRI_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.LEAVEN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEIN_1>()
                .Property(e => e.RESULT_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.SERE_SERV_TEMP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.SERE_SERV_TEMP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.DESCRIPTION_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.EMR_BUSINESS_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.EMR_DOCUMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.EMR_DOCUMENT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERE_SERV_TEMP>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.SERVICE_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.SERVICE_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.PARENT_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.PARENT_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERV_SEGR>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_LIMIT_PRICE_OLD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_LIMIT_RATIO_OLD)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.MAX_EXPEND)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.COGS)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.ESTIMATE_DURATION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.RATION_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.NOTICE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.PROCESS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.OTHER_PAY_SOURCE_ICDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.BODY_PART_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.TESTING_TECHNIQUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.APPLIED_PATIENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SAMPLE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.MIN_PROC_TIME_EXCEPT_PATY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.MAX_PROC_TIME_EXCEPT_PATY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.PETROLEUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.PETROLEUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.TOTAL_TIME_EXCEPT_PATY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.APPLIED_PATIENT_CLASSIFY_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.HEIN_SERVICE_TYPE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.ACTIVE_INGR_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.ACTIVE_INGR_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.DIIM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.DIIM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.FUEX_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.FUEX_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.TEST_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.TEST_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SUIM_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE>()
                .Property(e => e.SUIM_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.HEIN_SERVICE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.HEIN_SERVICE_BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.HEIN_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.HEIN_LIMIT_PRICE_OLD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.HEIN_LIMIT_RATIO_OLD)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.HEIN_LIMIT_RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.MAX_EXPEND)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.COGS)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.ESTIMATE_DURATION)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.PACKAGE_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.PACS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.RATION_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.NOTICE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.PROCESS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.OTHER_PAY_SOURCE_ICDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.BODY_PART_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.TESTING_TECHNIQUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.APPLIED_PATIENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.PTTT_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.PTTT_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.ICD_CM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_1>()
                .Property(e => e.ICD_CM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APPROVAL_CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.APPROVAL_CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.ALTER_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CHANGE_REQ>()
                .Property(e => e.ALTER_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.SERVICE_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.SERVICE_CONDITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_CONDITION>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.CONDITIONED_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.TREATMENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.FOLLOW_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.FOLLOW_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.FOLLOW_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_FOLLOW>()
                .Property(e => e.FOLLOW_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.ICD_CODES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_HEIN>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.EXPEND_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.EXPEND_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.AMOUNT_BHYT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_MATY>()
                .Property(e => e.SERVICE_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.EXPEND_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.EXPEND_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.AMOUNT_BHYT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.CONCENTRA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.PACKING_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.MANUFACTURER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_METY>()
                .Property(e => e.MANUFACTURER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_NUM_ORDER>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.ATTACH_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.ATTACH_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.ATTACH_SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PACKAGE>()
                .Property(e => e.ATTACH_SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.VAT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.REQUEST_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.OVERTIME_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.EXECUTE_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.HOUR_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.HOUR_TO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.REQUEST_DEPARMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.ACTUAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.OTHER_PAY_SOURCE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.INHERIT_PATIENT_TYPE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.SERVICE_CONDITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.SERVICE_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_PATY>()
                .Property(e => e.HEIN_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.CONCLUSION_CLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.CONCLUSION_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.OCCUPATIONAL_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.CONCLUSION_CONSULTATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXAM_CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PLANNING_REQUEST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SURGERY_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.INTERACTION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_CIRC_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_RESP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_DIGE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_KIDN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_NEUR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_MUSC_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_ENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_STOM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_EYE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_OEND_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_MENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_NUTR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_MOTI_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_OBST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PAEX_DERM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.VIR_CREATE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RECEIVE_SAMPLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RECEIVE_SAMPLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SERVICE_REQ_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SERVICE_REQ_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SERVICE_REQ_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SERVICE_REQ_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_ROOM_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_ROOM_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.EXECUTE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.REQUEST_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ASSIGN_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.ASSIGN_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TEST_SAMPLE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TEST_SAMPLE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RATION_TIME_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RATION_TIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PATIENT_CASE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.PATIENT_CASE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ>()
                .Property(e => e.RATION_SUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.TDL_SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SERVICE_REQ_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.SERVICE_REQ_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.EXECUTE_ROOM_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.RATION_TIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_1>()
                .Property(e => e.RATION_TIME_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.EXECUTE_ROOM_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.RATION_TIME_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.RATION_TIME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_10>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_11>()
                .Property(e => e.EXP_MEST_PRES_COUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.CONCLUSION_CLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.CONCLUSION_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.OCCUPATIONAL_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.CONCLUSION_CONSULTATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.EXAM_CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.PLANNING_REQUEST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.SURGERY_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_12>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.CONCLUSION_CLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.CONCLUSION_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.OCCUPATIONAL_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.CONCLUSION_CONSULTATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.EXAM_CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.PLANNING_REQUEST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.SURGERY_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_13>()
                .Property(e => e.INTERACTION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_SERVICE_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.ATTACH_ASSIGN_PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.CONCLUSION_CLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.CONCLUSION_SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.OCCUPATIONAL_DISEASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.CONCLUSION_CONSULTATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXAM_CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.CONCLUSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PLANNING_REQUEST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SURGERY_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.INTERACTION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_CIRC_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_RESP_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_DIGE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_KIDN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_NEUR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_MUSC_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_ENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_STOM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_EYE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_OEND_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_MENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_NUTR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_MOTI_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_OBST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.PAEX_DERM_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.VIR_CREATE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.RECEIVE_SAMPLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.RECEIVE_SAMPLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SERVICE_REQ_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SERVICE_REQ_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SERVICE_REQ_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.SERVICE_REQ_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_ROOM_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXECUTE_ROOM_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_2>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SERVICE_REQ_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_3>()
                .Property(e => e.SERVICE_REQ_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREATMENT_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREATMENT_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TREATMENT_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.TEMPERATURE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.BREATH_RATE)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.WEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.HEIGHT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.CHEST)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.VIR_BMI)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.VIR_BODY_SURFACE_AREA)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_5>()
                .Property(e => e.BELLY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SERVICE_REQ_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SERVICE_REQ_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SERVICE_REQ_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_6>()
                .Property(e => e.SERVICE_REQ_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.MEDI_STOCK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_7>()
                .Property(e => e.MEDI_STOCK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.RESERVED_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.NUM_ORDER_BASE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TREAT_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TREAT_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TREAT_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TREAT_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TREAT_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.OPTOMETRIST_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FORESIGHT_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FORESIGHT_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FORESIGHT_RIGHT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FORESIGHT_LEFT_GLASS_HOLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FORESIGHT_RIGHT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FORESIGHT_LEFT_USING_GLASS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.REFACTOMETRY_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.REFACTOMETRY_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.BEFORE_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.AFTER_LIGHT_REFLECTION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.AJUSTABLE_GLASS_FORESIGHT_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.NEARSIGHT_GLASS_RIGHT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.NEARSIGHT_GLASS_LEFT_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.NEARSIGHT_GLASS_READING_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.NEARSIGHT_GLASS_PUPIL_DIST)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_R)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.FORESIGHT_USING_GLASS_DEGREE_L)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.RESULT_APPROVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.RESULT_APPROVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.CONSULTANT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.CONSULTANT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ASSIGNED_EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ASSIGNED_EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.VIR_INTRUCTION_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.BIIN_TEST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.BLOCK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.SAMPLER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.SAMPLER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.TDL_INSTRUCTION_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.ASSIGN_TURN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_DERMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EAR_RIGHT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EAR_LEFT_NORMAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_EAR_LEFT_WHISPER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_UPPER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.PART_EXAM_LOWER_JAW)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.REQUEST_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.EXECUTE_USER_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.SERIAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.EXP_MEST_TEMPLATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.MEDICINE_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.KIDNEY_CABINET_SERVICE_REQ_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_8>()
                .Property(e => e.EXECUTE_KIDNEY_SERVICE_REQ_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ECG_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ECG_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.RESPIRATORY_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.RESPIRATORY_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.SYMPTOM_BEFORE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.SYMPTOM_AFTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PATHOLOGICAL_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.FULL_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_CIRCULATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_DIGESTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_KIDNEY_UROLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_NEUROLOGICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_MUSCLE_BONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_ENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_EAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_NOSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_THROAT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_STOMATOLOGY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_EYE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_OEND)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_MENTAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_OBSTETRIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_NUTRITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PART_EXAM_MOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.NEXT_TREAT_INTR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.NEXT_TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.SUBCLINICAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TREATMENT_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PTTT_APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PTTT_APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.ATTACHMENT_FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.VIR_KIDNEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.BARCODE_TEMP)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_9>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.SPEED)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.MORNING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.NOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.AFTERNOON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.EVENING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.PRES_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.EXCEED_LIMIT_IN_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.EXCEED_LIMIT_IN_DAY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.ODD_PRES_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.OVER_RESULT_TEST_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.OVER_KIDNEY_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_REQ_METY>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.INSTR_TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.INSTR_TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RERE_TIME>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.REPORT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.CATEGORY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.CATEGORY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.COGS)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.SERVICE_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_RETY_CAT>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.SPECIALITY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.SAME_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.SAME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.SAME_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_SAME>()
                .Property(e => e.SAME_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.EXE_SERVICE_MODULE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SERVICE_TYPE>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_HEIN_LIMIT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_PRICE_NO_ADD_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_TOTAL_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_TOTAL_HEIN_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_DEPO_REPAY>()
                .Property(e => e.TDL_VIR_TOTAL_PATIENT_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.TDL_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.TDL_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.TRANS_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SESE_TRANS_REQ>()
                .Property(e => e.TOTAL_REQUEST_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.STATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.STATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_STATION>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.INSTR_TIME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.INSTR_TIME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.RESULT_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.RESULT_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.RESULT_DESK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUBCLINICAL_RS_ADD>()
                .Property(e => e.RESULT_DESK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.SUIM_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.SUIM_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.SUIM_INDEX_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_INDEX>()
                .Property(e => e.SUIM_INDEX_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.SUIM_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.SUIM_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.SUIM_INDEX_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SUIM_SETY_SUIN>()
                .Property(e => e.SUIM_INDEX_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL>()
                .Property(e => e.SURG_REMUNERATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL>()
                .Property(e => e.SURG_REMUNERATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.SURG_REMUNERATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.SURG_REMUNERATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.EMOTIONLESS_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.EMOTIONLESS_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMU_DETAIL_1>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.SURG_REMUNERATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.SURG_REMUNERATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.PTTT_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.PTTT_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.EMOTIONLESS_METHOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.EMOTIONLESS_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.SERVICE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_SURG_REMUNERATION>()
                .Property(e => e.SERVICE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.BHYT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.NORMATION_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.CONVERT_RATIO_MLCT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_A)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_B)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_AB)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_O)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_RH_PLUS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.RESULT_BLOOD_RH_MINUS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_UNIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.TEST_INDEX_GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.MATERIAL_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.MATERIAL_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX>()
                .Property(e => e.SERVICE_UNIT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.MIN_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.MAX_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.NORMAL_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.WARNING_MIN_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.WARNING_MAX_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.TEST_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.TEST_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.AGE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TEST_INDEX_RANGE>()
                .Property(e => e.AGE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.MEDICAL_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.SUBCLINICAL_PROCESSES_BK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.CARE_INSTRUCTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.GENERAL_EXPRESSION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.ORIENTATION_CAPACITY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EMOTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.PERCEPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.FORM_OF_THINKING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.CONTENT_OF_THINKING)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.INSTINCTIVELY_BEHAVIOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.AWARENESS_BEHAVIOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.MEMORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.INTELLECTUAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.CONCENTRATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.CARDIOVASCULAR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.RESPIRATORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EMR_DOCUMENT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EMR_DOCUMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.CONTENT_BK)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.SUBCLINICAL_PROCESSES)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.DISEASE_STAGE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.REHABILITATION_CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EMR_DOCUMENT_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRACKING>()
                .Property(e => e.EMR_DOCUMENT_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.KC_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_BILL_FUND_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.EXEMPTION)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.EXEMPTION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SELLER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SELLER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SELLER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SELLER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SELLER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BUYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BUYER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BUYER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BUYER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TIG_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TIG_VOID_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.INVOICE_SYS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.INVOICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.NATIONAL_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BUYER_ORGANIZATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_MEDICINE_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_MATERIAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_SUBCLINICAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_SURG_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_EXAM_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_BED_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_DEPOSIT_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_REPAY_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_BLOOD_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TRANSACTION_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BUYER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PREVIOUS_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PREVIOUS_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SERE_SERV_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.EINVOICE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_DEBT_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_TRANSFER_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SWIPE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.ALL_TRANS_CODES_IN_INVOICE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.ROUNDED_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.ROUND_PRICE_BASE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.POS_INVOICE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.POS_PAN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.POS_CARD_HOLDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.POS_RESULT_JSON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.EINVOICE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.REPLACE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_ORIGINAL_EI_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_ORIGINAL_EI_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.EINVOICE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_BANK_CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_REJECT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_REJECT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_REJECT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BANK_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BEFORE_UL_CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BEFORE_UL_CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TRANSACTION_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TRANSACTION_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.PAY_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.PAY_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.ACCOUNT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.ACCOUNT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.REPAY_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.REPAY_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BANK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.BANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.CANCEL_REQ_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION>()
                .Property(e => e.TRANS_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.KC_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_BILL_FUND_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.EXEMPTION)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.EXEMPTION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SELLER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SELLER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SELLER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SELLER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SELLER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.BUYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.BUYER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.BUYER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.BUYER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CANCEL_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CANCEL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CANCEL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TIG_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TIG_VOID_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.INVOICE_SYS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.INVOICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.NATIONAL_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.BUYER_ORGANIZATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_MEDICINE_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_MATERIAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_SUBCLINICAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_SURG_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_EXAM_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_BED_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_DEPOSIT_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_REPAY_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_BLOOD_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TRANSACTION_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.BUYER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PREVIOUS_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TDL_PREVIOUS_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SERE_SERV_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.EINVOICE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_DEBT_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_TRANSFER_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SWIPE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.ALL_TRANS_CODES_IN_INVOICE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.ROUNDED_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.ROUND_PRICE_BASE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.POS_INVOICE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.POS_PAN)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.POS_CARD_HOLDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.POS_RESULT_JSON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TRANSACTION_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TRANSACTION_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.PAY_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.PAY_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.ACCOUNT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.ACCOUNT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CANCEL_CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.CANCEL_CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.DEBT_COLLECTION_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.DEBT_COLLECTION_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.KSK_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.LAST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.LAST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_1>()
                .Property(e => e.KSK_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CASHIER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CASHIER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.KC_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_BILL_FUND_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.EXEMPTION)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.EXEMPTION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.SELLER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.SELLER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.SELLER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.SELLER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.SELLER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.BUYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.BUYER_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.BUYER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.BUYER_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.FILE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CANCEL_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CANCEL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CANCEL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TIG_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TIG_VOID_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.INVOICE_SYS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.INVOICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.NATIONAL_TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.BUYER_ORGANIZATION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_MEDICINE_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_MATERIAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_SUBCLINICAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_SURG_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_EXAM_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_BED_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_DEPOSIT_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_REPAY_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_HEIN_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_PATIENT_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_BLOOD_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.SESSION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TRANSACTION_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.BUYER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PREVIOUS_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TDL_PREVIOUS_BILL_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.SERE_SERV_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TRANSFER_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.EINVOICE_NUM_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_DEBT_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.TREATMENT_TRANSFER_AMOUNT)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.SWIPE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.ALL_TRANS_CODES_IN_INVOICE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.ROUNDED_TOTAL_PRICE)
                .HasPrecision(21, 6);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.ROUND_PRICE_BASE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.PAY_FORM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.PAY_FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.ACCOUNT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.ACCOUNT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CANCEL_CASHIER_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.CANCEL_CASHIER_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSACTION_5>()
                .Property(e => e.DEPOSIT_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.TRANSFUSION_VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.PATIENT_BLOOD_ABO_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.PATIENT_BLOOD_RH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.PUC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.TEST_TUBE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.SCANGEL_GELCARD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.COOMBS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.BLOOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.GIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.GIVE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.BLOOD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.BLOOD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TRANSFUSION_SUM>()
                .Property(e => e.VOLUME)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.UNAPPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.UNAPPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.HOSPITALIZE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.HOSPITALIZE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_TYPE_EXT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.PREGNANCY_TERMINATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_CERT_ISSUER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_CERT_ISSUER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.XML_CHECKIN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.XML_CHECKIN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_END_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_ROOM_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.OWE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.OWE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DATA_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DATA_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_CERT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_CERT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_CERT_BOOK_FIRST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT>()
                .Property(e => e.DEATH_CERT_BOOK_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.UNAPPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.UNAPPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.HOSPITALIZE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.HOSPITALIZE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_TYPE_EXT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TDL_PATIENT_MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.PREGNANCY_TERMINATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DEATH_CERT_ISSUER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DEATH_CERT_ISSUER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.DEATH_SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.XML_CHECKIN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.XML_CHECKIN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.XML130_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.VIR_STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.XML130_CHECK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.END_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.COUNT_PATY_ALTER_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.COUNT_HEIN_APPROVAL)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.COUNT_XML_URL_NULL)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_1>()
                .Property(e => e.REQUEST_HOSPITALIZE_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.UNAPPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.UNAPPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.HOSPITALIZE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.HOSPITALIZE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_TYPE_EXT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TDL_PATIENT_MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.PREGNANCY_TERMINATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.FATHER_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.MOTHER_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_DEPARTMENT_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.END_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.AND_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_END_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_END_TYPE_EXT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.TREATMENT_END_TYPE_EXT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.IS_HAS_BABY)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.REPRESENTATIVE_HEIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.SICK_DIPLOMA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ACCIDENT_HURT_TYPE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.ACCIDENT_HURT_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EXIT_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EXIT_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_10>()
                .Property(e => e.EXIT_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.LAST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_11>()
                .Property(e => e.MR_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.UNAPPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.UNAPPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HOSPITALIZE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HOSPITALIZE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_TYPE_EXT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TDL_PATIENT_MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.PREGNANCY_TERMINATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DEATH_CERT_ISSUER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DEATH_CERT_ISSUER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.DEATH_SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.XML_CHECKIN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.XML_CHECKIN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.XML130_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ETHNIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.FATHER_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.MOTHER_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CAREER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_DEPARTMENT_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.AND_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_END_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_END_TYPE_EXT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.TREATMENT_END_TYPE_EXT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.IS_HAS_BABY)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.REPRESENTATIVE_HEIN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ACCEPT_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SYS_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HEIN_LEVEL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.HEIN_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.SICK_DIPLOMA)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ACCIDENT_HURT_TYPE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.ACCIDENT_HURT_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EXIT_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EXIT_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.EXIT_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_12>()
                .Property(e => e.END_ROOM_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_BILL_OTHER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_BILL_EXEMPTION)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_BILL_FUND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_OTHER_COPAID_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_DISCOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_PRICE_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.COUNT_HEIN_APPROVAL)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_DEBT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_OTHER_SOURCE_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.LAST_DEPOSIT_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TOTAL_SERVICE_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.WORK_PLACE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.WORK_PLACE_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_PATIENT_POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.TDL_TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.LOCKING_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_2>()
                .Property(e => e.PATIENT_TYPE_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.UNAPPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.UNAPPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.HOSPITALIZE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.HOSPITALIZE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_TYPE_EXT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.TDL_PATIENT_MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.PREGNANCY_TERMINATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DEATH_CERT_ISSUER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DEATH_CERT_ISSUER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.DEATH_SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ACCIDENT_HURT_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.ACCIDENT_HURT_TYPE_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EXIT_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EXIT_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.EXIT_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_3>()
                .Property(e => e.END_ROOM_BHYT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TDL_PATIENT_DOB_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.TREATMENT_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.KSK_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.OTHER_PAY_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.OTHER_PAY_SOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.HOPITALIZE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_4>()
                .Property(e => e.POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_5>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_BILL_OTHER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_BILL_EXEMPTION)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_BILL_FUND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_OTHER_COPAID_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_DISCOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_PRICE_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.COUNT_HEIN_APPROVAL)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_DEBT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_OTHER_SOURCE_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.LAST_DEPOSIT_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TOTAL_SERVICE_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.WORK_PLACE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.WORK_PLACE_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_PATIENT_POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.TDL_TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.LOCKING_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_6>()
                .Property(e => e.REMAIN_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_7>()
                .Property(e => e.PATIENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_8>()
                .Property(e => e.PATIENT_TYPE_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_END_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_END_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.END_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.END_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.END_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.END_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DATA_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.DATA_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.TREATMENT_TYPE_ID)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.GIVE_DATE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.BORROW_APPOINTMENT_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.PATIENT_PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.PATIENT_PROGRAM_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.PROGRAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.PROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.MEDI_RECORD_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_9>()
                .Property(e => e.MEDI_RECORD_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ADD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ADD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.REMOVE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.REMOVE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM>()
                .Property(e => e.PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.ADD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.ADD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.REMOVE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.REMOVE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.BED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.BED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BED_ROOM_1>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.BORROW_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.BORROW_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.GIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.GIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.RECEIVER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.RECEIVER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.DATA_STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_BORROW>()
                .Property(e => e.DATA_STORE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_BILL_OTHER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_BILL_EXEMPTION)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_BILL_FUND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_OTHER_COPAID_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_DISCOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_PRICE_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.COUNT_HEIN_APPROVAL)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_DEBT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_OTHER_SOURCE_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.LAST_DEPOSIT_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TOTAL_SERVICE_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.WORK_PLACE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.WORK_PLACE_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_PATIENT_POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.TDL_TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.HEIN_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE>()
                .Property(e => e.LOCKING_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.UNAPPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.UNAPPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.HOSPITALIZE_REASON_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.HOSPITALIZE_REASON_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.END_TYPE_EXT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TDL_PATIENT_MPS_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.PREGNANCY_TERMINATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DEATH_CERT_ISSUER_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DEATH_CERT_ISSUER_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.DEATH_SYNC_FAILD_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.XML_CHECKIN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.XML_CHECKIN_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TOTAL_BILL_OTHER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TOTAL_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_1>()
                .Property(e => e.TOTAL_DEBT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_BILL_OTHER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_BILL_EXEMPTION)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_BILL_FUND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_OTHER_COPAID_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_DISCOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_PRICE_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.COUNT_HEIN_APPROVAL)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_DEBT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_OTHER_SOURCE_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.LAST_DEPOSIT_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TOTAL_SERVICE_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.WORK_PLACE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.WORK_PLACE_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_PATIENT_POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.TDL_TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.LOCKING_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FUND_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_2>()
                .Property(e => e.FUND_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.END_DEPARTMENT_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.END_DEPARTMENT_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.HOSPITAL_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.HOSPITAL_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.END_DEPT_SUBS_HEAD_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.END_DEPT_SUBS_HEAD_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.HOSP_SUBS_DIRECTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TUBERCULOSIS_ISSUED_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_BILL_OTHER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_BILL_EXEMPTION)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_BILL_FUND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_HEIN_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_OTHER_COPAID_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_DISCOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_PRICE_EXPEND)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.COUNT_HEIN_APPROVAL)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_DEBT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_PATIENT_PRICE_BHYT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_OTHER_SOURCE_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.LAST_DEPOSIT_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TOTAL_SERVICE_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.WORK_PLACE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.WORK_PLACE_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_CLASSIFY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_POSITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_PATIENT_POSITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_TREATMENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.TDL_TREATMENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.LOCKING_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_3>()
                .Property(e => e.COUNT_TRANS_NOT_HAS_INVOICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.ICD_CAUSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.ICD_CAUSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.AUTO_DISCOUNT_RATIO)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.IN_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.IN_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.HOSPITALIZATION_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.END_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.END_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EXTRA_END_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TREATMENT_DAY_COUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.APPOINTMENT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.APPOINTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.OUT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.STORE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.JSON_PRINT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.JSON_FORM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.HRM_KSK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.CLINICAL_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SUBCLINICAL_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TREATMENT_DIRECTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TREATMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.PATIENT_CONDITION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.USED_MEDICINE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRANSPORT_VEHICLE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRANSPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRANSFER_IN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRANSFER_IN_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRANSFER_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRANSFER_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SICK_LEAVE_DAY)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.DEATH_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.DEATH_DOCUMENT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.DEATH_DOCUMENT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.DEATH_DOCUMENT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.MAIN_CAUSE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_HEIN_MEDI_ORG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.FUND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.FUND_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.FUND_COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.FUND_BUDGET)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.FUND_CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_AVATAR_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_MILITARY_RANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_TAX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.APPOINTMENT_SURGERY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.APPOINTMENT_EXAM_ROOM_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.CO_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.PROVISIONAL_DIAGNOSIS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SICK_HEIN_CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.COLLINEAR_XML4210_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.COLLINEAR_XML4210_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.REJECT_STORE_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.APPROVE_FINISH_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_IN_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_IN_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRADITIONAL_TRANS_IN_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EYE_TENSION_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EYE_TENSION_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EYESIGHT_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EYESIGHT_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EYESIGHT_GLASS_LEFT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EYESIGHT_GLASS_RIGHT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SICK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SICK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_DOCUMENT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.VIR_IN_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.VIR_OUT_MONTH)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.IN_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EXTRA_END_CODE_SEED_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.XML2076_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.XML2076_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.VIR_IN_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.VIR_OUT_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.FEE_LOCK_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.FEE_LOCK_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.CONTRAINDICATION_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.CO_TREAT_DEPARTMENT_IDS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.RECORD_INSPECTION_REJECT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRANSFER_IN_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_CMND_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_CCCD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_CCCD_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.NEXT_EXAM_FROM_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.NEXT_EXAM_TO_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_MOTHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_FATHER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.PERMISION_UPDATE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_PASSPORT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_PASSPORT_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SHOW_ICD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SHOW_ICD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SHOW_ICD_SUB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.SHOW_ICD_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRAN_PATI_DOCTOR_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRAN_PATI_DOCTOR_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRAN_PATI_DEPARTMENT_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRAN_PATI_HOSPITAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TRAN_PATI_HOSPITAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.VIR_TRAN_PATI_BOOK_YEAR)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_UNSIGNED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.EPIDEMILOGY_SYMPTOM)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TDL_PATIENT_ETHNIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.COVID_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.STORE_BORDEREAU_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TOTAL_BILL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TOTAL_BILL_TRANSFER_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TOTAL_DEPOSIT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TOTAL_REPAY_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TOTAL_PATIENT_PRICE)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.TOTAL_DEBT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.CARD_SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_FEE_4>()
                .Property(e => e.CARD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_LOGGING>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_LOGGING>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_LOGGING>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_LOGGING>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_LOGGING>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_LOGGING>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_LOGGING>()
                .Property(e => e.TREATMENT_LOG_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_LOGGING>()
                .Property(e => e.TREATMENT_LOG_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.TREATMENT_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.TREATMENT_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.BED_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.BED_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.REQ_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.REQ_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.UNLIMIT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.UNLIMIT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_TREATMENT_UNLIMIT>()
                .Property(e => e.UNLIMIT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.ACCOUNT_BOOK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.ACCOUNT_BOOK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ACCOUNT_BOOK>()
                .Property(e => e.CURRENT_NUM_ORDER)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.EXECUTE_ROLE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_GROUP_TEMP_DT>()
                .Property(e => e.EXECUTE_ROLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.SYMBOL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_INVOICE_BOOK>()
                .Property(e => e.CURRENT_NUM_ORDER)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.ROOM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.ROOM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.BRANCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_USER_ROOM>()
                .Property(e => e.HEIN_MEDI_ORG_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACC_APPOINTMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACC_APPOINTMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACC_APPOINTMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACC_APPOINTMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACC_APPOINTMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACC_APPOINTMENT>()
                .Property(e => e.VACCINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACC_APPOINTMENT>()
                .Property(e => e.VACCINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.VACCINATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.FOLLOW_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.FOLLOW_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.REACT_RESPONSER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.REACT_REPORTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.VACCINATION_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.VACCINATION_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.VACCINATION_REACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.VACCINATION_REACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.VACCINATION_EXAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.VACCINATION_EXAM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.PT_PATHOLOGICAL_HISTORY_FAMILY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.PT_ALLERGIC_HISTORY)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.ADVISE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.SPECIALIST_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.SPECIALIST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.SPECIALIST_CONCLUDE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.PATIENT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.PATIENT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.SPECIALIST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.SPECIALIST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.RELATIVE_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.RELATIVE_CMND_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.RELATIVE_MOBILE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.RELATIVE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.RELATIVE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VACCINATION_EXAM>()
                .Property(e => e.RELATIVE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VAEX_VAER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VAEX_VAER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VAEX_VAER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VAEX_VAER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VAEX_VAER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VAEX_VAER>()
                .Property(e => e.VACC_EXAM_RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VAEX_VAER>()
                .Property(e => e.VACC_EXAM_RESULT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.VITAMIN_A_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.EXECUTE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.EXECUTE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.AMOUNT)
                .HasPrecision(23, 6);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_GENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_CAREER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.TDL_PATIENT_WORK_PLACE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.MEDICINE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.MEDICINE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.EXP_MEST_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.EXECUTE_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.EXECUTE_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HIS_VITAMIN_A>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.EXPENSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.EXPENSE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.EXPENSE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.PERIOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_EXPENSE>()
                .Property(e => e.PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.VIR_FROM_OTHER_CLINICAL_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.VIR_NOT_END_TREATMENT_AMOUNT)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.PERIOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_PERIOD_DEPARTMENT>()
                .Property(e => e.PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.RATIO)
                .HasPrecision(5, 4);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.REPARTITION_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.REPARTITION_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.PERIOD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_HTC_REPARTITION_RATIO>()
                .Property(e => e.PERIOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.MIC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.ANTIBIOTIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.ANTIBIOTIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.BACTERIUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.BACTERIUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.BACTERIUM_FAMILY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_BAC_ANTIBIOTIC>()
                .Property(e => e.BACTERIUM_FAMILY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.TEST_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SUMMARY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.TEST_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.TEST_INDEX_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.MACHINE_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.MACHINE_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.MIC)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SRI_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.ANTIBIOTIC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.ANTIBIOTIC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.BACTERIUM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.BACTERIUM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.BACTERIUM_FAMILY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.BACTERIUM_FAMILY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.VIR_DATE_BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SAMPLE_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SAMPLE_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SAMPLE_SERVICE_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_RESULT>()
                .Property(e => e.SAMPLE_SERVICE_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.VIR_DATE_BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.APPROVAL_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.APPROVAL_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.TREATMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.REQUEST_DEPARTMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.REQUEST_DEPARTMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.REJECT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.REQUEST_LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.REQUEST_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.KSK_CONTRACT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE>()
                .Property(e => e.SAMPLE_CONDITION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SERVICE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SAMPLE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SAMPLE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.EXECUTE_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.PATIENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.GENDER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.REQUEST_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.REQUEST_ROOM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SERVICE_REQ_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SAMPLE_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SAMPLE_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SAMPLE_SERVICE_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_SAMPLE_SERVICE>()
                .Property(e => e.SAMPLE_SERVICE_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.TEST_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.TEST_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.TEST_INDEX_UNIT_SYMBOL)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.MACHINE_INDEX_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.MACHINE_INDEX_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.FORMAT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.RESULT_COEFFICIENT)
                .HasPrecision(19, 2);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.MACHINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.MACHINE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_LIS_TEST_INDEX_MAP>()
                .Property(e => e.EXECUTE_ROOM_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_FORM>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_FORM>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_FORM>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_FORM>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_FORM>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_FORM>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_FORM>()
                .Property(e => e.FORM_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_FORM>()
                .Property(e => e.FORM_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.APP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.MODULE_LINK)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.CONTROL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.CONTROL_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.BRANCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.CAPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.PRINT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_PRINT_TYPE_CFG>()
                .Property(e => e.PRINT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.JSON_FILTER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.JSON_READER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.VIR_TOTAL_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.VIR_QUERY_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.VIR_PREPARE_DATA_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.VIR_GENERATE_FILE_TIME)
                .HasPrecision(38, 0);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_URL_PDF)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.ERROR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_STT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_STT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.REPORT_TEMPLATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT>()
                .Property(e => e.EXTENSION_RECEIVE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.REPORT_TEMPLATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.REPORT_TEMPLATE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.REPORT_TEMPLATE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.EXTENSION_RECEIVE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.TUTORIAL)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.REPORT_TYPE_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_REPORT_TEMPLATE>()
                .Property(e => e.REPORT_TYPE_NAME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.JSON_OUTPUT)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.REPORT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.REPORT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.FORM_FIELD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_RETY_FOFI>()
                .Property(e => e.FORM_FIELD_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_USER_REPORT_TYPE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_USER_REPORT_TYPE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_USER_REPORT_TYPE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_USER_REPORT_TYPE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_USER_REPORT_TYPE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_USER_REPORT_TYPE>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_USER_REPORT_TYPE>()
                .Property(e => e.REPORT_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SAR_USER_REPORT_TYPE>()
                .Property(e => e.REPORT_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.COMMUNE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.COMMUNE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.INITIAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.SEARCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.DISTRICT_INITIAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.ID_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_COMMUNE>()
                .Property(e => e.CODE_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.LOGINNAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.KEY)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_CONFIG_APP_USER>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.DISTRICT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.INITIAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.SEARCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.ID_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_DISTRICT>()
                .Property(e => e.CODE_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.G_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.CODE_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.ID_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.PARENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.PARENT_ID_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.PARENT_CODE_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.GROUP_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_GROUP>()
                .Property(e => e.GROUP_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.ID_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_NATIONAL>()
                .Property(e => e.CODE_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.APP_CREATOR)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.APP_MODIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.GROUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.PROVINCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.PROVINCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.SEARCH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.NATIONAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.NATIONAL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.ID_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<V_SDA_PROVINCE>()
                .Property(e => e.CODE_PATH)
                .IsUnicode(false);
        }
    }
}
